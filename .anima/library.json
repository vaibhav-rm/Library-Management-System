{
  "version": 1,
  "components": {
    "@mui/material/Accordion#Accordion": {
      "id": "@mui/material/Accordion#Accordion",
      "name": "Accordion",
      "props": {
        "defaultExpanded": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "expanded": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Accordion",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material#AccordionSummary": {
      "id": "@mui/material#AccordionSummary",
      "name": "AccordionSummary",
      "props": {
        "expandIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-controls": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "AccordionSummary"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "parents": [
        "@mui/material/Accordion#Accordion"
      ],
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#Typography": {
      "id": "@mui/material#Typography",
      "name": "Typography",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "gutterBottom": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "noWrap": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "textAlign": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "paragraph": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "fontWeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "hidden": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-owns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-haspopup": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onMouseEnter": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onMouseLeave": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onMouseUp": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "display": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "letterSpacing": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "align": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Typography"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#AccordionSummary",
        "@mui/material#AccordionDetails",
        "@mui/material/Toolbar#Toolbar",
        "@mui/material/Paper#Paper",
        "@mui/material#Box",
        "@mui/material/MenuItem#MenuItem",
        "@mui/material/Grid#Grid",
        "@mui/material/Breadcrumbs#Breadcrumbs",
        "@mui/material/CardContent#CardContent",
        "@mui/material/Container#Container",
        "@mui/material/DialogContent#DialogContent",
        "@mui/material/Stack#Stack",
        "@mui/material/Popover#Popover",
        "@mui/material/Skeleton#Skeleton",
        "@mui/material/Stepper#Stepper",
        "@mui/material/StepLabel#StepLabel",
        "@mui/material/StepContent#StepContent"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#AccordionDetails": {
      "id": "@mui/material#AccordionDetails",
      "name": "AccordionDetails",
      "props": {},
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "AccordionDetails"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "parents": [
        "@mui/material/Accordion#Accordion"
      ],
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/AccordionActions#AccordionActions": {
      "id": "@mui/material/AccordionActions#AccordionActions",
      "name": "AccordionActions",
      "props": {},
      "export": {
        "path": "@mui/material/AccordionActions",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Accordion#Accordion"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#Button": {
      "id": "@mui/material#Button",
      "name": "Button",
      "props": {
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-controls": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-expanded": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-haspopup": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disableElevation": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "startIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "endIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Button"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/AccordionActions#AccordionActions",
        "@mui/material/Alert#Alert",
        "@mui/material#Box",
        "@mui/material/Toolbar#Toolbar",
        "@mui/material/DialogActions#DialogActions",
        "@mui/material/ButtonGroup#ButtonGroup",
        "@mui/material/Stack#Stack",
        "@mui/material#CardActions",
        "@mui/material/Grid#Grid",
        "@mui/material/FormControl#FormControl",
        "@mui/material/Snackbar#Snackbar",
        "@mui/material/MobileStepper#MobileStepper",
        "@mui/material/Paper#Paper",
        "@mui/material/Tooltip#Tooltip"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Accordion#MuiAccordion": {
      "id": "@mui/material/Accordion#MuiAccordion",
      "name": "MuiAccordion",
      "props": {
        "disableGutters": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "elevation": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "square": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Accordion",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/AccordionSummary#MuiAccordionSummary": {
      "id": "@mui/material/AccordionSummary#MuiAccordionSummary",
      "name": "MuiAccordionSummary",
      "props": {
        "expandIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/AccordionSummary",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Stack#Stack": {
      "id": "@mui/material/Stack#Stack",
      "name": "Stack",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "spacing": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "direction": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "justifyContent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "gap": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "divider": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "useFlexGap": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "flexWrap": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "noValidate": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Stack",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#ThemeProvider",
        "@mui/material/Stack#Stack",
        "@mui/material/Paper#Paper",
        "@mui/material#Box",
        "@mui/material/FormGroup#FormGroup"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Alert#Alert": {
      "id": "@mui/material/Alert#Alert",
      "name": "Alert",
      "props": {
        "severity": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "action": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "iconMapping": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Alert",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack",
        "@mui/material/Collapse#Collapse",
        "@mui/material/Snackbar#Snackbar"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/AlertTitle#AlertTitle": {
      "id": "@mui/material/AlertTitle#AlertTitle",
      "name": "AlertTitle",
      "props": {},
      "export": {
        "path": "@mui/material/AlertTitle",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Alert#Alert"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#Box": {
      "id": "@mui/material#Box",
      "name": "Box",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "width": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "my": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "display": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "gap": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "p": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "noValidate": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "onKeyDown": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "gridTemplateColumns": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "gridColumn": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "src": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "alt": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "points": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "Box"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Fade#Fade",
        "@mui/material/Container#Container",
        "@mui/material/Toolbar#Toolbar",
        "@mui/material#Box",
        "@mui/material/Autocomplete#Autocomplete",
        "@mui/material/ClickAwayListener#ClickAwayListener",
        "@mui/material/Grid#Grid",
        "@mui/material/Card#Card",
        "@mui/material/Portal#Portal",
        "@mui/material/Stack#Stack",
        "@mui/material/DialogContent#DialogContent",
        "@mui/material/Drawer#Drawer",
        "@mui/material#Typography",
        "@mui/material/Modal#Modal",
        "@mui/material/NoSsr#NoSsr",
        "@mui/material#ThemeProvider",
        "@mui/material/Popper#Popper",
        "@mui/material/Select#Select",
        "@mui/material/StepContent#StepContent",
        "@mui/material/Collapse#Collapse",
        "@mui/material/TableSortLabel#TableSortLabel",
        "@mui/material/Tooltip#Tooltip",
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Collapse#Collapse": {
      "id": "@mui/material/Collapse#Collapse",
      "name": "Collapse",
      "props": {
        "in": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "timeout": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "unmountOnExit": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "collapsedSize": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Collapse",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/List#List",
        "@mui/material/Card#Card",
        "@mui/material/TableCell#TableCell"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/IconButton#IconButton": {
      "id": "@mui/material/IconButton#IconButton",
      "name": "IconButton",
      "props": {
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "edge": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-controls": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-haspopup": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-expanded": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onMouseDown": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "title": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/IconButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Alert#Alert",
        "@mui/material/Toolbar#Toolbar",
        "@mui/material/MenuItem#MenuItem",
        "@mui/material#Box",
        "@mui/material/Tooltip#Tooltip",
        "@mui/material/Stack#Stack",
        "@mui/material/CardHeader#CardHeader",
        "@mui/material#CardActions",
        "@mui/material/ImageListItemBar#ImageListItemBar",
        "@mui/material/ListItem#ListItem",
        "@mui/material/TableCell#TableCell",
        "@mui/material/Paper#Paper",
        "@mui/material/InputAdornment#InputAdornment"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Fade#Fade": {
      "id": "@mui/material/Fade#Fade",
      "name": "Fade",
      "props": {
        "in": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "appear": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "timeout": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "unmountOnExit": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Fade",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Unstable_TrapFocus#TrapFocus",
        "@mui/material/Modal#Modal",
        "@mui/material/Popper#Popper",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/CssBaseline#CssBaseline": {
      "id": "@mui/material/CssBaseline#CssBaseline",
      "name": "CssBaseline",
      "props": {},
      "export": {
        "path": "@mui/material/CssBaseline",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/AppBar#AppBar": {
      "id": "@mui/material/AppBar#AppBar",
      "name": "AppBar",
      "props": {
        "position": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "enableColorOnDark": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/AppBar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material#ThemeProvider",
        "@mui/material/Dialog#Dialog"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Toolbar#Toolbar": {
      "id": "@mui/material/Toolbar#Toolbar",
      "name": "Toolbar",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disableGutters": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Toolbar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/AppBar#AppBar",
        "@mui/material#Box",
        "@mui/material/Container#Container",
        "@mui/material/Drawer#Drawer"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Container#Container": {
      "id": "@mui/material/Container#Container",
      "name": "Container",
      "props": {
        "maxWidth": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "fixed": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Container",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/AppBar#AppBar"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Fab#Fab": {
      "id": "@mui/material/Fab#Fab",
      "name": "Fab",
      "props": {
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Fab",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Zoom#Zoom"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Paper#Paper": {
      "id": "@mui/material/Paper#Paper",
      "name": "Paper",
      "props": {
        "square": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "elevation": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-modal": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Paper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Grow#Grow",
        "@mui/material/Fade#Fade",
        "@mui/material/Grid#Grid",
        "@mui/material/Unstable_Grid2#Grid",
        "@mui/material#ThemeProvider",
        "@mui/material/Popover#Popover",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/List#List": {
      "id": "@mui/material/List#List",
      "name": "List",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePadding": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "dense": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "subheader": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/List",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper",
        "@mui/material#Box",
        "@mui/material/Collapse#Collapse",
        "@mui/material/Dialog#Dialog",
        "@mui/material/Drawer#Drawer",
        "@mui/material/Card#Card"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListSubheader#ListSubheader": {
      "id": "@mui/material/ListSubheader#ListSubheader",
      "name": "ListSubheader",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ListSubheader",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ImageListItem#ImageListItem",
        "@mui/material/List#List",
        "@mui/material/Select#Select"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListItemButton#ListItemButton": {
      "id": "@mui/material/ListItemButton#ListItemButton",
      "name": "ListItemButton",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "to": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "divider": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-haspopup": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-controls": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "dense": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "selected": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-expanded": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ListItemButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ListItem#ListItem",
        "@mui/material/List#List",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListItemAvatar#ListItemAvatar": {
      "id": "@mui/material/ListItemAvatar#ListItemAvatar",
      "name": "ListItemAvatar",
      "props": {},
      "export": {
        "path": "@mui/material/ListItemAvatar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ListItemButton#ListItemButton",
        "@mui/material/ListItem#ListItem"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Avatar#Avatar": {
      "id": "@mui/material/Avatar#Avatar",
      "name": "Avatar",
      "props": {
        "alt": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "src": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Avatar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ListItemAvatar#ListItemAvatar",
        "@mui/material/IconButton#IconButton",
        "@mui/material/Stack#Stack",
        "@mui/material/Badge#Badge",
        "@mui/material/AvatarGroup#AvatarGroup",
        "@mui/material/CardHeader#CardHeader",
        "@mui/material/Chip#Chip",
        "@mui/material/Grid#Grid",
        "@mui/material/Unstable_Grid2#Grid",
        "@mui/material/MenuItem#MenuItem",
        "@mui/material/Skeleton#Skeleton",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListItemText#ListItemText": {
      "id": "@mui/material/ListItemText#ListItemText",
      "name": "ListItemText",
      "props": {
        "primary": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "secondary": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "primaryTypographyProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "secondaryTypographyProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "inset": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ListItemText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ListItemButton#ListItemButton",
        "@mui/material/ListItem#ListItem",
        "@mui/material/MenuItem#MenuItem"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Divider#Divider": {
      "id": "@mui/material/Divider#Divider",
      "name": "Divider",
      "props": {
        "textAlign": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "flexItem": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Divider",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/List#List",
        "@mui/material/Card#Card",
        "@mui/material/Drawer#Drawer",
        "@mui/material/Menu#Menu",
        "@mui/material/MenuList#MenuList",
        "@mui/material/Stack#Stack",
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListItem#ListItem": {
      "id": "@mui/material/ListItem#ListItem",
      "name": "ListItem",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePadding": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableGutters": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "secondaryAction": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ListItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/List#List"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Drawer#Drawer": {
      "id": "@mui/material/Drawer#Drawer",
      "name": "Drawer",
      "props": {
        "container": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ModalProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchor": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onTransitionEnd": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Drawer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#ThemeProvider": {
      "id": "@mui/material#ThemeProvider",
      "name": "ThemeProvider",
      "props": {
        "theme": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "ThemeProvider"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "parents": [
        "@mui/material/Stack#Stack",
        "@mui/material#Box",
        "@mui/material/Grid#Grid"
      ],
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Slide#Slide": {
      "id": "@mui/material/Slide#Slide",
      "name": "Slide",
      "props": {
        "appear": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "direction": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "in": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "mountOnEnter": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "unmountOnExit": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "container": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Slide",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FormGroup#FormGroup": {
      "id": "@mui/material/FormGroup#FormGroup",
      "name": "FormGroup",
      "props": {
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "row": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FormGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Switch#Switch": {
      "id": "@mui/material/Switch#Switch",
      "name": "Switch",
      "props": {
        "checked": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "edge": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultChecked": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "focusVisibleClassName": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Switch",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControlLabel#FormControlLabel",
        "@mui/material/ListItem#ListItem"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FormControlLabel#FormControlLabel": {
      "id": "@mui/material/FormControlLabel#FormControlLabel",
      "name": "FormControlLabel",
      "props": {
        "control": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "required": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "labelPlacement": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FormControlLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormGroup#FormGroup",
        "@mui/material#Box",
        "@mui/material/RadioGroup#RadioGroup"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Menu#Menu": {
      "id": "@mui/material/Menu#Menu",
      "name": "Menu",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorEl": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "keepMounted": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "transformOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "PaperProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "MenuListProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorReference": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorPosition": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "elevation": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Menu",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Toolbar#Toolbar",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/MenuItem#MenuItem": {
      "id": "@mui/material/MenuItem#MenuItem",
      "name": "MenuItem",
      "props": {
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "selected": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/MenuItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Menu#Menu",
        "@mui/material/MenuList#MenuList",
        "@mui/material/Select#Select",
        "@mui/material/TextField#TextField"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Badge#Badge": {
      "id": "@mui/material/Badge#Badge",
      "name": "Badge",
      "props": {
        "badgeContent": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "overlap": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "max": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "invisible": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "showZero": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Badge",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/IconButton#IconButton",
        "@mui/material/Stack#Stack",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Tooltip#Tooltip": {
      "id": "@mui/material/Tooltip#Tooltip",
      "name": "Tooltip",
      "props": {
        "title": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "enterTouchDelay": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "placement": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "describeChild": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "arrow": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onOpen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "classes": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "enterDelay": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "leaveDelay": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "followCursor": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableInteractive": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableFocusListener": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableHoverListener": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableTouchListener": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "PopperProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Tooltip",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/ListItem#ListItem",
        "@mui/material/Toolbar#Toolbar",
        "@mui/material/Grid#Grid",
        "@mui/material/ClickAwayListener#ClickAwayListener"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/CircularProgress#CircularProgress": {
      "id": "@mui/material/CircularProgress#CircularProgress",
      "name": "CircularProgress",
      "props": {
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableShrink": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "thickness": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/CircularProgress",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Backdrop#Backdrop",
        "@mui/material/Stack#Stack",
        "@mui/material#Box",
        "@mui/material/Fade#Fade"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TextField#TextField": {
      "id": "@mui/material/TextField#TextField",
      "name": "TextField",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "InputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "placeholder": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "margin": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "fullWidth": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "required": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "focused": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "InputLabelProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "helperText": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "multiline": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "maxRows": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "rows": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "select": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "SelectProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "hiddenLabel": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "error": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TextField",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Autocomplete#Autocomplete",
        "@mui/material#Box",
        "@mui/material/DialogContent#DialogContent",
        "@mui/material#ThemeProvider",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Autocomplete#Autocomplete": {
      "id": "@mui/material/Autocomplete#Autocomplete",
      "name": "Autocomplete",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "onOpen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "isOptionEqualToValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getOptionLabel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "options": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "loading": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "renderInput": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onKeyDown": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePortal": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "inputValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "multiple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableCloseOnSelect": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "renderOption": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onInputChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoHighlight": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "getOptionDisabled": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "filterOptions": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "renderTags": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "freeSolo": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableClearable": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "selectOnFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "clearOnBlur": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "handleHomeEndKeys": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "PopperComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "noOptionsText": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "autoComplete": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "includeInputInList": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "filterSelectedOptions": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "groupBy": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "limitTags": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "clearOnEscape": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableListWrap": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "openOnFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoSelect": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "blurOnSelect": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "readOnly": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "renderGroup": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "ListboxComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Autocomplete",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack",
        "@mui/material/ClickAwayListener#ClickAwayListener"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Checkbox#Checkbox": {
      "id": "@mui/material/Checkbox#Checkbox",
      "name": "Checkbox",
      "props": {
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checkedIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checked": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultChecked": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "indeterminate": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "edge": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Checkbox",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Autocomplete#Autocomplete",
        "@mui/material/FormControlLabel#FormControlLabel",
        "@mui/material/ListItemIcon#ListItemIcon",
        "@mui/material/ListItem#ListItem",
        "@mui/material/MenuItem#MenuItem",
        "@mui/material/TableCell#TableCell",
        "@mui/material/CardHeader#CardHeader"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Chip#Chip": {
      "id": "@mui/material/Chip#Chip",
      "name": "Chip",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "label": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "avatar": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onDelete": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "clickable": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "deleteIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Chip",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Autocomplete#Autocomplete",
        "@mui/material/Stack#Stack",
        "@mui/material#Box",
        "@mui/material/Divider#Divider"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Dialog#Dialog": {
      "id": "@mui/material/Dialog#Dialog",
      "name": "Dialog",
      "props": {
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "keepMounted": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "maxWidth": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "PaperComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "PaperProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "fullScreen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "fullWidth": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "scroll": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableEscapeKeyDown": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Dialog",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/DialogTitle#DialogTitle": {
      "id": "@mui/material/DialogTitle#DialogTitle",
      "name": "DialogTitle",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/DialogTitle",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Dialog#Dialog"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/DialogContent#DialogContent": {
      "id": "@mui/material/DialogContent#DialogContent",
      "name": "DialogContent",
      "props": {
        "dividers": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/DialogContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Dialog#Dialog"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/DialogContentText#DialogContentText": {
      "id": "@mui/material/DialogContentText#DialogContentText",
      "name": "DialogContentText",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/DialogContentText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/DialogContent#DialogContent"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/DialogActions#DialogActions": {
      "id": "@mui/material/DialogActions#DialogActions",
      "name": "DialogActions",
      "props": {},
      "export": {
        "path": "@mui/material/DialogActions",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Dialog#Dialog"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ClickAwayListener#ClickAwayListener": {
      "id": "@mui/material/ClickAwayListener#ClickAwayListener",
      "name": "ClickAwayListener",
      "props": {
        "onClickAway": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "mouseEvent": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "touchEvent": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ClickAwayListener",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper",
        "@mui/material/Grid#Grid"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Grid#Grid": {
      "id": "@mui/material/Grid#Grid",
      "name": "Grid",
      "props": {
        "container": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "item": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "spacing": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "xs": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "wrap": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "zeroMinWidth": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "columns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sm": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "direction": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "md": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "justifyContent": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSpacing": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "columnSpacing": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "textAlign": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Grid",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Autocomplete#Autocomplete",
        "@mui/material/Grid#Grid",
        "@mui/material#Box",
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Unstable_Grid2#Grid": {
      "id": "@mui/material/Unstable_Grid2#Grid",
      "name": "Grid",
      "props": {
        "container": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "spacing": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "xs": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "minHeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "display": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "justifyContent": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "alignItems": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "columns": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "md": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "lg": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "flexDirection": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "columnSpacing": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "xsOffset": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "mdOffset": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "disableEqualOverflow": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sm": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSpacing": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Unstable_Grid2",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Unstable_Grid2#Grid"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/AvatarGroup#AvatarGroup": {
      "id": "@mui/material/AvatarGroup#AvatarGroup",
      "name": "AvatarGroup",
      "props": {
        "renderSurplus": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "total": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "max": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/AvatarGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Backdrop#Backdrop": {
      "id": "@mui/material/Backdrop#Backdrop",
      "name": "Backdrop",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Backdrop",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ButtonGroup#ButtonGroup": {
      "id": "@mui/material/ButtonGroup#ButtonGroup",
      "name": "ButtonGroup",
      "props": {
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disableElevation": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ButtonGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/BottomNavigation#BottomNavigation": {
      "id": "@mui/material/BottomNavigation#BottomNavigation",
      "name": "BottomNavigation",
      "props": {
        "showLabels": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/BottomNavigation",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/BottomNavigationAction#BottomNavigationAction": {
      "id": "@mui/material/BottomNavigationAction#BottomNavigationAction",
      "name": "BottomNavigationAction",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/BottomNavigationAction",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/BottomNavigation#BottomNavigation"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Breadcrumbs#Breadcrumbs": {
      "id": "@mui/material/Breadcrumbs#Breadcrumbs",
      "name": "Breadcrumbs",
      "props": {
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "maxItems": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "separator": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Breadcrumbs",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Link#Link": {
      "id": "@mui/material/Link#Link",
      "name": "Link",
      "props": {
        "underline": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "href": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-current": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Link",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Breadcrumbs#Breadcrumbs",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Popper#Popper": {
      "id": "@mui/material/Popper#Popper",
      "name": "Popper",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorEl": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "transition": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disablePortal": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "placement": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Popper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Grow#Grow": {
      "id": "@mui/material/Grow#Grow",
      "name": "Grow",
      "props": {
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "in": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Grow",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Popper#Popper",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/MenuList#MenuList": {
      "id": "@mui/material/MenuList#MenuList",
      "name": "MenuList",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "autoFocusItem": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "dense": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/MenuList",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ClickAwayListener#ClickAwayListener",
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Card#Card": {
      "id": "@mui/material/Card#Card",
      "name": "Card",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Card",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#CardActionArea": {
      "id": "@mui/material#CardActionArea",
      "name": "CardActionArea",
      "props": {},
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "CardActionArea"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Card#Card"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/CardMedia#CardMedia": {
      "id": "@mui/material/CardMedia#CardMedia",
      "name": "CardMedia",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "image": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "alt": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "title": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/CardMedia",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#CardActionArea",
        "@mui/material/Card#Card"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/CardContent#CardContent": {
      "id": "@mui/material/CardContent#CardContent",
      "name": "CardContent",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/CardContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#CardActionArea",
        "@mui/material/Card#Card",
        "@mui/material#Box",
        "@mui/material/Collapse#Collapse"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material#CardActions": {
      "id": "@mui/material#CardActions",
      "name": "CardActions",
      "props": {
        "disableSpacing": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material",
        "locator": {
          "type": "named",
          "name": "CardActions"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Card#Card"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/CardHeader#CardHeader": {
      "id": "@mui/material/CardHeader#CardHeader",
      "name": "CardHeader",
      "props": {
        "avatar": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "action": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "title": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "subheader": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/CardHeader",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Card#Card"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FormControl#FormControl": {
      "id": "@mui/material/FormControl#FormControl",
      "name": "FormControl",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "required": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "error": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "fullWidth": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FormControl",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Grid#Grid",
        "@mui/material/Paper#Paper",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FormLabel#FormLabel": {
      "id": "@mui/material/FormLabel#FormLabel",
      "name": "FormLabel",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FormLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FormHelperText#FormHelperText": {
      "id": "@mui/material/FormHelperText#FormHelperText",
      "name": "FormHelperText",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FormHelperText",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Portal#Portal": {
      "id": "@mui/material/Portal#Portal",
      "name": "Portal",
      "props": {},
      "export": {
        "path": "@mui/material/Portal",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ClickAwayListener#ClickAwayListener"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/RadioGroup#RadioGroup": {
      "id": "@mui/material/RadioGroup#RadioGroup",
      "name": "RadioGroup",
      "props": {
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "row": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/RadioGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/DialogContent#DialogContent",
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Radio#Radio": {
      "id": "@mui/material/Radio#Radio",
      "name": "Radio",
      "props": {
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "checkedIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "checked": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Radio",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControlLabel#FormControlLabel"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Unstable_TrapFocus#TrapFocus": {
      "id": "@mui/material/Unstable_TrapFocus#TrapFocus",
      "name": "TrapFocus",
      "props": {
        "open": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableAutoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableEnforceFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Unstable_TrapFocus",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/InputLabel#InputLabel": {
      "id": "@mui/material/InputLabel#InputLabel",
      "name": "InputLabel",
      "props": {
        "htmlFor": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "shrink": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/InputLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Select#Select": {
      "id": "@mui/material/Select#Select",
      "name": "Select",
      "props": {
        "autoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "labelId": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onOpen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "input": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "native": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "multiple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "MenuProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "renderValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "displayEmpty": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "autoWidth": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Select",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ListItemIcon#ListItemIcon": {
      "id": "@mui/material/ListItemIcon#ListItemIcon",
      "name": "ListItemIcon",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ListItemIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ListItemButton#ListItemButton",
        "@mui/material/ListItem#ListItem",
        "@mui/material/MenuItem#MenuItem"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/SwipeableDrawer#SwipeableDrawer": {
      "id": "@mui/material/SwipeableDrawer#SwipeableDrawer",
      "name": "SwipeableDrawer",
      "props": {
        "container": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchor": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onOpen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "swipeAreaWidth": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableSwipeToOpen": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "ModalProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SwipeableDrawer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Skeleton#Skeleton": {
      "id": "@mui/material/Skeleton#Skeleton",
      "name": "Skeleton",
      "props": {
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "height": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "animation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "width": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Skeleton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/CardHeader#CardHeader",
        "@mui/material/Card#Card",
        "@mui/material#Typography",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Tabs#Tabs": {
      "id": "@mui/material/Tabs#Tabs",
      "name": "Tabs",
      "props": {
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "indicatorColor": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "textColor": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "selectionFollowsFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "centered": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "TabIndicatorProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "scrollButtons": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "allowScrollButtonsMobile": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Tabs",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/AppBar#AppBar",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Tab#Tab": {
      "id": "@mui/material/Tab#Tab",
      "name": "Tab",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRipple": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "iconPosition": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-current": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "wrapped": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Tab",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Tabs#Tabs"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Zoom#Zoom": {
      "id": "@mui/material/Zoom#Zoom",
      "name": "Zoom",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "in": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "timeout": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "unmountOnExit": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Zoom",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ButtonBase#ButtonBase": {
      "id": "@mui/material/ButtonBase#ButtonBase",
      "name": "ButtonBase",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ButtonBase",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Grid#Grid"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/SvgIcon#SvgIcon": {
      "id": "@mui/material/SvgIcon#SvgIcon",
      "name": "SvgIcon",
      "props": {
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "viewBox": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SvgIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Icon#Icon": {
      "id": "@mui/material/Icon#Icon",
      "name": "Icon",
      "props": {
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "fontSize": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "baseClassName": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Icon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ImageList#ImageList": {
      "id": "@mui/material/ImageList#ImageList",
      "name": "ImageList",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowHeight": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "gap": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "cols": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ImageList",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ImageListItem#ImageListItem": {
      "id": "@mui/material/ImageListItem#ImageListItem",
      "name": "ImageListItem",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "cols": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "rows": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ImageListItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ImageList#ImageList"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ImageListItemBar#ImageListItemBar": {
      "id": "@mui/material/ImageListItemBar#ImageListItemBar",
      "name": "ImageListItemBar",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "title": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "position": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "actionIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "actionPosition": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "subtitle": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ImageListItemBar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ImageListItem#ImageListItem"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Modal#Modal": {
      "id": "@mui/material/Modal#Modal",
      "name": "Modal",
      "props": {
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "keepMounted": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "closeAfterTransition": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Modal",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/NoSsr#NoSsr": {
      "id": "@mui/material/NoSsr#NoSsr",
      "name": "NoSsr",
      "props": {
        "defer": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/NoSsr",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Pagination#Pagination": {
      "id": "@mui/material/Pagination#Pagination",
      "name": "Pagination",
      "props": {
        "count": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "renderItem": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "showFirstButton": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "showLastButton": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "hidePrevButton": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "hideNextButton": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "page": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultPage": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "siblingCount": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "boundaryCount": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "shape": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Pagination",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/PaginationItem#PaginationItem": {
      "id": "@mui/material/PaginationItem#PaginationItem",
      "name": "PaginationItem",
      "props": {
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "to": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/PaginationItem",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Pagination#Pagination"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TablePagination#TablePagination": {
      "id": "@mui/material/TablePagination#TablePagination",
      "name": "TablePagination",
      "props": {
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "count": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "page": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onPageChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowsPerPage": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onRowsPerPageChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowsPerPageOptions": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "colSpan": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "slotProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ActionsComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TablePagination",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper",
        "@mui/material/TableRow#TableRow"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Popover#Popover": {
      "id": "@mui/material/Popover#Popover",
      "name": "Popover",
      "props": {
        "id": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorEl": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "transformOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableRestoreFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disableAutoFocus": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Popover",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/LinearProgress#LinearProgress": {
      "id": "@mui/material/LinearProgress#LinearProgress",
      "name": "LinearProgress",
      "props": {
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "valueBuffer": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/LinearProgress",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Rating#Rating": {
      "id": "@mui/material/Rating#Rating",
      "name": "Rating",
      "props": {
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "readOnly": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "max": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "precision": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "getLabelText": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChangeActive": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "emptyIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Rating",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/NativeSelect#NativeSelect": {
      "id": "@mui/material/NativeSelect#NativeSelect",
      "name": "NativeSelect",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "input": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/NativeSelect",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/OutlinedInput#OutlinedInput": {
      "id": "@mui/material/OutlinedInput#OutlinedInput",
      "name": "OutlinedInput",
      "props": {
        "label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "endAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "startAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "placeholder": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/OutlinedInput",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Select#Select",
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Slider#Slider": {
      "id": "@mui/material/Slider#Slider",
      "name": "Slider",
      "props": {
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "getAriaValueText": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "marks": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "step": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "valueLabelDisplay": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "min": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "max": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "slots": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "shiftStep": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "getAriaLabel": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "disableSwap": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "scale": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "valueLabelFormat": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "track": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onKeyDown": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Slider",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box",
        "@mui/material/Stack#Stack",
        "@mui/material/Grid#Grid"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Slider#SliderThumb": {
      "id": "@mui/material/Slider#SliderThumb",
      "name": "SliderThumb",
      "props": {},
      "export": {
        "path": "@mui/material/Slider",
        "locator": {
          "type": "named",
          "name": "SliderThumb"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/Snackbar#Snackbar": {
      "id": "@mui/material/Snackbar#Snackbar",
      "name": "Snackbar",
      "props": {
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "autoHideDuration": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "message": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "action": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "TransitionComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "anchorOrigin": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Snackbar",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/GlobalStyles#GlobalStyles": {
      "id": "@mui/material/GlobalStyles#GlobalStyles",
      "name": "GlobalStyles",
      "props": {
        "styles": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/GlobalStyles",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/SnackbarContent#SnackbarContent": {
      "id": "@mui/material/SnackbarContent#SnackbarContent",
      "name": "SnackbarContent",
      "props": {
        "message": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "action": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SnackbarContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/SpeedDialIcon#SpeedDialIcon": {
      "id": "@mui/material/SpeedDialIcon#SpeedDialIcon",
      "name": "SpeedDialIcon",
      "props": {
        "openIcon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SpeedDialIcon",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/SpeedDial#SpeedDial"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/SpeedDial#SpeedDial": {
      "id": "@mui/material/SpeedDial#SpeedDial",
      "name": "SpeedDial",
      "props": {
        "ariaLabel": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClose": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onOpen": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "open": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SpeedDial",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/SpeedDialAction#SpeedDialAction": {
      "id": "@mui/material/SpeedDialAction#SpeedDialAction",
      "name": "SpeedDialAction",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "icon": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "tooltipTitle": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "tooltipOpen": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/SpeedDialAction",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/SpeedDial#SpeedDial"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Stepper#Stepper": {
      "id": "@mui/material/Stepper#Stepper",
      "name": "Stepper",
      "props": {
        "alternativeLabel": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "activeStep": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "connector": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "nonLinear": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Stepper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack",
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Step#Step": {
      "id": "@mui/material/Step#Step",
      "name": "Step",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "completed": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Step",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stepper#Stepper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/StepLabel#StepLabel": {
      "id": "@mui/material/StepLabel#StepLabel",
      "name": "StepLabel",
      "props": {
        "StepIconComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "optional": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/StepLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Step#Step"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/MobileStepper#MobileStepper": {
      "id": "@mui/material/MobileStepper#MobileStepper",
      "name": "MobileStepper",
      "props": {
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "steps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "position": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "activeStep": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "nextButton": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "backButton": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/MobileStepper",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/StepButton#StepButton": {
      "id": "@mui/material/StepButton#StepButton",
      "name": "StepButton",
      "props": {
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/StepButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Step#Step"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/StepContent#StepContent": {
      "id": "@mui/material/StepContent#StepContent",
      "name": "StepContent",
      "props": {},
      "export": {
        "path": "@mui/material/StepContent",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Step#Step"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableContainer#TableContainer": {
      "id": "@mui/material/TableContainer#TableContainer",
      "name": "TableContainer",
      "props": {
        "component": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableContainer",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Table#Table": {
      "id": "@mui/material/Table#Table",
      "name": "Table",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "stickyHeader": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-labelledby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Table",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/TableContainer#TableContainer",
        "@mui/material#Box"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableHead#TableHead": {
      "id": "@mui/material/TableHead#TableHead",
      "name": "TableHead",
      "props": {
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableHead",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Table#Table"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableRow#TableRow": {
      "id": "@mui/material/TableRow#TableRow",
      "name": "TableRow",
      "props": {
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "hover": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "role": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "tabIndex": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-checked": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "selected": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableRow",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/TableHead#TableHead",
        "@mui/material/TableBody#TableBody",
        "@mui/material/TableFooter#TableFooter"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableCell#TableCell": {
      "id": "@mui/material/TableCell#TableCell",
      "name": "TableCell",
      "props": {
        "align": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "component": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "scope": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "colSpan": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "padding": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sortDirection": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "id": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "variant": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "rowSpan": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableCell",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/TableRow#TableRow"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableBody#TableBody": {
      "id": "@mui/material/TableBody#TableBody",
      "name": "TableBody",
      "props": {
        "ref": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableBody",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Table#Table"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableFooter#TableFooter": {
      "id": "@mui/material/TableFooter#TableFooter",
      "name": "TableFooter",
      "props": {},
      "export": {
        "path": "@mui/material/TableFooter",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Table#Table"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TableSortLabel#TableSortLabel": {
      "id": "@mui/material/TableSortLabel#TableSortLabel",
      "name": "TableSortLabel",
      "props": {
        "active": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "direction": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onClick": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TableSortLabel",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/TableCell#TableCell"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/Input#Input": {
      "id": "@mui/material/Input#Input",
      "name": "Input",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "name": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputComponent": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "endAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "startAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "placeholder": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "error": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/Input",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl",
        "@mui/material#Box"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/FilledInput#FilledInput": {
      "id": "@mui/material/FilledInput#FilledInput",
      "name": "FilledInput",
      "props": {
        "id": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "endAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-describedby": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "type": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "startAdornment": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/FilledInput",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/FormControl#FormControl"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/InputBase#InputBase": {
      "id": "@mui/material/InputBase#InputBase",
      "name": "InputBase",
      "props": {
        "sx": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "placeholder": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "inputProps": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/InputBase",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Paper#Paper"
      ],
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/InputAdornment#InputAdornment": {
      "id": "@mui/material/InputAdornment#InputAdornment",
      "name": "InputAdornment",
      "props": {
        "position": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/InputAdornment",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/TextField#TextField",
        "@mui/material/OutlinedInput#OutlinedInput",
        "@mui/material/FilledInput#FilledInput",
        "@mui/material/Input#Input"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/TextareaAutosize#TextareaAutosize": {
      "id": "@mui/material/TextareaAutosize#TextareaAutosize",
      "name": "TextareaAutosize",
      "props": {
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "placeholder": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "style": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "maxRows": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        },
        "defaultValue": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "minRows": {
          "type": "number",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/TextareaAutosize",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "hasNodeChildren": false,
      "tags": [
        "external-lib"
      ],
      "parents": []
    },
    "@mui/material/ToggleButtonGroup#ToggleButtonGroup": {
      "id": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
      "name": "ToggleButtonGroup",
      "props": {
        "color": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "value": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "exclusive": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "size": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "orientation": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ToggleButtonGroup",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/Stack#Stack"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    },
    "@mui/material/ToggleButton#ToggleButton": {
      "id": "@mui/material/ToggleButton#ToggleButton",
      "name": "ToggleButton",
      "props": {
        "value": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "aria-label": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        },
        "disabled": {
          "type": "boolean",
          "source": {
            "type": "code-usage"
          }
        },
        "selected": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "onChange": {
          "type": "any",
          "source": {
            "type": "code-usage"
          }
        },
        "key": {
          "type": "string",
          "source": {
            "type": "code-usage"
          }
        }
      },
      "export": {
        "path": "@mui/material/ToggleButton",
        "locator": {
          "type": "default"
        },
        "remote": true
      },
      "source": {
        "type": "code-usage"
      },
      "parents": [
        "@mui/material/ToggleButtonGroup#ToggleButtonGroup"
      ],
      "hasNodeChildren": true,
      "tags": [
        "external-lib"
      ]
    }
  },
  "instances": {
    "@mui/material/Accordion#Accordion": [
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded",
          "onChange": "handleExpansion",
          "slots": "{ transition: Fade as AccordionSlots['transition'] }",
          "slotProps": "{ transition: { timeout: 400 } }",
          "sx": "{\n          '& .MuiAccordion-region': { height: expanded ? 'auto' : 0 },\n          '& .MuiAccordionDetails-root': { display: expanded ? 'block' : 'none' },\n        }"
        },
        "snippet": "<Accordion\n        expanded={expanded}\n        onChange={handleExpansion}\n        slots={{ transition: Fade as AccordionSlots['transition'] }}\n        slotProps={{ transition: { timeout: 400 } }}\n        sx={{\n          '& .MuiAccordion-region': { height: expanded ? 'auto' : 0 },\n          '& .MuiAccordionDetails-root': { display: expanded ? 'block' : 'none' },\n        }}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1-content\"\n          id=\"panel1-header\"\n        >\n          <Typography>Custom transition using Fade</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n            malesuada lacus ex, sit amet blandit leo lobortis eget.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded === 'panel3'",
          "onChange": "handleChange('panel3')"
        },
        "snippet": "<Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3bh-content\"\n          id=\"panel3bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>\n            Advanced settings\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            Filtering has been entirely disabled for whole web server\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit\n            amet egestas eros, vitae egestas augue. Duis vel est augue.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded === 'panel2'",
          "onChange": "handleChange('panel2')"
        },
        "snippet": "<Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2bh-content\"\n          id=\"panel2bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>Users</Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            You are currently not an owner\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Donec placerat, lectus sed mattis semper, neque lectus feugiat lectus,\n            varius pulvinar diam eros in elit. Pellentesque convallis laoreet\n            laoreet.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded === 'panel1'",
          "onChange": "handleChange('panel1')"
        },
        "snippet": "<Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>\n            General settings\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>I am an accordion</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat.\n            Aliquam eget maximus est, id dignissim quam.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Accordion#Accordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expanded": "expanded === 'panel4'",
          "onChange": "handleChange('panel4')"
        },
        "snippet": "<Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel4bh-content\"\n          id=\"panel4bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>Personal data</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit\n            amet egestas eros, vitae egestas augue. Duis vel est augue.\n          </Typography>\n        </AccordionDetails>\n      </Accordion>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#AccordionSummary": [
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel3bh-content",
          "id": "panel3bh-header"
        },
        "snippet": "<AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel3bh-content\"\n          id=\"panel3bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>\n            Advanced settings\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            Filtering has been entirely disabled for whole web server\n          </Typography>\n        </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel2bh-content",
          "id": "panel2bh-header"
        },
        "snippet": "<AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2bh-content\"\n          id=\"panel2bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>Users</Typography>\n          <Typography sx={{ color: 'text.secondary' }}>\n            You are currently not an owner\n          </Typography>\n        </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel1bh-content",
          "id": "panel1bh-header"
        },
        "snippet": "<AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>\n            General settings\n          </Typography>\n          <Typography sx={{ color: 'text.secondary' }}>I am an accordion</Typography>\n        </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel4bh-content",
          "id": "panel4bh-header"
        },
        "snippet": "<AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel4bh-content\"\n          id=\"panel4bh-header\"\n        >\n          <Typography sx={{ width: '33%', flexShrink: 0 }}>Personal data</Typography>\n        </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ExpandMoreIcon />",
          "aria-controls": "panel2-content",
          "id": "panel2-header"
        },
        "snippet": "<AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2-content\"\n          id=\"panel2-header\"\n        >\n          <Typography>Default transition using Collapse</Typography>\n        </AccordionSummary>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Typography": [
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "h5",
          "noWrap": true,
          "component": "a",
          "href": "#app-bar-with-responsive-menu",
          "sx": "{\n              mr: 2,\n              display: { xs: 'flex', md: 'none' },\n              flexGrow: 1,\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }"
        },
        "snippet": "<Typography\n            variant=\"h5\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'flex', md: 'none' },\n              flexGrow: 1,\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "h6",
          "noWrap": true,
          "component": "a",
          "href": "#app-bar-with-responsive-menu",
          "sx": "{\n              mr: 2,\n              display: { xs: 'none', md: 'flex' },\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }"
        },
        "snippet": "<Typography\n            variant=\"h6\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'none', md: 'flex' },\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "role": "tabpanel",
          "hidden": "value !== index",
          "id": "`action-tabpanel-${index}`",
          "aria-labelledby": "`action-tab-${index}`"
        },
        "snippet": "<Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`action-tabpanel-${index}`}\n      aria-labelledby={`action-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "span",
          "variant": "subtitle1",
          "color": "inherit",
          "sx": "{\n                position: 'relative',\n                p: 4,\n                pt: 2,\n                pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\n              }"
        },
        "snippet": "<Typography\n              component=\"span\"\n              variant=\"subtitle1\"\n              color=\"inherit\"\n              sx={{\n                position: 'relative',\n                p: 4,\n                pt: 2,\n                pb: (theme) => `calc(${theme.spacing(1)} + 6px)`,\n              }}\n            >\n              {image.title}\n              <ImageMarked className=\"MuiImageMarked-root\" />\n            </Typography>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Typography",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-owns": "open ? 'mouse-over-popover' : undefined",
          "aria-haspopup": "true",
          "onMouseEnter": "handlePopoverOpen",
          "onMouseLeave": "handlePopoverClose"
        },
        "snippet": "<Typography\n        aria-owns={open ? 'mouse-over-popover' : undefined}\n        aria-haspopup=\"true\"\n        onMouseEnter={handlePopoverOpen}\n        onMouseLeave={handlePopoverClose}\n      >\n        Hover with a Popover.\n      </Typography>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#AccordionDetails": [
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>\n          <Typography>\n            Donec placerat, lectus sed mattis semper, neque lectus feugiat lectus,\n            varius pulvinar diam eros in elit. Pellentesque convallis laoreet\n            laoreet.\n          </Typography>\n        </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>\n          <Typography>\n            Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit\n            amet egestas eros, vitae egestas augue. Duis vel est augue.\n          </Typography>\n        </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>\n          <Typography>\n            Nunc vitae orci ultricies, auctor nunc in, volutpat nisl. Integer sit\n            amet egestas eros, vitae egestas augue. Duis vel est augue.\n          </Typography>\n        </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>\n          <Typography>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n            malesuada lacus ex, sit amet blandit leo lobortis eget.\n          </Typography>\n        </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#AccordionDetails",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionDetails>\n          <Typography>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse\n            malesuada lacus ex, sit amet blandit leo lobortis eget.\n          </Typography>\n        </AccordionDetails>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AccordionActions#AccordionActions": [
      {
        "componentId": "@mui/material/AccordionActions#AccordionActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AccordionActions>\n          <Button>Cancel</Button>\n          <Button>Agree</Button>\n        </AccordionActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Button": [
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-customized-button",
          "aria-controls": "open ? 'demo-customized-menu' : undefined",
          "aria-haspopup": "true",
          "aria-expanded": "open ? 'true' : undefined",
          "variant": "contained",
          "disableElevation": true,
          "onClick": "handleClick",
          "endIcon": "<KeyboardArrowDownIcon />"
        },
        "snippet": "<Button\n        id=\"demo-customized-button\"\n        aria-controls={open ? 'demo-customized-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        variant=\"contained\"\n        disableElevation\n        onClick={handleClick}\n        endIcon={<KeyboardArrowDownIcon />}\n      >\n        Options\n      </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "small",
          "aria-controls": "open ? 'split-button-menu' : undefined",
          "aria-expanded": "open ? 'true' : undefined",
          "aria-label": "select merge strategy",
          "aria-haspopup": "menu",
          "onClick": "handleToggle"
        },
        "snippet": "<Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <ArrowDropDownIcon />\n        </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0.5 }",
          "variant": "outlined",
          "size": "small",
          "onClick": "handleCheckedRight",
          "disabled": "leftChecked.length === 0",
          "aria-label": "move selected right"
        },
        "snippet": "<Button\n            sx={{ my: 0.5 }}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleCheckedRight}\n            disabled={leftChecked.length === 0}\n            aria-label=\"move selected right\"\n          >\n            &gt;\n          </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0.5 }",
          "variant": "outlined",
          "size": "small",
          "onClick": "handleCheckedRight",
          "disabled": "leftChecked.length === 0",
          "aria-label": "move selected right"
        },
        "snippet": "<Button\n            sx={{ my: 0.5 }}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleCheckedRight}\n            disabled={leftChecked.length === 0}\n            aria-label=\"move selected right\"\n          >\n            &gt;\n          </Button>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Button",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0.5 }",
          "variant": "outlined",
          "size": "small",
          "onClick": "handleCheckedLeft",
          "disabled": "rightChecked.length === 0",
          "aria-label": "move selected left"
        },
        "snippet": "<Button\n            sx={{ my: 0.5 }}\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleCheckedLeft}\n            disabled={rightChecked.length === 0}\n            aria-label=\"move selected left\"\n          >\n            &lt;\n          </Button>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Accordion#MuiAccordion": [
      {
        "componentId": "@mui/material/Accordion#MuiAccordion",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableGutters": true,
          "elevation": 0,
          "square": true
        },
        "snippet": "<MuiAccordion disableGutters elevation={0} square {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AccordionSummary#MuiAccordionSummary": [
      {
        "componentId": "@mui/material/AccordionSummary#MuiAccordionSummary",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "expandIcon": "<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />"
        },
        "snippet": "<MuiAccordionSummary\n    expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />}\n    {...props}\n  />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Stack#Stack": [
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "direction",
          "justifyContent": "justifyContent",
          "alignItems": "alignItems",
          "spacing": "spacing",
          "sx": "{ height: 240 }"
        },
        "snippet": "<Stack\n        direction={direction}\n        justifyContent={justifyContent}\n        alignItems={alignItems}\n        spacing={spacing}\n        sx={{ height: 240 }}\n      >\n        {[0, 1, 2].map((value) => (\n          <Paper\n            key={value}\n            sx={{\n              p: 2,\n              pt: value + 1,\n              pb: value + 1,\n              color: 'text.secondary',\n              typography: 'body2',\n              backgroundColor: (theme) =>\n                theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n            }}\n          >\n            {`Item ${value + 1}`}\n          </Paper>\n        ))}\n      </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{\n        width: '25ch',\n      }",
          "spacing": 2,
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Stack\n      component=\"form\"\n      sx={{\n        width: '25ch',\n      }}\n      spacing={2}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField\n        hiddenLabel\n        id=\"filled-hidden-label-small\"\n        defaultValue=\"Small\"\n        variant=\"filled\"\n        size=\"small\"\n      />\n      <TextField\n        hiddenLabel\n        id=\"filled-hidden-label-normal\"\n        defaultValue=\"Normal\"\n        variant=\"filled\"\n      />\n    </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "spacing": 2,
          "direction": "row",
          "sx": "{ mb: 1, px: 1 }",
          "alignItems": "center"
        },
        "snippet": "<Stack spacing={2} direction=\"row\" sx={{ mb: 1, px: 1 }} alignItems=\"center\">\n          <VolumeDownRounded htmlColor={lightIconColor} />\n          <Slider\n            aria-label=\"Volume\"\n            defaultValue={30}\n            sx={{\n              color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)',\n              '& .MuiSlider-track': {\n                border: 'none',\n              },\n              '& .MuiSlider-thumb': {\n                width: 24,\n                height: 24,\n                backgroundColor: '#fff',\n                '&::before': {\n                  boxShadow: '0 4px 8px rgba(0,0,0,0.4)',\n                },\n                '&:hover, &.Mui-focusVisible, &.Mui-active': {\n                  boxShadow: 'none',\n                },\n              },\n            }}\n          />\n          <VolumeUpRounded htmlColor={lightIconColor} />\n        </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "spacing": 2,
          "direction": "row",
          "sx": "{ mb: 1 }",
          "alignItems": "center"
        },
        "snippet": "<Stack spacing={2} direction=\"row\" sx={{ mb: 1 }} alignItems=\"center\">\n        <VolumeDown />\n        <Slider aria-label=\"Volume\" value={value} onChange={handleChange} />\n        <VolumeUp />\n      </Stack>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stack#Stack",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "spacing": "{ xs: 1, sm: 2 }",
          "direction": "row",
          "useFlexGap": true,
          "flexWrap": "wrap"
        },
        "snippet": "<Stack spacing={{ xs: 1, sm: 2 }} direction=\"row\" useFlexGap flexWrap=\"wrap\">\n        <Item>Item 1</Item>\n        <Item>Item 2</Item>\n        <Item>Long content</Item>\n      </Stack>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Alert#Alert": [
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClose": "handleClose",
          "severity": "success",
          "variant": "filled",
          "sx": "{ width: '100%' }"
        },
        "snippet": "<Alert\n          onClose={handleClose}\n          severity=\"success\"\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          This is a success Alert inside a Snackbar!\n        </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "action": "\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          ",
          "sx": "{ mb: 2 }"
        },
        "snippet": "<Alert\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n          sx={{ mb: 2 }}\n        >\n          Click the close icon to see the Collapse transition in action!\n        </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "severity": "success",
          "action": "\n          <Button color=\"inherit\" size=\"small\">\n            UNDO\n          </Button>\n        "
        },
        "snippet": "<Alert\n        severity=\"success\"\n        action={\n          <Button color=\"inherit\" size=\"small\">\n            UNDO\n          </Button>\n        }\n      >\n        This Alert uses a Button component for its action.\n      </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<CheckIcon fontSize=\"inherit\" />",
          "severity": "success"
        },
        "snippet": "<Alert icon={<CheckIcon fontSize=\"inherit\" />} severity=\"success\">\n      Here is a gentle confirmation that your action was successful.\n    </Alert>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Alert#Alert",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<CheckIcon fontSize=\"inherit\" />",
          "severity": "success"
        },
        "snippet": "<Alert icon={<CheckIcon fontSize=\"inherit\" />} severity=\"success\">\n        This success Alert has a custom icon.\n      </Alert>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AlertTitle#AlertTitle": [
      {
        "componentId": "@mui/material/AlertTitle#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Success</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AlertTitle#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Warning</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AlertTitle#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Error</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AlertTitle#AlertTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<AlertTitle>Info</AlertTitle>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#Box": [
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "height": 200,
          "width": 200,
          "my": 4,
          "display": "flex",
          "alignItems": "center",
          "gap": 4,
          "p": 2,
          "sx": "{ border: '2px solid grey' }"
        },
        "snippet": "<Box\n      height={200}\n      width={200}\n      my={4}\n      display=\"flex\"\n      alignItems=\"center\"\n      gap={4}\n      p={2}\n      sx={{ border: '2px solid grey' }}\n    >\n      This Box uses MUI System props for quick customization.\n    </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          required\n          id=\"outlined-required\"\n          label=\"Required\"\n          defaultValue=\"Hello World\"\n        />\n        <TextField\n          disabled\n          id=\"outlined-disabled\"\n          label=\"Disabled\"\n          defaultValue=\"Hello World\"\n        />\n        <TextField\n          id=\"outlined-password-input\"\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n        />\n        <TextField\n          id=\"outlined-read-only-input\"\n          label=\"Read Only\"\n          defaultValue=\"Hello World\"\n          InputProps={{\n            readOnly: true,\n          }}\n        />\n        <TextField\n          id=\"outlined-number\"\n          label=\"Number\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n        <TextField id=\"outlined-search\" label=\"Search field\" type=\"search\" />\n        <TextField\n          id=\"outlined-helperText\"\n          label=\"Helper text\"\n          defaultValue=\"Default Value\"\n          helperText=\"Some important text\"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id=\"filled-required\"\n          label=\"Required\"\n          defaultValue=\"Hello World\"\n          variant=\"filled\"\n        />\n        <TextField\n          disabled\n          id=\"filled-disabled\"\n          label=\"Disabled\"\n          defaultValue=\"Hello World\"\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-password-input\"\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-read-only-input\"\n          label=\"Read Only\"\n          defaultValue=\"Hello World\"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-number\"\n          label=\"Number\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-search\"\n          label=\"Search field\"\n          type=\"search\"\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-helperText\"\n          label=\"Helper text\"\n          defaultValue=\"Default Value\"\n          helperText=\"Some important text\"\n          variant=\"filled\"\n        />\n      </div>\n      <div>\n        <TextField\n          required\n          id=\"standard-required\"\n          label=\"Required\"\n          defaultValue=\"Hello World\"\n          variant=\"standard\"\n        />\n        <TextField\n          disabled\n          id=\"standard-disabled\"\n          label=\"Disabled\"\n          defaultValue=\"Hello World\"\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-password-input\"\n          label=\"Password\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-read-only-input\"\n          label=\"Read Only\"\n          defaultValue=\"Hello World\"\n          InputProps={{\n            readOnly: true,\n          }}\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-number\"\n          label=\"Number\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-search\"\n          label=\"Search field\"\n          type=\"search\"\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-helperText\"\n          label=\"Helper text\"\n          defaultValue=\"Default Value\"\n          helperText=\"Some important text\"\n          variant=\"standard\"\n        />\n      </div>\n    </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          id=\"outlined-select-currency\"\n          select\n          label=\"Select\"\n          defaultValue=\"EUR\"\n          helperText=\"Please select your currency\"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id=\"outlined-select-currency-native\"\n          select\n          label=\"Native select\"\n          defaultValue=\"EUR\"\n          SelectProps={{\n            native: true,\n          }}\n          helperText=\"Please select your currency\"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id=\"filled-select-currency\"\n          select\n          label=\"Select\"\n          defaultValue=\"EUR\"\n          helperText=\"Please select your currency\"\n          variant=\"filled\"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id=\"filled-select-currency-native\"\n          select\n          label=\"Native select\"\n          defaultValue=\"EUR\"\n          SelectProps={{\n            native: true,\n          }}\n          helperText=\"Please select your currency\"\n          variant=\"filled\"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n      <div>\n        <TextField\n          id=\"standard-select-currency\"\n          select\n          label=\"Select\"\n          defaultValue=\"EUR\"\n          helperText=\"Please select your currency\"\n          variant=\"standard\"\n        >\n          {currencies.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id=\"standard-select-currency-native\"\n          select\n          label=\"Native select\"\n          defaultValue=\"EUR\"\n          SelectProps={{\n            native: true,\n          }}\n          helperText=\"Please select your currency\"\n          variant=\"standard\"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>\n      </div>\n    </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{\n        '& > :not(style)': { m: 1 },\n      }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1 },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"component-simple\">Name</InputLabel>\n        <Input id=\"component-simple\" defaultValue=\"Composed TextField\" />\n      </FormControl>\n      <FormControl variant=\"standard\">\n        <InputLabel htmlFor=\"component-helper\">Name</InputLabel>\n        <Input\n          id=\"component-helper\"\n          defaultValue=\"Composed TextField\"\n          aria-describedby=\"component-helper-text\"\n        />\n        <FormHelperText id=\"component-helper-text\">\n          Some important helper text\n        </FormHelperText>\n      </FormControl>\n      <FormControl disabled variant=\"standard\">\n        <InputLabel htmlFor=\"component-disabled\">Name</InputLabel>\n        <Input id=\"component-disabled\" defaultValue=\"Composed TextField\" />\n        <FormHelperText>Disabled</FormHelperText>\n      </FormControl>\n      <FormControl error variant=\"standard\">\n        <InputLabel htmlFor=\"component-error\">Name</InputLabel>\n        <Input\n          id=\"component-error\"\n          defaultValue=\"Composed TextField\"\n          aria-describedby=\"component-error-text\"\n        />\n        <FormHelperText id=\"component-error-text\">Error</FormHelperText>\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"component-outlined\">Name</InputLabel>\n        <OutlinedInput\n          id=\"component-outlined\"\n          defaultValue=\"Composed TextField\"\n          label=\"Name\"\n        />\n      </FormControl>\n      <FormControl variant=\"filled\">\n        <InputLabel htmlFor=\"component-filled\">Name</InputLabel>\n        <FilledInput id=\"component-filled\" defaultValue=\"Composed TextField\" />\n      </FormControl>\n    </Box>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#Box",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "form",
          "sx": "{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }",
          "noValidate": true,
          "autoComplete": "off"
        },
        "snippet": "<Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '25ch' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <div>\n        <TextField\n          id=\"outlined-multiline-flexible\"\n          label=\"Multiline\"\n          multiline\n          maxRows={4}\n        />\n        <TextField\n          id=\"outlined-textarea\"\n          label=\"Multiline Placeholder\"\n          placeholder=\"Placeholder\"\n          multiline\n        />\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Multiline\"\n          multiline\n          rows={4}\n          defaultValue=\"Default Value\"\n        />\n      </div>\n      <div>\n        <TextField\n          id=\"filled-multiline-flexible\"\n          label=\"Multiline\"\n          multiline\n          maxRows={4}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-textarea\"\n          label=\"Multiline Placeholder\"\n          placeholder=\"Placeholder\"\n          multiline\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Multiline\"\n          multiline\n          rows={4}\n          defaultValue=\"Default Value\"\n          variant=\"filled\"\n        />\n      </div>\n      <div>\n        <TextField\n          id=\"standard-multiline-flexible\"\n          label=\"Multiline\"\n          multiline\n          maxRows={4}\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-textarea\"\n          label=\"Multiline Placeholder\"\n          placeholder=\"Placeholder\"\n          multiline\n          variant=\"standard\"\n        />\n        <TextField\n          id=\"standard-multiline-static\"\n          label=\"Multiline\"\n          multiline\n          rows={4}\n          defaultValue=\"Default Value\"\n          variant=\"standard\"\n        />\n      </div>\n    </Box>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Collapse#Collapse": [
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "li",
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse component=\"li\" in={open} timeout=\"auto\" unmountOnExit>\n              <List disablePadding>\n                <ListItemLink sx={{ pl: 4 }} to=\"/inbox/important\" />\n              </List>\n            </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "expanded",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography paragraph>Method:</Typography>\n          <Typography paragraph>\n            Heat 1/2 cup of the broth in a pot until simmering, add saffron and set\n            aside for 10 minutes.\n          </Typography>\n          <Typography paragraph>\n            Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over\n            medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring\n            occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a\n            large plate and set aside, leaving chicken and chorizo in the pan. Add\n            pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook,\n            stirring often until thickened and fragrant, about 10 minutes. Add\n            saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\n          </Typography>\n          <Typography paragraph>\n            Add rice and stir very gently to distribute. Top with artichokes and\n            peppers, and cook without stirring, until most of the liquid is absorbed,\n            15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and\n            mussels, tucking them down into the rice, and cook again without\n            stirring, until mussels have opened and rice is just tender, 5 to 7\n            minutes more. (Discard any mussels that don&apos;t open.)\n          </Typography>\n          <Typography>\n            Set aside off of the heat to let rest for 10 minutes, and then serve.\n          </Typography>\n        </CardContent>\n      </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <Box sx={{ margin: 1 }}>\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\n                History\n              </Typography>\n              <Table size=\"small\" aria-label=\"purchases\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Customer</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                    <TableCell align=\"right\">Total price ($)</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {row.history.map((historyRow) => (\n                    <TableRow key={historyRow.date}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {historyRow.date}\n                      </TableCell>\n                      <TableCell>{historyRow.customerId}</TableCell>\n                      <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                      <TableCell align=\"right\">\n                        {Math.round(historyRow.amount * row.price * 100) / 100}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Box>\n          </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open",
          "timeout": "auto",
          "unmountOnExit": true
        },
        "snippet": "<Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItemButton sx={{ pl: 4 }}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Starred\" />\n          </ListItemButton>\n        </List>\n      </Collapse>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Collapse#Collapse",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "horizontal",
          "in": "checked",
          "collapsedSize": 40
        },
        "snippet": "<Collapse orientation=\"horizontal\" in={checked} collapsedSize={40}>\n              {icon}\n            </Collapse>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/IconButton#IconButton": [
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "edge": "end",
          "aria-label": "account of current user",
          "aria-controls": "menuId",
          "aria-haspopup": "true",
          "onClick": "handleProfileMenuOpen",
          "color": "inherit"
        },
        "snippet": "<IconButton\n              size=\"large\"\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClick": "handleClick",
          "size": "small",
          "sx": "{ ml: 2 }",
          "aria-controls": "open ? 'account-menu' : undefined",
          "aria-haspopup": "true",
          "aria-expanded": "open ? 'true' : undefined"
        },
        "snippet": "<IconButton\n            onClick={handleClick}\n            size=\"small\"\n            sx={{ ml: 2 }}\n            aria-controls={open ? 'account-menu' : undefined}\n            aria-haspopup=\"true\"\n            aria-expanded={open ? 'true' : undefined}\n          >\n            <Avatar sx={{ width: 32, height: 32 }}>M</Avatar>\n          </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "more",
          "id": "long-button",
          "aria-controls": "open ? 'long-menu' : undefined",
          "aria-expanded": "open ? 'true' : undefined",
          "aria-haspopup": "true",
          "onClick": "handleClick"
        },
        "snippet": "<IconButton\n        aria-label=\"more\"\n        id=\"long-button\"\n        aria-controls={open ? 'long-menu' : undefined}\n        aria-expanded={open ? 'true' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "aria-label": "account of current user",
          "aria-controls": "menu-appbar",
          "aria-haspopup": "true",
          "onClick": "handleOpenNavMenu",
          "color": "inherit"
        },
        "snippet": "<IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/IconButton#IconButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "large",
          "aria-label": "account of current user",
          "aria-controls": "menu-appbar",
          "aria-haspopup": "true",
          "onClick": "handleMenu",
          "color": "inherit"
        },
        "snippet": "<IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Fade#Fade": [
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "query === 'progress'",
          "style": "{\n              transitionDelay: query === 'progress' ? '800ms' : '0ms',\n            }",
          "unmountOnExit": true
        },
        "snippet": "<Fade\n            in={query === 'progress'}\n            style={{\n              transitionDelay: query === 'progress' ? '800ms' : '0ms',\n            }}\n            unmountOnExit\n          >\n            <CircularProgress />\n          </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "loading",
          "style": "{\n            transitionDelay: loading ? '800ms' : '0ms',\n          }",
          "unmountOnExit": true
        },
        "snippet": "<Fade\n          in={loading}\n          style={{\n            transitionDelay: loading ? '800ms' : '0ms',\n          }}\n          unmountOnExit\n        >\n          <CircularProgress />\n        </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "appear": false,
          "in": "bannerOpen"
        },
        "snippet": "<Fade appear={false} in={bannerOpen}>\n          <Paper\n            role=\"dialog\"\n            aria-modal=\"false\"\n            aria-label=\"Cookie banner\"\n            square\n            variant=\"outlined\"\n            tabIndex={-1}\n            sx={{\n              position: 'fixed',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              m: 0,\n              p: 2,\n              borderWidth: 0,\n              borderTopWidth: 1,\n            }}\n          >\n            <Stack\n              direction={{ xs: 'column', sm: 'row' }}\n              justifyContent=\"space-between\"\n              gap={2}\n            >\n              <Box\n                sx={{\n                  flexShrink: 1,\n                  alignSelf: { xs: 'flex-start', sm: 'center' },\n                }}\n              >\n                <Typography fontWeight=\"bold\">This website uses cookies</Typography>\n                <Typography variant=\"body2\">\n                  example.com relies on cookies to improve your experience.\n                </Typography>\n              </Box>\n              <Stack\n                gap={2}\n                direction={{\n                  xs: 'row-reverse',\n                  sm: 'row',\n                }}\n                sx={{\n                  flexShrink: 0,\n                  alignSelf: { xs: 'flex-end', sm: 'center' },\n                }}\n              >\n                <Button size=\"small\" onClick={closeBanner} variant=\"contained\">\n                  Allow all\n                </Button>\n                <Button size=\"small\" onClick={closeBanner}>\n                  Reject all\n                </Button>\n              </Stack>\n            </Stack>\n          </Paper>\n        </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "open"
        },
        "snippet": "<Fade in={open}>\n          <Box sx={style}>\n            <Typography id=\"transition-modal-title\" variant=\"h6\" component=\"h2\">\n              Text in a modal\n            </Typography>\n            <Typography id=\"transition-modal-description\" sx={{ mt: 2 }}>\n              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n            </Typography>\n          </Box>\n        </Fade>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fade#Fade",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "trigger"
        },
        "snippet": "<Fade in={trigger}>\n      <Box\n        onClick={handleClick}\n        role=\"presentation\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n      >\n        {children}\n      </Box>\n    </Fade>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CssBaseline#CssBaseline": [
      {
        "componentId": "@mui/material/CssBaseline#CssBaseline",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CssBaseline />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CssBaseline#CssBaseline",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CssBaseline />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CssBaseline#CssBaseline",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CssBaseline />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CssBaseline#CssBaseline",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CssBaseline />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CssBaseline#CssBaseline",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CssBaseline />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AppBar#AppBar": [
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "fixed",
          "color": "primary",
          "sx": "{ top: 'auto', bottom: 0 }"
        },
        "snippet": "<AppBar position=\"fixed\" color=\"primary\" sx={{ top: 'auto', bottom: 0 }}>\n        <Toolbar>\n          <IconButton color=\"inherit\" aria-label=\"open drawer\">\n            <MenuIcon />\n          </IconButton>\n          <StyledFab color=\"secondary\" aria-label=\"add\">\n            <AddIcon />\n          </StyledFab>\n          <Box sx={{ flexGrow: 1 }} />\n          <IconButton color=\"inherit\">\n            <SearchIcon />\n          </IconButton>\n          <IconButton color=\"inherit\">\n            <MoreIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "primary",
          "enableColorOnDark": true
        },
        "snippet": "<AppBar position=\"static\" color=\"primary\" enableColorOnDark>\n          {appBarLabel('enableColorOnDark')}\n        </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "fixed",
          "sx": "{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          ml: { sm: `${drawerWidth}px` },\n        }"
        },
        "snippet": "<AppBar\n        position=\"fixed\"\n        sx={{\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          ml: { sm: `${drawerWidth}px` },\n        }}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { sm: 'none' } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap component=\"div\">\n            Responsive drawer\n          </Typography>\n        </Toolbar>\n      </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "default"
        },
        "snippet": "<AppBar position=\"static\" color=\"default\">\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"action tabs example\"\n        >\n          <Tab label=\"Item One\" {...a11yProps(0)} />\n          <Tab label=\"Item Two\" {...a11yProps(1)} />\n          <Tab label=\"Item Three\" {...a11yProps(2)} />\n        </Tabs>\n      </AppBar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AppBar#AppBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "static",
          "color": "primary"
        },
        "snippet": "<AppBar position=\"static\" color=\"primary\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              sx={{ mr: 2 }}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n              App bar\n            </Typography>\n          </Toolbar>\n        </AppBar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Toolbar#Toolbar": [
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableGutters": true
        },
        "snippet": "<Toolbar disableGutters>\n          <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'none', md: 'flex' },\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\n                  <Typography textAlign=\"center\">{page}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n          <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />\n          <Typography\n            variant=\"h5\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'flex', md: 'none' },\n              flexGrow: 1,\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <Button\n                key={page}\n                onClick={handleCloseNavMenu}\n                sx={{ my: 2, color: 'white', display: 'block' }}\n              >\n                {page}\n              </Button>\n            ))}\n          </Box>\n\n          <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              sx={{ mt: '45px' }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {settings.map((setting) => (\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                  <Typography textAlign=\"center\">{setting}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n        </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }"
        },
        "snippet": "<Toolbar\n      sx={{\n        pl: { sm: 2 },\n        pr: { xs: 1, sm: 1 },\n        ...(numSelected > 0 && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n        }),\n      }}\n    >\n      {numSelected > 0 ? (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          color=\"inherit\"\n          variant=\"subtitle1\"\n          component=\"div\"\n        >\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography\n          sx={{ flex: '1 1 100%' }}\n          variant=\"h6\"\n          id=\"tableTitle\"\n          component=\"div\"\n        >\n          Nutrition\n        </Typography>\n      )}\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <Tooltip title=\"Filter list\">\n          <IconButton>\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      )}\n    </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "dense"
        },
        "snippet": "<Toolbar variant=\"dense\">\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" sx={{ mr: 2 }}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n            Photos\n          </Typography>\n        </Toolbar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "back-to-top-anchor"
        },
        "snippet": "<Toolbar id=\"back-to-top-anchor\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Toolbar#Toolbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            sx={{ mr: 2 }}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"div\"\n            sx={{ display: { xs: 'none', sm: 'block' } }}\n          >\n            MUI\n          </Typography>\n          <Search>\n            <SearchIconWrapper>\n              <SearchIcon />\n            </SearchIconWrapper>\n            <StyledInputBase\n              placeholder=\"Search…\"\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </Search>\n          <Box sx={{ flexGrow: 1 }} />\n          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n            <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\n              <Badge badgeContent={4} color=\"error\">\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show 17 new notifications\"\n              color=\"inherit\"\n            >\n              <Badge badgeContent={17} color=\"error\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              size=\"large\"\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </Box>\n          <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </Box>\n        </Toolbar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Container#Container": [
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "main",
          "sx": "{ pt: 3 }"
        },
        "snippet": "<Container component=\"main\" sx={{ pt: 3 }}>\n        <Toolbar />\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n          tempor incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non\n          enim praesent elementum facilisis leo vel. Risus at ultrices mi tempus\n          imperdiet.\n        </Typography>\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n          tempor incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non\n          enim praesent elementum facilisis leo vel. Risus at ultrices mi tempus\n          imperdiet.\n        </Typography>\n      </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxWidth": "xl"
        },
        "snippet": "<Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <AdbIcon sx={{ display: { xs: 'none', md: 'flex' }, mr: 1 }} />\n          <Typography\n            variant=\"h6\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'none', md: 'flex' },\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleOpenNavMenu}\n              color=\"inherit\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\n                  <Typography textAlign=\"center\">{page}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n          <AdbIcon sx={{ display: { xs: 'flex', md: 'none' }, mr: 1 }} />\n          <Typography\n            variant=\"h5\"\n            noWrap\n            component=\"a\"\n            href=\"#app-bar-with-responsive-menu\"\n            sx={{\n              mr: 2,\n              display: { xs: 'flex', md: 'none' },\n              flexGrow: 1,\n              fontFamily: 'monospace',\n              fontWeight: 700,\n              letterSpacing: '.3rem',\n              color: 'inherit',\n              textDecoration: 'none',\n            }}\n          >\n            LOGO\n          </Typography>\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {pages.map((page) => (\n              <Button\n                key={page}\n                onClick={handleCloseNavMenu}\n                sx={{ my: 2, color: 'white', display: 'block' }}\n              >\n                {page}\n              </Button>\n            ))}\n          </Box>\n\n          <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n              </IconButton>\n            </Tooltip>\n            <Menu\n              sx={{ mt: '45px' }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {settings.map((setting) => (\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                  <Typography textAlign=\"center\">{setting}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>\n          </Box>\n        </Toolbar>\n      </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "load-lib"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxWidth": "sm"
        },
        "snippet": "<Container maxWidth=\"sm\">\n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h4\" component=\"h1\" sx={{ mb: 2 }}>\n          Material UI Vite.js example in TypeScript\n        </Typography>\n        <ProTip />\n        <Copyright />\n      </Box>\n    </Container>",
        "tags": [
          "external-lib",
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxWidth": "sm"
        },
        "snippet": "<Container maxWidth=\"sm\">\n        <Box sx={{ bgcolor: '#cfe8fc', height: '100vh' }} />\n      </Container>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Container#Container",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fixed": true
        },
        "snippet": "<Container fixed>\n        <Box sx={{ bgcolor: '#cfe8fc', height: '100vh' }} />\n      </Container>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Fab#Fab": [
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "save",
          "color": "primary",
          "sx": "buttonSx",
          "onClick": "handleButtonClick"
        },
        "snippet": "<Fab\n          aria-label=\"save\"\n          color=\"primary\"\n          sx={buttonSx}\n          onClick={handleButtonClick}\n        >\n          {success ? <CheckIcon /> : <SaveIcon />}\n        </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "extended",
          "size": "medium",
          "color": "primary"
        },
        "snippet": "<Fab variant=\"extended\" size=\"medium\" color=\"primary\">\n        <NavigationIcon sx={{ mr: 1 }} />\n        Extended\n      </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "extended",
          "size": "small",
          "color": "primary"
        },
        "snippet": "<Fab variant=\"extended\" size=\"small\" color=\"primary\">\n        <NavigationIcon sx={{ mr: 1 }} />\n        Extended\n      </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "fab.sx",
          "aria-label": "fab.label",
          "color": "fab.color"
        },
        "snippet": "<Fab sx={fab.sx} aria-label={fab.label} color={fab.color}>\n            {fab.icon}\n          </Fab>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Fab#Fab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": "medium",
          "color": "secondary",
          "aria-label": "add"
        },
        "snippet": "<Fab size=\"medium\" color=\"secondary\" aria-label=\"add\">\n        <AddIcon />\n      </Fab>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Paper#Paper": [
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "role": "dialog",
          "aria-modal": "false",
          "aria-label": "Cookie banner",
          "square": true,
          "variant": "outlined",
          "tabIndex": "-1",
          "sx": "{\n              position: 'fixed',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              m: 0,\n              p: 2,\n              borderWidth: 0,\n              borderTopWidth: 1,\n            }"
        },
        "snippet": "<Paper\n            role=\"dialog\"\n            aria-modal=\"false\"\n            aria-label=\"Cookie banner\"\n            square\n            variant=\"outlined\"\n            tabIndex={-1}\n            sx={{\n              position: 'fixed',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              m: 0,\n              p: 2,\n              borderWidth: 0,\n              borderTopWidth: 1,\n            }}\n          >\n            <Stack\n              direction={{ xs: 'column', sm: 'row' }}\n              justifyContent=\"space-between\"\n              gap={2}\n            >\n              <Box\n                sx={{\n                  flexShrink: 1,\n                  alignSelf: { xs: 'flex-start', sm: 'center' },\n                }}\n              >\n                <Typography fontWeight=\"bold\">This website uses cookies</Typography>\n                <Typography variant=\"body2\">\n                  example.com relies on cookies to improve your experience.\n                </Typography>\n              </Box>\n              <Stack\n                gap={2}\n                direction={{\n                  xs: 'row-reverse',\n                  sm: 'row',\n                }}\n                sx={{\n                  flexShrink: 0,\n                  alignSelf: { xs: 'flex-end', sm: 'center' },\n                }}\n              >\n                <Button size=\"small\" onClick={closeBanner} variant=\"contained\">\n                  Allow all\n                </Button>\n                <Button size=\"small\" onClick={closeBanner}>\n                  Reject all\n                </Button>\n              </Stack>\n            </Stack>\n          </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{\n          display: 'flex',\n          alignItems: 'center',\n          height: 50,\n          pl: 2,\n          bgcolor: 'background.default',\n        }"
        },
        "snippet": "<Paper\n        square\n        elevation={0}\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          height: 50,\n          pl: 2,\n          bgcolor: 'background.default',\n        }}\n      >\n        <Typography>{images[activeStep].label}</Typography>\n      </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{\n          display: 'flex',\n          alignItems: 'center',\n          height: 50,\n          pl: 2,\n          bgcolor: 'background.default',\n        }"
        },
        "snippet": "<Paper\n        square\n        elevation={0}\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          height: 50,\n          pl: 2,\n          bgcolor: 'background.default',\n        }}\n      >\n        <Typography>{steps[activeStep].label}</Typography>\n      </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "square": true,
          "elevation": 0,
          "sx": "{ p: 3 }"
        },
        "snippet": "<Paper square elevation={0} sx={{ p: 3 }}>\n          <Typography>All steps completed - you&apos;re finished</Typography>\n          <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>\n            Reset\n          </Button>\n        </Paper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Paper#Paper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "elevation": 0,
          "sx": "{ maxWidth: 256 }"
        },
        "snippet": "<Paper elevation={0} sx={{ maxWidth: 256 }}>\n          <FireNav component=\"nav\" disablePadding>\n            <ListItemButton component=\"a\" href=\"#customized-list\">\n              <ListItemIcon sx={{ fontSize: 20 }}>🔥</ListItemIcon>\n              <ListItemText\n                sx={{ my: 0 }}\n                primary=\"Firebash\"\n                primaryTypographyProps={{\n                  fontSize: 20,\n                  fontWeight: 'medium',\n                  letterSpacing: 0,\n                }}\n              />\n            </ListItemButton>\n            <Divider />\n            <ListItem component=\"div\" disablePadding>\n              <ListItemButton sx={{ height: 56 }}>\n                <ListItemIcon>\n                  <Home color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Project Overview\"\n                  primaryTypographyProps={{\n                    color: 'primary',\n                    fontWeight: 'medium',\n                    variant: 'body2',\n                  }}\n                />\n              </ListItemButton>\n              <Tooltip title=\"Project Settings\">\n                <IconButton\n                  size=\"large\"\n                  sx={{\n                    '& svg': {\n                      color: 'rgba(255,255,255,0.8)',\n                      transition: '0.2s',\n                      transform: 'translateX(0) rotate(0)',\n                    },\n                    '&:hover, &:focus': {\n                      bgcolor: 'unset',\n                      '& svg:first-of-type': {\n                        transform: 'translateX(-4px) rotate(-20deg)',\n                      },\n                      '& svg:last-of-type': {\n                        right: 0,\n                        opacity: 1,\n                      },\n                    },\n                    '&::after': {\n                      content: '\"\"',\n                      position: 'absolute',\n                      height: '80%',\n                      display: 'block',\n                      left: 0,\n                      width: '1px',\n                      bgcolor: 'divider',\n                    },\n                  }}\n                >\n                  <Settings />\n                  <ArrowRight sx={{ position: 'absolute', right: 4, opacity: 0 }} />\n                </IconButton>\n              </Tooltip>\n            </ListItem>\n            <Divider />\n            <Box\n              sx={{\n                bgcolor: open ? 'rgba(71, 98, 130, 0.2)' : null,\n                pb: open ? 2 : 0,\n              }}\n            >\n              <ListItemButton\n                alignItems=\"flex-start\"\n                onClick={() => setOpen(!open)}\n                sx={{\n                  px: 3,\n                  pt: 2.5,\n                  pb: open ? 0 : 2.5,\n                  '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } },\n                }}\n              >\n                <ListItemText\n                  primary=\"Build\"\n                  primaryTypographyProps={{\n                    fontSize: 15,\n                    fontWeight: 'medium',\n                    lineHeight: '20px',\n                    mb: '2px',\n                  }}\n                  secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\"\n                  secondaryTypographyProps={{\n                    noWrap: true,\n                    fontSize: 12,\n                    lineHeight: '16px',\n                    color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)',\n                  }}\n                  sx={{ my: 0 }}\n                />\n                <KeyboardArrowDown\n                  sx={{\n                    mr: -1,\n                    opacity: 0,\n                    transform: open ? 'rotate(-180deg)' : 'rotate(0)',\n                    transition: '0.2s',\n                  }}\n                />\n              </ListItemButton>\n              {open &&\n                data.map((item) => (\n                  <ListItemButton\n                    key={item.label}\n                    sx={{ py: 0, minHeight: 32, color: 'rgba(255,255,255,.8)' }}\n                  >\n                    <ListItemIcon sx={{ color: 'inherit' }}>\n                      {item.icon}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={item.label}\n                      primaryTypographyProps={{ fontSize: 14, fontWeight: 'medium' }}\n                    />\n                  </ListItemButton>\n                ))}\n            </Box>\n          </FireNav>\n        </Paper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/List#List": [
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }",
          "component": "nav",
          "aria-labelledby": "nested-list-subheader",
          "subheader": "\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          Nested List Items\n        </ListSubheader>\n      "
        },
        "snippet": "<List\n      sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\n      component=\"nav\"\n      aria-labelledby=\"nested-list-subheader\"\n      subheader={\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          Nested List Items\n        </ListSubheader>\n      }\n    >\n      <ListItemButton>\n        <ListItemIcon>\n          <SendIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Sent mail\" />\n      </ListItemButton>\n      <ListItemButton>\n        <ListItemIcon>\n          <DraftsIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Drafts\" />\n      </ListItemButton>\n      <ListItemButton onClick={handleClick}>\n        <ListItemIcon>\n          <InboxIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Inbox\" />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItemButton>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <ListItemButton sx={{ pl: 4 }}>\n            <ListItemIcon>\n              <StarBorder />\n            </ListItemIcon>\n            <ListItemText primary=\"Starred\" />\n          </ListItemButton>\n        </List>\n      </Collapse>\n    </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          width: 200,\n          height: 230,\n          bgcolor: 'background.paper',\n          overflow: 'auto',\n        }",
          "dense": true,
          "component": "div",
          "role": "list"
        },
        "snippet": "<List\n        sx={{\n          width: 200,\n          height: 230,\n          bgcolor: 'background.paper',\n          overflow: 'auto',\n        }}\n        dense\n        component=\"div\"\n        role=\"list\"\n      >\n        {items.map((value: number) => {\n          const labelId = `transfer-list-all-item-${value}-label`;\n\n          return (\n            <ListItemButton\n              key={value}\n              role=\"listitem\"\n              onClick={handleToggle(value)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{\n                    'aria-labelledby': labelId,\n                  }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\n            </ListItemButton>\n          );\n        })}\n      </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dense": true,
          "component": "div",
          "role": "list"
        },
        "snippet": "<List dense component=\"div\" role=\"list\">\n        {items.map((value: number) => {\n          const labelId = `transfer-list-item-${value}-label`;\n\n          return (\n            <ListItemButton\n              key={value}\n              role=\"listitem\"\n              onClick={handleToggle(value)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{\n                    'aria-labelledby': labelId,\n                  }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\n            </ListItemButton>\n          );\n        })}\n      </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "nav",
          "aria-label": "Device settings",
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<List\n        component=\"nav\"\n        aria-label=\"Device settings\"\n        sx={{ bgcolor: 'background.paper' }}\n      >\n        <ListItemButton\n          id=\"lock-button\"\n          aria-haspopup=\"listbox\"\n          aria-controls=\"lock-menu\"\n          aria-label=\"when device is locked\"\n          aria-expanded={open ? 'true' : undefined}\n          onClick={handleClickListItem}\n        >\n          <ListItemText\n            primary=\"When device is locked\"\n            secondary={options[selectedIndex]}\n          />\n        </ListItemButton>\n      </List>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/List#List",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }",
          "subheader": "<ListSubheader>Settings</ListSubheader>"
        },
        "snippet": "<List\n      sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}\n      subheader={<ListSubheader>Settings</ListSubheader>}\n    >\n      <ListItem>\n        <ListItemIcon>\n          <WifiIcon />\n        </ListItemIcon>\n        <ListItemText id=\"switch-list-label-wifi\" primary=\"Wi-Fi\" />\n        <Switch\n          edge=\"end\"\n          onChange={handleToggle('wifi')}\n          checked={checked.indexOf('wifi') !== -1}\n          inputProps={{\n            'aria-labelledby': 'switch-list-label-wifi',\n          }}\n        />\n      </ListItem>\n      <ListItem>\n        <ListItemIcon>\n          <BluetoothIcon />\n        </ListItemIcon>\n        <ListItemText id=\"switch-list-label-bluetooth\" primary=\"Bluetooth\" />\n        <Switch\n          edge=\"end\"\n          onChange={handleToggle('bluetooth')}\n          checked={checked.indexOf('bluetooth') !== -1}\n          inputProps={{\n            'aria-labelledby': 'switch-list-label-bluetooth',\n          }}\n        />\n      </ListItem>\n    </List>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListSubheader#ListSubheader": [
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "dataSet.key",
          "component": "div",
          "style": "inlineStyle"
        },
        "snippet": "<ListSubheader key={dataSet.key} component=\"div\" style={inlineStyle}>\n        {dataSet.group}\n      </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "id": "nested-list-subheader"
        },
        "snippet": "<ListSubheader component=\"div\" id=\"nested-list-subheader\">\n          Nested List Items\n        </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<ListSubheader sx={{ bgcolor: 'background.paper' }}>\n                  Yesterday\n                </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'background.paper' }"
        },
        "snippet": "<ListSubheader sx={{ bgcolor: 'background.paper' }}>\n                  Today\n                </ListSubheader>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListSubheader#ListSubheader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div"
        },
        "snippet": "<ListSubheader component=\"div\">December</ListSubheader>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemButton#ListItemButton": [
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "lock-button",
          "aria-haspopup": "listbox",
          "aria-controls": "lock-menu",
          "aria-label": "when device is locked",
          "aria-expanded": "open ? 'true' : undefined",
          "onClick": "handleClickListItem"
        },
        "snippet": "<ListItemButton\n          id=\"lock-button\"\n          aria-haspopup=\"listbox\"\n          aria-controls=\"lock-menu\"\n          aria-label=\"when device is locked\"\n          aria-expanded={open ? 'true' : undefined}\n          onClick={handleClickListItem}\n        >\n          <ListItemText\n            primary=\"When device is locked\"\n            secondary={options[selectedIndex]}\n          />\n        </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "divider": true,
          "aria-haspopup": "true",
          "aria-controls": "ringtone-menu",
          "aria-label": "phone ringtone",
          "onClick": "handleClickListItem"
        },
        "snippet": "<ListItemButton\n          divider\n          aria-haspopup=\"true\"\n          aria-controls=\"ringtone-menu\"\n          aria-label=\"phone ringtone\"\n          onClick={handleClickListItem}\n        >\n          <ListItemText primary=\"Phone ringtone\" secondary={value} />\n        </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alignItems": "flex-start",
          "onClick": "() => setOpen(!open)",
          "sx": "{\n                  px: 3,\n                  pt: 2.5,\n                  pb: open ? 0 : 2.5,\n                  '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } },\n                }"
        },
        "snippet": "<ListItemButton\n                alignItems=\"flex-start\"\n                onClick={() => setOpen(!open)}\n                sx={{\n                  px: 3,\n                  pt: 2.5,\n                  pb: open ? 0 : 2.5,\n                  '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } },\n                }}\n              >\n                <ListItemText\n                  primary=\"Build\"\n                  primaryTypographyProps={{\n                    fontSize: 15,\n                    fontWeight: 'medium',\n                    lineHeight: '20px',\n                    mb: '2px',\n                  }}\n                  secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\"\n                  secondaryTypographyProps={{\n                    noWrap: true,\n                    fontSize: 12,\n                    lineHeight: '16px',\n                    color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)',\n                  }}\n                  sx={{ my: 0 }}\n                />\n                <KeyboardArrowDown\n                  sx={{\n                    mr: -1,\n                    opacity: 0,\n                    transform: open ? 'rotate(-180deg)' : 'rotate(0)',\n                    transition: '0.2s',\n                  }}\n                />\n              </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "role": "undefined",
          "onClick": "handleToggle(value)",
          "dense": true
        },
        "snippet": "<ListItemButton role={undefined} onClick={handleToggle(value)} dense>\n              <ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n            </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemButton#ListItemButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "role": "listitem",
          "onClick": "handleToggle(value)"
        },
        "snippet": "<ListItemButton\n              key={value}\n              role=\"listitem\"\n              onClick={handleToggle(value)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{\n                    'aria-labelledby': labelId,\n                  }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\n            </ListItemButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemAvatar#ListItemAvatar": [
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar>\n                <Avatar\n                  alt={`Avatar n°${value + 1}`}\n                  src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar>\n                <Avatar sx={{ bgcolor: blue[100], color: blue[600] }}>\n                  <PersonIcon />\n                </Avatar>\n              </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar>\n          <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" />\n        </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar>\n          <Avatar alt=\"Cindy Baker\" src=\"/static/images/avatar/3.jpg\" />\n        </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemAvatar#ListItemAvatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemAvatar>\n          <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n        </ListItemAvatar>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Avatar#Avatar": [
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: deepOrange[500] }",
          "alt": "Remy Sharp",
          "src": "/broken-image.jpg"
        },
        "snippet": "<Avatar\n        sx={{ bgcolor: deepOrange[500] }}\n        alt=\"Remy Sharp\"\n        src=\"/broken-image.jpg\"\n      >\n        B\n      </Avatar>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Remy Sharp",
          "src": "/static/images/avatar/1.jpg",
          "sx": "{ width: 24, height: 24 }"
        },
        "snippet": "<Avatar\n        alt=\"Remy Sharp\"\n        src=\"/static/images/avatar/1.jpg\"\n        sx={{ width: 24, height: 24 }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Remy Sharp",
          "src": "/static/images/avatar/1.jpg",
          "sx": "{ width: 56, height: 56 }"
        },
        "snippet": "<Avatar\n        alt=\"Remy Sharp\"\n        src=\"/static/images/avatar/1.jpg\"\n        sx={{ width: 56, height: 56 }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: deepOrange[500] }",
          "alt": "Remy Sharp",
          "src": "/broken-image.jpg"
        },
        "snippet": "<Avatar\n        sx={{ bgcolor: deepOrange[500] }}\n        alt=\"Remy Sharp\"\n        src=\"/broken-image.jpg\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Avatar#Avatar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alt": "Ted talk",
          "src": "https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg"
        },
        "snippet": "<Avatar\n              alt=\"Ted talk\"\n              src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\"\n            />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemText#ListItemText": [
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Build",
          "primaryTypographyProps": "{\n                    fontSize: 15,\n                    fontWeight: 'medium',\n                    lineHeight: '20px',\n                    mb: '2px',\n                  }",
          "secondary": "Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning",
          "secondaryTypographyProps": "{\n                    noWrap: true,\n                    fontSize: 12,\n                    lineHeight: '16px',\n                    color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)',\n                  }",
          "sx": "{ my: 0 }"
        },
        "snippet": "<ListItemText\n                  primary=\"Build\"\n                  primaryTypographyProps={{\n                    fontSize: 15,\n                    fontWeight: 'medium',\n                    lineHeight: '20px',\n                    mb: '2px',\n                  }}\n                  secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\"\n                  secondaryTypographyProps={{\n                    noWrap: true,\n                    fontSize: 12,\n                    lineHeight: '16px',\n                    color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)',\n                  }}\n                  sx={{ my: 0 }}\n                />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ my: 0 }",
          "primary": "Firebash",
          "primaryTypographyProps": "{\n                  fontSize: 20,\n                  fontWeight: 'medium',\n                  letterSpacing: 0,\n                }"
        },
        "snippet": "<ListItemText\n                sx={{ my: 0 }}\n                primary=\"Firebash\"\n                primaryTypographyProps={{\n                  fontSize: 20,\n                  fontWeight: 'medium',\n                  letterSpacing: 0,\n                }}\n              />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Brunch this weekend?",
          "secondary": "\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                Ali Connors\n              </Typography>\n              {\" — I'll be in your neighborhood doing errands this…\"}\n            </React.Fragment>\n          "
        },
        "snippet": "<ListItemText\n          primary=\"Brunch this weekend?\"\n          secondary={\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                Ali Connors\n              </Typography>\n              {\" — I'll be in your neighborhood doing errands this…\"}\n            </React.Fragment>\n          }\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Summer BBQ",
          "secondary": "\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                to Scott, Alex, Jennifer\n              </Typography>\n              {\" — Wish I could come, but I'm out of town this…\"}\n            </React.Fragment>\n          "
        },
        "snippet": "<ListItemText\n          primary=\"Summer BBQ\"\n          secondary={\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                to Scott, Alex, Jennifer\n              </Typography>\n              {\" — Wish I could come, but I'm out of town this…\"}\n            </React.Fragment>\n          }\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemText#ListItemText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "primary": "Oui Oui",
          "secondary": "\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                Sandra Adams\n              </Typography>\n              {' — Do you have Paris recommendations? Have you ever…'}\n            </React.Fragment>\n          "
        },
        "snippet": "<ListItemText\n          primary=\"Oui Oui\"\n          secondary={\n            <React.Fragment>\n              <Typography\n                sx={{ display: 'inline' }}\n                component=\"span\"\n                variant=\"body2\"\n                color=\"text.primary\"\n              >\n                Sandra Adams\n              </Typography>\n              {' — Do you have Paris recommendations? Have you ever…'}\n            </React.Fragment>\n          }\n        />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Divider#Divider": [
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "flexItem": true,
          "orientation": "vertical",
          "sx": "{ mx: 0.5, my: 1 }"
        },
        "snippet": "<Divider flexItem orientation=\"vertical\" sx={{ mx: 0.5, my: 1 }} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "variant": "middle",
          "flexItem": true
        },
        "snippet": "<Divider orientation=\"vertical\" variant=\"middle\" flexItem />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "variant": "middle",
          "flexItem": true
        },
        "snippet": "<Divider orientation=\"vertical\" variant=\"middle\" flexItem />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 28, m: 0.5 }",
          "orientation": "vertical"
        },
        "snippet": "<Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Divider#Divider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "middle",
          "component": "li"
        },
        "snippet": "<Divider variant=\"middle\" component=\"li\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItem#ListItem": [
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "style",
          "key": "index",
          "component": "div",
          "disablePadding": true
        },
        "snippet": "<ListItem style={style} key={index} component=\"div\" disablePadding>\n      <ListItemButton>\n        <ListItemText primary={`Item ${index + 1}`} />\n      </ListItemButton>\n    </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "secondaryAction": "\n              <IconButton edge=\"end\" aria-label=\"comments\">\n                <CommentIcon />\n              </IconButton>\n            ",
          "disablePadding": true
        },
        "snippet": "<ListItem\n            key={value}\n            secondaryAction={\n              <IconButton edge=\"end\" aria-label=\"comments\">\n                <CommentIcon />\n              </IconButton>\n            }\n            disablePadding\n          >\n            <ListItemButton role={undefined} onClick={handleToggle(value)} dense>\n              <ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n            </ListItemButton>\n          </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "secondaryAction": "\n              <Checkbox\n                edge=\"end\"\n                onChange={handleToggle(value)}\n                checked={checked.indexOf(value) !== -1}\n                inputProps={{ 'aria-labelledby': labelId }}\n              />\n            ",
          "disablePadding": true
        },
        "snippet": "<ListItem\n            key={value}\n            secondaryAction={\n              <Checkbox\n                edge=\"end\"\n                onChange={handleToggle(value)}\n                checked={checked.indexOf(value) !== -1}\n                inputProps={{ 'aria-labelledby': labelId }}\n              />\n            }\n            disablePadding\n          >\n            <ListItemButton>\n              <ListItemAvatar>\n                <Avatar\n                  alt={`Avatar n°${value + 1}`}\n                  src={`/static/images/avatar/${value + 1}.jpg`}\n                />\n              </ListItemAvatar>\n              <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\n            </ListItemButton>\n          </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "text",
          "disablePadding": true,
          "sx": "{ display: 'block' }"
        },
        "snippet": "<ListItem key={text} disablePadding sx={{ display: 'block' }}>\n              <ListItemButton\n                sx={{\n                  minHeight: 48,\n                  justifyContent: open ? 'initial' : 'center',\n                  px: 2.5,\n                }}\n              >\n                <ListItemIcon\n                  sx={{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} />\n              </ListItemButton>\n            </ListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItem#ListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "text",
          "disablePadding": true,
          "sx": "{ display: 'block' }"
        },
        "snippet": "<ListItem key={text} disablePadding sx={{ display: 'block' }}>\n              <ListItemButton\n                sx={{\n                  minHeight: 48,\n                  justifyContent: open ? 'initial' : 'center',\n                  px: 2.5,\n                }}\n              >\n                <ListItemIcon\n                  sx={{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} sx={{ opacity: open ? 1 : 0 }} />\n              </ListItemButton>\n            </ListItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Drawer#Drawer": [
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "variant": "temporary",
          "open": "mobileOpen",
          "onTransitionEnd": "handleDrawerTransitionEnd",
          "onClose": "handleDrawerClose",
          "ModalProps": "{\n            keepMounted: true, // Better open performance on mobile.\n          }",
          "sx": "{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }"
        },
        "snippet": "<Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onTransitionEnd={handleDrawerTransitionEnd}\n          onClose={handleDrawerClose}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n        >\n          {drawer}\n        </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "variant": "temporary",
          "open": "mobileOpen",
          "onClose": "handleDrawerToggle",
          "ModalProps": "{\n            keepMounted: true, // Better open performance on mobile.\n          }",
          "sx": "{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }"
        },
        "snippet": "<Drawer\n          container={container}\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\n          }}\n        >\n          {drawer}\n        </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n            boxSizing: 'border-box',\n          },\n        }",
          "variant": "persistent",
          "anchor": "left",
          "open": "open"
        },
        "snippet": "<Drawer\n        sx={{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n            boxSizing: 'border-box',\n          },\n        }}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n      >\n        <DrawerHeader>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </DrawerHeader>\n        <Divider />\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n          },\n        }",
          "variant": "persistent",
          "anchor": "right",
          "open": "open"
        },
        "snippet": "<Drawer\n        sx={{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n          },\n        }}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={open}\n      >\n        <DrawerHeader>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </DrawerHeader>\n        <Divider />\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Drawer#Drawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n            boxSizing: 'border-box',\n          },\n        }",
          "variant": "permanent",
          "anchor": "right"
        },
        "snippet": "<Drawer\n        sx={{\n          width: drawerWidth,\n          flexShrink: 0,\n          '& .MuiDrawer-paper': {\n            width: drawerWidth,\n            boxSizing: 'border-box',\n          },\n        }}\n        variant=\"permanent\"\n        anchor=\"right\"\n      >\n        <Toolbar />\n        <Divider />\n        <List>\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem key={text} disablePadding>\n              <ListItemButton>\n                <ListItemIcon>\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#ThemeProvider": [
      {
        "componentId": "@mui/material#ThemeProvider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "theme": "createTheme({\n          components: {\n            MuiListItemButton: {\n              defaultProps: {\n                disableTouchRipple: true,\n              },\n            },\n          },\n          palette: {\n            mode: 'dark',\n            primary: { main: 'rgb(102, 157, 246)' },\n            background: { paper: 'rgb(5, 30, 52)' },\n          },\n        })"
        },
        "snippet": "<ThemeProvider\n        theme={createTheme({\n          components: {\n            MuiListItemButton: {\n              defaultProps: {\n                disableTouchRipple: true,\n              },\n            },\n          },\n          palette: {\n            mode: 'dark',\n            primary: { main: 'rgb(102, 157, 246)' },\n            background: { paper: 'rgb(5, 30, 52)' },\n          },\n        })}\n      >\n        <Paper elevation={0} sx={{ maxWidth: 256 }}>\n          <FireNav component=\"nav\" disablePadding>\n            <ListItemButton component=\"a\" href=\"#customized-list\">\n              <ListItemIcon sx={{ fontSize: 20 }}>🔥</ListItemIcon>\n              <ListItemText\n                sx={{ my: 0 }}\n                primary=\"Firebash\"\n                primaryTypographyProps={{\n                  fontSize: 20,\n                  fontWeight: 'medium',\n                  letterSpacing: 0,\n                }}\n              />\n            </ListItemButton>\n            <Divider />\n            <ListItem component=\"div\" disablePadding>\n              <ListItemButton sx={{ height: 56 }}>\n                <ListItemIcon>\n                  <Home color=\"primary\" />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Project Overview\"\n                  primaryTypographyProps={{\n                    color: 'primary',\n                    fontWeight: 'medium',\n                    variant: 'body2',\n                  }}\n                />\n              </ListItemButton>\n              <Tooltip title=\"Project Settings\">\n                <IconButton\n                  size=\"large\"\n                  sx={{\n                    '& svg': {\n                      color: 'rgba(255,255,255,0.8)',\n                      transition: '0.2s',\n                      transform: 'translateX(0) rotate(0)',\n                    },\n                    '&:hover, &:focus': {\n                      bgcolor: 'unset',\n                      '& svg:first-of-type': {\n                        transform: 'translateX(-4px) rotate(-20deg)',\n                      },\n                      '& svg:last-of-type': {\n                        right: 0,\n                        opacity: 1,\n                      },\n                    },\n                    '&::after': {\n                      content: '\"\"',\n                      position: 'absolute',\n                      height: '80%',\n                      display: 'block',\n                      left: 0,\n                      width: '1px',\n                      bgcolor: 'divider',\n                    },\n                  }}\n                >\n                  <Settings />\n                  <ArrowRight sx={{ position: 'absolute', right: 4, opacity: 0 }} />\n                </IconButton>\n              </Tooltip>\n            </ListItem>\n            <Divider />\n            <Box\n              sx={{\n                bgcolor: open ? 'rgba(71, 98, 130, 0.2)' : null,\n                pb: open ? 2 : 0,\n              }}\n            >\n              <ListItemButton\n                alignItems=\"flex-start\"\n                onClick={() => setOpen(!open)}\n                sx={{\n                  px: 3,\n                  pt: 2.5,\n                  pb: open ? 0 : 2.5,\n                  '&:hover, &:focus': { '& svg': { opacity: open ? 1 : 0 } },\n                }}\n              >\n                <ListItemText\n                  primary=\"Build\"\n                  primaryTypographyProps={{\n                    fontSize: 15,\n                    fontWeight: 'medium',\n                    lineHeight: '20px',\n                    mb: '2px',\n                  }}\n                  secondary=\"Authentication, Firestore Database, Realtime Database, Storage, Hosting, Functions, and Machine Learning\"\n                  secondaryTypographyProps={{\n                    noWrap: true,\n                    fontSize: 12,\n                    lineHeight: '16px',\n                    color: open ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0.5)',\n                  }}\n                  sx={{ my: 0 }}\n                />\n                <KeyboardArrowDown\n                  sx={{\n                    mr: -1,\n                    opacity: 0,\n                    transform: open ? 'rotate(-180deg)' : 'rotate(0)',\n                    transition: '0.2s',\n                  }}\n                />\n              </ListItemButton>\n              {open &&\n                data.map((item) => (\n                  <ListItemButton\n                    key={item.label}\n                    sx={{ py: 0, minHeight: 32, color: 'rgba(255,255,255,.8)' }}\n                  >\n                    <ListItemIcon sx={{ color: 'inherit' }}>\n                      {item.icon}\n                    </ListItemIcon>\n                    <ListItemText\n                      primary={item.label}\n                      primaryTypographyProps={{ fontSize: 14, fontWeight: 'medium' }}\n                    />\n                  </ListItemButton>\n                ))}\n            </Box>\n          </FireNav>\n        </Paper>\n      </ThemeProvider>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#ThemeProvider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "theme": "theme"
        },
        "snippet": "<ThemeProvider theme={theme}>\n            <Box\n              sx={{\n                p: 2,\n                borderRadius: 2,\n                bgcolor: 'background.default',\n                display: 'grid',\n                gridTemplateColumns: { md: '1fr 1fr' },\n                gap: 2,\n              }}\n            >\n              {[0, 1, 2, 3, 4, 6, 8, 12, 16, 24].map((elevation) => (\n                <Item key={elevation} elevation={elevation}>\n                  {`elevation=${elevation}`}\n                </Item>\n              ))}\n            </Box>\n          </ThemeProvider>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#ThemeProvider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "theme": "darkTheme"
        },
        "snippet": "<ThemeProvider theme={darkTheme}>\n        <AppBar position=\"static\" color=\"primary\" enableColorOnDark>\n          {appBarLabel('enableColorOnDark')}\n        </AppBar>\n        <AppBar position=\"static\" color=\"primary\">\n          {appBarLabel('default')}\n        </AppBar>\n      </ThemeProvider>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#ThemeProvider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "theme": "{\n        palette: {\n          primary: {\n            main: '#007FFF',\n            dark: '#0066CC',\n          },\n        },\n      }"
        },
        "snippet": "<ThemeProvider\n      theme={{\n        palette: {\n          primary: {\n            main: '#007FFF',\n            dark: '#0066CC',\n          },\n        },\n      }}\n    >\n      <Box\n        sx={{\n          width: 100,\n          height: 100,\n          borderRadius: 1,\n          bgcolor: 'primary.main',\n          '&:hover': {\n            bgcolor: 'primary.dark',\n          },\n        }}\n      />\n    </ThemeProvider>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#ThemeProvider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "theme": "customTheme(outerTheme)"
        },
        "snippet": "<ThemeProvider theme={customTheme(outerTheme)}>\n        <TextField label=\"Outlined\" />\n        <TextField label=\"Filled\" variant=\"filled\" />\n        <TextField label=\"Standard\" variant=\"standard\" />\n      </ThemeProvider>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Slide#Slide": [
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "up",
          "in": "checked",
          "mountOnEnter": true,
          "unmountOnExit": true
        },
        "snippet": "<Slide direction=\"up\" in={checked} mountOnEnter unmountOnExit>\n        {icon}\n      </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "appear": false,
          "direction": "down",
          "in": "!trigger"
        },
        "snippet": "<Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "container": "containerRef.current"
        },
        "snippet": "<Slide in={checked} container={containerRef.current}>\n          {icon}\n        </Slide>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "up",
          "ref": "ref"
        },
        "snippet": "<Slide direction=\"up\" ref={ref} {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slide#Slide",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "direction": "up",
          "ref": "ref"
        },
        "snippet": "<Slide direction=\"up\" ref={ref} {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormGroup#FormGroup": [
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "position",
          "row": true
        },
        "snippet": "<FormGroup aria-label=\"position\" row>\n        <FormControlLabel\n          value=\"top\"\n          control={<Switch color=\"primary\" />}\n          label=\"Top\"\n          labelPlacement=\"top\"\n        />\n        <FormControlLabel\n          value=\"start\"\n          control={<Switch color=\"primary\" />}\n          label=\"Start\"\n          labelPlacement=\"start\"\n        />\n        <FormControlLabel\n          value=\"bottom\"\n          control={<Switch color=\"primary\" />}\n          label=\"Bottom\"\n          labelPlacement=\"bottom\"\n        />\n        <FormControlLabel\n          value=\"end\"\n          control={<Switch color=\"primary\" />}\n          label=\"End\"\n          labelPlacement=\"end\"\n        />\n      </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "position",
          "row": true
        },
        "snippet": "<FormGroup aria-label=\"position\" row>\n        <FormControlLabel\n          value=\"top\"\n          control={<Checkbox />}\n          label=\"Top\"\n          labelPlacement=\"top\"\n        />\n        <FormControlLabel\n          value=\"start\"\n          control={<Checkbox />}\n          label=\"Start\"\n          labelPlacement=\"start\"\n        />\n        <FormControlLabel\n          value=\"bottom\"\n          control={<Checkbox />}\n          label=\"Bottom\"\n          labelPlacement=\"bottom\"\n        />\n        <FormControlLabel\n          value=\"end\"\n          control={<Checkbox />}\n          label=\"End\"\n          labelPlacement=\"end\"\n        />\n      </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true
        },
        "snippet": "<FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={dense}\n              onChange={(event) => setDense(event.target.checked)}\n            />\n          }\n          label=\"Enable dense\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={secondary}\n              onChange={(event) => setSecondary(event.target.checked)}\n            />\n          }\n          label=\"Enable secondary text\"\n        />\n      </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<FormGroup>\n      <FormControlLabel\n        control={<MaterialUISwitch sx={{ m: 1 }} defaultChecked />}\n        label=\"MUI switch\"\n      />\n      <FormControlLabel\n        control={<Android12Switch defaultChecked />}\n        label=\"Android 12\"\n      />\n      <FormControlLabel\n        control={<IOSSwitch sx={{ m: 1 }} defaultChecked />}\n        label=\"iOS style\"\n      />\n      <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n        <Typography>Off</Typography>\n        <AntSwitch defaultChecked inputProps={{ 'aria-label': 'ant design' }} />\n        <Typography>On</Typography>\n      </Stack>\n    </FormGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormGroup#FormGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<FormGroup>\n        <FormControlLabel\n          control={\n            <Switch checked={state.gilad} onChange={handleChange} name=\"gilad\" />\n          }\n          label=\"Gilad Gray\"\n        />\n        <FormControlLabel\n          control={\n            <Switch checked={state.jason} onChange={handleChange} name=\"jason\" />\n          }\n          label=\"Jason Killian\"\n        />\n        <FormControlLabel\n          control={\n            <Switch checked={state.antoine} onChange={handleChange} name=\"antoine\" />\n          }\n          label=\"Antoine Llorca\"\n        />\n      </FormGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Switch#Switch": [
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle('bluetooth')",
          "checked": "checked.indexOf('bluetooth') !== -1",
          "inputProps": "{\n            'aria-labelledby': 'switch-list-label-bluetooth',\n          }"
        },
        "snippet": "<Switch\n          edge=\"end\"\n          onChange={handleToggle('bluetooth')}\n          checked={checked.indexOf('bluetooth') !== -1}\n          inputProps={{\n            'aria-labelledby': 'switch-list-label-bluetooth',\n          }}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle('wifi')",
          "checked": "checked.indexOf('wifi') !== -1",
          "inputProps": "{\n            'aria-labelledby': 'switch-list-label-wifi',\n          }"
        },
        "snippet": "<Switch\n          edge=\"end\"\n          onChange={handleToggle('wifi')}\n          checked={checked.indexOf('wifi') !== -1}\n          inputProps={{\n            'aria-labelledby': 'switch-list-label-wifi',\n          }}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "loading",
          "onChange": "() => setLoading(!loading)",
          "name": "loading",
          "color": "primary"
        },
        "snippet": "<Switch\n            checked={loading}\n            onChange={() => setLoading(!loading)}\n            name=\"loading\"\n            color=\"primary\"\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "checked",
          "onChange": "handleChange",
          "inputProps": "{ 'aria-label': 'controlled' }"
        },
        "snippet": "<Switch\n      checked={checked}\n      onChange={handleChange}\n      inputProps={{ 'aria-label': 'controlled' }}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Switch#Switch",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "auth",
          "onChange": "handleChange",
          "aria-label": "login switch"
        },
        "snippet": "<Switch\n              checked={auth}\n              onChange={handleChange}\n              aria-label=\"login switch\"\n            />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormControlLabel#FormControlLabel": [
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "bottom",
          "control": "<Switch color=\"primary\" />",
          "label": "Bottom",
          "labelPlacement": "bottom"
        },
        "snippet": "<FormControlLabel\n          value=\"bottom\"\n          control={<Switch color=\"primary\" />}\n          label=\"Bottom\"\n          labelPlacement=\"bottom\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "start",
          "control": "<Switch color=\"primary\" />",
          "label": "Start",
          "labelPlacement": "start"
        },
        "snippet": "<FormControlLabel\n          value=\"start\"\n          control={<Switch color=\"primary\" />}\n          label=\"Start\"\n          labelPlacement=\"start\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "value": "value.toString()",
          "control": "<Radio />",
          "label": "value.toString()"
        },
        "snippet": "<FormControlLabel\n                      key={value}\n                      value={value.toString()}\n                      control={<Radio />}\n                      label={value.toString()}\n                    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "value",
          "value": "value.toString()",
          "control": "<Radio />",
          "label": "value.toString()"
        },
        "snippet": "<FormControlLabel\n                key={value}\n                value={value.toString()}\n                control={<Radio />}\n                label={value.toString()}\n              />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControlLabel#FormControlLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "top",
          "control": "<Switch color=\"primary\" />",
          "label": "Top",
          "labelPlacement": "top"
        },
        "snippet": "<FormControlLabel\n          value=\"top\"\n          control={<Switch color=\"primary\" />}\n          label=\"Top\"\n          labelPlacement=\"top\"\n        />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Menu#Menu": [
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorEl": "anchorEl",
          "id": "account-menu",
          "open": "open",
          "onClose": "handleClose",
          "onClick": "handleClose",
          "PaperProps": "{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&::before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }",
          "transformOrigin": "{ horizontal: 'right', vertical: 'top' }",
          "anchorOrigin": "{ horizontal: 'right', vertical: 'bottom' }"
        },
        "snippet": "<Menu\n        anchorEl={anchorEl}\n        id=\"account-menu\"\n        open={open}\n        onClose={handleClose}\n        onClick={handleClose}\n        PaperProps={{\n          elevation: 0,\n          sx: {\n            overflow: 'visible',\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\n            mt: 1.5,\n            '& .MuiAvatar-root': {\n              width: 32,\n              height: 32,\n              ml: -0.5,\n              mr: 1,\n            },\n            '&::before': {\n              content: '\"\"',\n              display: 'block',\n              position: 'absolute',\n              top: 0,\n              right: 14,\n              width: 10,\n              height: 10,\n              bgcolor: 'background.paper',\n              transform: 'translateY(-50%) rotate(45deg)',\n              zIndex: 0,\n            },\n          },\n        }}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem onClick={handleClose}>\n          <Avatar /> Profile\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <Avatar /> My account\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={handleClose}>\n          <ListItemIcon>\n            <PersonAdd fontSize=\"small\" />\n          </ListItemIcon>\n          Add another account\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <ListItemIcon>\n            <Settings fontSize=\"small\" />\n          </ListItemIcon>\n          Settings\n        </MenuItem>\n        <MenuItem onClick={handleClose}>\n          <ListItemIcon>\n            <Logout fontSize=\"small\" />\n          </ListItemIcon>\n          Logout\n        </MenuItem>\n      </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "menu-appbar",
          "anchorEl": "anchorElNav",
          "anchorOrigin": "{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }",
          "keepMounted": true,
          "transformOrigin": "{\n                vertical: 'top',\n                horizontal: 'left',\n              }",
          "open": "Boolean(anchorElNav)",
          "onClose": "handleCloseNavMenu",
          "sx": "{\n                display: { xs: 'block', md: 'none' },\n              }"
        },
        "snippet": "<Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorElNav}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'left',\n              }}\n              open={Boolean(anchorElNav)}\n              onClose={handleCloseNavMenu}\n              sx={{\n                display: { xs: 'block', md: 'none' },\n              }}\n            >\n              {pages.map((page) => (\n                <MenuItem key={page} onClick={handleCloseNavMenu}>\n                  <Typography textAlign=\"center\">{page}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ mt: '45px' }",
          "id": "menu-appbar",
          "anchorEl": "anchorElUser",
          "anchorOrigin": "{\n                vertical: 'top',\n                horizontal: 'right',\n              }",
          "keepMounted": true,
          "transformOrigin": "{\n                vertical: 'top',\n                horizontal: 'right',\n              }",
          "open": "Boolean(anchorElUser)",
          "onClose": "handleCloseUserMenu"
        },
        "snippet": "<Menu\n              sx={{ mt: '45px' }}\n              id=\"menu-appbar\"\n              anchorEl={anchorElUser}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={Boolean(anchorElUser)}\n              onClose={handleCloseUserMenu}\n            >\n              {settings.map((setting) => (\n                <MenuItem key={setting} onClick={handleCloseUserMenu}>\n                  <Typography textAlign=\"center\">{setting}</Typography>\n                </MenuItem>\n              ))}\n            </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorEl": "mobileMoreAnchorEl",
          "anchorOrigin": "{\n        vertical: 'top',\n        horizontal: 'right',\n      }",
          "id": "mobileMenuId",
          "keepMounted": true,
          "transformOrigin": "{\n        vertical: 'top',\n        horizontal: 'right',\n      }",
          "open": "isMobileMenuOpen",
          "onClose": "handleMobileMenuClose"
        },
        "snippet": "<Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem>\n        <IconButton size=\"large\" aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"error\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton\n          size=\"large\"\n          aria-label=\"show 17 new notifications\"\n          color=\"inherit\"\n        >\n          <Badge badgeContent={17} color=\"error\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          size=\"large\"\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Menu#Menu",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-positioned-menu",
          "aria-labelledby": "demo-positioned-button",
          "anchorEl": "anchorEl",
          "open": "open",
          "onClose": "handleClose",
          "anchorOrigin": "{\n          vertical: 'top',\n          horizontal: 'left',\n        }",
          "transformOrigin": "{\n          vertical: 'top',\n          horizontal: 'left',\n        }"
        },
        "snippet": "<Menu\n        id=\"demo-positioned-menu\"\n        aria-labelledby=\"demo-positioned-button\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n      >\n        <MenuItem onClick={handleClose}>Profile</MenuItem>\n        <MenuItem onClick={handleClose}>My account</MenuItem>\n        <MenuItem onClick={handleClose}>Logout</MenuItem>\n      </Menu>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MenuItem#MenuItem": [
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "disabled": "index === 2",
          "selected": "index === selectedIndex",
          "onClick": "(event) => handleMenuItemClick(event, index)"
        },
        "snippet": "<MenuItem\n                      key={option}\n                      disabled={index === 2}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "disabled": "index === 0",
          "selected": "index === selectedIndex",
          "onClick": "(event) => handleMenuItemClick(event, index)"
        },
        "snippet": "<MenuItem\n            key={option}\n            disabled={index === 0}\n            selected={index === selectedIndex}\n            onClick={(event) => handleMenuItemClick(event, index)}\n          >\n            {option}\n          </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "option",
          "selected": "option === 'Pyxis'",
          "onClick": "handleClose"
        },
        "snippet": "<MenuItem key={option} selected={option === 'Pyxis'} onClick={handleClose}>\n            {option}\n          </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "name",
          "value": "name",
          "style": "getStyles(name, personName, theme)"
        },
        "snippet": "<MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuItem#MenuItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "name",
          "value": "name",
          "style": "getStyles(name, personName, theme)"
        },
        "snippet": "<MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Badge#Badge": [
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "overlap": "circular",
          "badgeContent": " ",
          "variant": "dot"
        },
        "snippet": "<Badge color=\"secondary\" overlap=\"circular\" badgeContent=\" \" variant=\"dot\">\n        {circle}\n      </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "overlap": "circular",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'right' }",
          "badgeContent": "\n          <SmallAvatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n        "
        },
        "snippet": "<Badge\n        overlap=\"circular\"\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        badgeContent={\n          <SmallAvatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n        }\n      >\n        <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" />\n      </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "variant": "dot",
          "invisible": "invisible"
        },
        "snippet": "<Badge color=\"secondary\" variant=\"dot\" invisible={invisible}>\n          <MailIcon />\n        </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "overlap": "circular",
          "badgeContent": " "
        },
        "snippet": "<Badge color=\"secondary\" overlap=\"circular\" badgeContent=\" \">\n        {circle}\n      </Badge>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Badge#Badge",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary",
          "badgeContent": 1000,
          "max": 999
        },
        "snippet": "<Badge color=\"secondary\" badgeContent={1000} max={999}>\n        <MailIcon />\n      </Badge>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tooltip#Tooltip": [
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "PopperProps": "{\n                  disablePortal: true,\n                }",
          "onClose": "handleTooltipClose",
          "open": "open",
          "disableFocusListener": true,
          "disableHoverListener": true,
          "disableTouchListener": true,
          "title": "Add"
        },
        "snippet": "<Tooltip\n                PopperProps={{\n                  disablePortal: true,\n                }}\n                onClose={handleTooltipClose}\n                open={open}\n                disableFocusListener\n                disableHoverListener\n                disableTouchListener\n                title=\"Add\"\n              >\n                <Button onClick={handleTooltipOpen}>Click</Button>\n              </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "title": "Add"
        },
        "snippet": "<Tooltip open={open} onClose={handleClose} onOpen={handleOpen} title=\"Add\">\n      <Button>Controlled</Button>\n    </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "TransitionComponent": "Fade",
          "TransitionProps": "{ timeout: 600 }",
          "title": "Add"
        },
        "snippet": "<Tooltip\n        TransitionComponent={Fade}\n        TransitionProps={{ timeout: 600 }}\n        title=\"Add\"\n      >\n        <Button>Fade</Button>\n      </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "Add",
          "enterDelay": 500,
          "leaveDelay": 200
        },
        "snippet": "<Tooltip title=\"Add\" enterDelay={500} leaveDelay={200}>\n      <Button>[500ms, 200ms]</Button>\n    </Tooltip>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tooltip#Tooltip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableFocusListener": true,
          "disableTouchListener": true,
          "title": "Add"
        },
        "snippet": "<Tooltip disableFocusListener disableTouchListener title=\"Add\">\n            <Button>Hover</Button>\n          </Tooltip>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CircularProgress#CircularProgress": [
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "indeterminate",
          "disableShrink": true,
          "sx": "{\n          color: (theme) => (theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8'),\n          animationDuration: '550ms',\n          position: 'absolute',\n          left: 0,\n          [`& .${circularProgressClasses.circle}`]: {\n            strokeLinecap: 'round',\n          },\n        }",
          "size": 40,
          "thickness": 4
        },
        "snippet": "<CircularProgress\n        variant=\"indeterminate\"\n        disableShrink\n        sx={{\n          color: (theme) => (theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8'),\n          animationDuration: '550ms',\n          position: 'absolute',\n          left: 0,\n          [`& .${circularProgressClasses.circle}`]: {\n            strokeLinecap: 'round',\n          },\n        }}\n        size={40}\n        thickness={4}\n        {...props}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "sx": "{\n          color: (theme) =>\n            theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],\n        }",
          "size": 40,
          "thickness": 4,
          "value": 100
        },
        "snippet": "<CircularProgress\n        variant=\"determinate\"\n        sx={{\n          color: (theme) =>\n            theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],\n        }}\n        size={40}\n        thickness={4}\n        {...props}\n        value={100}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": 24,
          "sx": "{\n              color: green[500],\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              marginTop: '-12px',\n              marginLeft: '-12px',\n            }"
        },
        "snippet": "<CircularProgress\n            size={24}\n            sx={{\n              color: green[500],\n              position: 'absolute',\n              top: '50%',\n              left: '50%',\n              marginTop: '-12px',\n              marginLeft: '-12px',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "size": 68,
          "sx": "{\n              color: green[500],\n              position: 'absolute',\n              top: -6,\n              left: -6,\n              zIndex: 1,\n            }"
        },
        "snippet": "<CircularProgress\n            size={68}\n            sx={{\n              color: green[500],\n              position: 'absolute',\n              top: -6,\n              left: -6,\n              zIndex: 1,\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CircularProgress#CircularProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "value": "progress"
        },
        "snippet": "<CircularProgress variant=\"determinate\" value={progress} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TextField#TextField": [
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "autoFocus": true,
          "required": true,
          "margin": "dense",
          "id": "name",
          "name": "email",
          "label": "Email Address",
          "type": "email",
          "fullWidth": true,
          "variant": "standard"
        },
        "snippet": "<TextField\n            autoFocus\n            required\n            margin=\"dense\"\n            id=\"name\"\n            name=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            variant=\"standard\"\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "autoFocus": true,
          "margin": "dense",
          "id": "name",
          "value": "dialogValue.title",
          "onChange": "(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  title: event.target.value,\n                })\n              ",
          "label": "title",
          "type": "text",
          "variant": "standard"
        },
        "snippet": "<TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              value={dialogValue.title}\n              onChange={(event) =>\n                setDialogValue({\n                  ...dialogValue,\n                  title: event.target.value,\n                })\n              }\n              label=\"title\"\n              type=\"text\"\n              variant=\"standard\"\n            />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-select-currency-native",
          "select": true,
          "label": "Native select",
          "defaultValue": "EUR",
          "SelectProps": "{\n            native: true,\n          }",
          "helperText": "Please select your currency",
          "variant": "standard"
        },
        "snippet": "<TextField\n          id=\"standard-select-currency-native\"\n          select\n          label=\"Native select\"\n          defaultValue=\"EUR\"\n          SelectProps={{\n            native: true,\n          }}\n          helperText=\"Please select your currency\"\n          variant=\"standard\"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-select-currency-native",
          "select": true,
          "label": "Native select",
          "defaultValue": "EUR",
          "SelectProps": "{\n            native: true,\n          }",
          "helperText": "Please select your currency",
          "variant": "filled"
        },
        "snippet": "<TextField\n          id=\"filled-select-currency-native\"\n          select\n          label=\"Native select\"\n          defaultValue=\"EUR\"\n          SelectProps={{\n            native: true,\n          }}\n          helperText=\"Please select your currency\"\n          variant=\"filled\"\n        >\n          {currencies.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </TextField>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextField#TextField",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "react-number-format",
          "value": "values.numberformat",
          "onChange": "handleChange",
          "name": "numberformat",
          "id": "formatted-numberformat-input",
          "InputProps": "{\n          inputComponent: NumericFormatCustom as any,\n        }",
          "variant": "standard"
        },
        "snippet": "<TextField\n        label=\"react-number-format\"\n        value={values.numberformat}\n        onChange={handleChange}\n        name=\"numberformat\"\n        id=\"formatted-numberformat-input\"\n        InputProps={{\n          inputComponent: NumericFormatCustom as any,\n        }}\n        variant=\"standard\"\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Autocomplete#Autocomplete": [
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "google-map-demo",
          "sx": "{ width: 300 }",
          "getOptionLabel": "(option) =>\n        typeof option === 'string' ? option : option.description\n      ",
          "filterOptions": "(x) => x",
          "options": "options",
          "autoComplete": true,
          "includeInputInList": true,
          "filterSelectedOptions": true,
          "value": "value",
          "noOptionsText": "No locations",
          "onChange": "(event: any, newValue: PlaceType | null) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }",
          "onInputChange": "(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }",
          "renderInput": "(params) => (\n        <TextField {...params} label=\"Add a location\" fullWidth />\n      )",
          "renderOption": "(props, option) => {\n        const { key, ...optionProps } = props;\n        const matches =\n          option.structured_formatting.main_text_matched_substrings || [];\n\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match: any) => [match.offset, match.offset + match.length]),\n        );\n        return (\n          <li key={key} {...optionProps}>\n            <Grid container sx={{ alignItems: 'center' }}>\n              <Grid item sx={{ display: 'flex', width: 44 }}>\n                <LocationOnIcon sx={{ color: 'text.secondary' }} />\n              </Grid>\n              <Grid item sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}>\n                {parts.map((part, index) => (\n                  <Box\n                    key={index}\n                    component=\"span\"\n                    sx={{ fontWeight: part.highlight ? 'bold' : 'regular' }}\n                  >\n                    {part.text}\n                  </Box>\n                ))}\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }"
        },
        "snippet": "<Autocomplete\n      id=\"google-map-demo\"\n      sx={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === 'string' ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      filterSelectedOptions\n      value={value}\n      noOptionsText=\"No locations\"\n      onChange={(event: any, newValue: PlaceType | null) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField {...params} label=\"Add a location\" fullWidth />\n      )}\n      renderOption={(props, option) => {\n        const { key, ...optionProps } = props;\n        const matches =\n          option.structured_formatting.main_text_matched_substrings || [];\n\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match: any) => [match.offset, match.offset + match.length]),\n        );\n        return (\n          <li key={key} {...optionProps}>\n            <Grid container sx={{ alignItems: 'center' }}>\n              <Grid item sx={{ display: 'flex', width: 44 }}>\n                <LocationOnIcon sx={{ color: 'text.secondary' }} />\n              </Grid>\n              <Grid item sx={{ width: 'calc(100% - 44px)', wordWrap: 'break-word' }}>\n                {parts.map((part, index) => (\n                  <Box\n                    key={index}\n                    component=\"span\"\n                    sx={{ fontWeight: part.highlight ? 'bold' : 'regular' }}\n                  >\n                    {part.text}\n                  </Box>\n                ))}\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {option.structured_formatting.secondary_text}\n                </Typography>\n              </Grid>\n            </Grid>\n          </li>\n        );\n      }}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": true,
          "multiple": true,
          "onClose": "(\n                event: React.ChangeEvent<{}>,\n                reason: AutocompleteCloseReason,\n              ) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }",
          "value": "pendingValue",
          "onChange": "(event, newValue, reason) => {\n                if (\n                  event.type === 'keydown' &&\n                  ((event as React.KeyboardEvent).key === 'Backspace' ||\n                    (event as React.KeyboardEvent).key === 'Delete') &&\n                  reason === 'removeOption'\n                ) {\n                  return;\n                }\n                setPendingValue(newValue);\n              }",
          "disableCloseOnSelect": true,
          "PopperComponent": "PopperComponent",
          "renderTags": "() => null",
          "noOptionsText": "No labels",
          "renderOption": "(props, option, { selected }) => {\n                const { key, ...optionProps } = props;\n                return (\n                  <li key={key} {...optionProps}>\n                    <Box\n                      component={DoneIcon}\n                      sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                    <Box\n                      component=\"span\"\n                      sx={{\n                        width: 14,\n                        height: 14,\n                        flexShrink: 0,\n                        borderRadius: '3px',\n                        mr: 1,\n                        mt: '2px',\n                      }}\n                      style={{ backgroundColor: option.color }}\n                    />\n                    <Box\n                      sx={(t) => ({\n                        flexGrow: 1,\n                        '& span': {\n                          color: '#8b949e',\n                          ...t.applyStyles('light', {\n                            color: '#586069',\n                          }),\n                        },\n                      })}\n                    >\n                      {option.name}\n                      <br />\n                      <span>{option.description}</span>\n                    </Box>\n                    <Box\n                      component={CloseIcon}\n                      sx={{ opacity: 0.6, width: 18, height: 18 }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                  </li>\n                );\n              }",
          "options": "[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })",
          "getOptionLabel": "(option) => option.name",
          "renderInput": "(params) => (\n                <StyledInput\n                  ref={params.InputProps.ref}\n                  inputProps={params.inputProps}\n                  autoFocus\n                  placeholder=\"Filter labels\"\n                />\n              )"
        },
        "snippet": "<Autocomplete\n              open\n              multiple\n              onClose={(\n                event: React.ChangeEvent<{}>,\n                reason: AutocompleteCloseReason,\n              ) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }}\n              value={pendingValue}\n              onChange={(event, newValue, reason) => {\n                if (\n                  event.type === 'keydown' &&\n                  ((event as React.KeyboardEvent).key === 'Backspace' ||\n                    (event as React.KeyboardEvent).key === 'Delete') &&\n                  reason === 'removeOption'\n                ) {\n                  return;\n                }\n                setPendingValue(newValue);\n              }}\n              disableCloseOnSelect\n              PopperComponent={PopperComponent}\n              renderTags={() => null}\n              noOptionsText=\"No labels\"\n              renderOption={(props, option, { selected }) => {\n                const { key, ...optionProps } = props;\n                return (\n                  <li key={key} {...optionProps}>\n                    <Box\n                      component={DoneIcon}\n                      sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                    <Box\n                      component=\"span\"\n                      sx={{\n                        width: 14,\n                        height: 14,\n                        flexShrink: 0,\n                        borderRadius: '3px',\n                        mr: 1,\n                        mt: '2px',\n                      }}\n                      style={{ backgroundColor: option.color }}\n                    />\n                    <Box\n                      sx={(t) => ({\n                        flexGrow: 1,\n                        '& span': {\n                          color: '#8b949e',\n                          ...t.applyStyles('light', {\n                            color: '#586069',\n                          }),\n                        },\n                      })}\n                    >\n                      {option.name}\n                      <br />\n                      <span>{option.description}</span>\n                    </Box>\n                    <Box\n                      component={CloseIcon}\n                      sx={{ opacity: 0.6, width: 18, height: 18 }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                  </li>\n                );\n              }}\n              options={[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })}\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <StyledInput\n                  ref={params.InputProps.ref}\n                  inputProps={params.inputProps}\n                  autoFocus\n                  placeholder=\"Filter labels\"\n                />\n              )}\n            />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }",
          "filterOptions": "(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some((option) => inputValue === option.title);\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }",
          "selectOnFocus": true,
          "clearOnBlur": true,
          "handleHomeEndKeys": true,
          "id": "free-solo-with-text-demo",
          "options": "top100Films",
          "getOptionLabel": "(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }",
          "renderOption": "(props, option) => {\n        const { key, ...optionProps } = props;\n        return (\n          <li key={key} {...optionProps}>\n            {option.title}\n          </li>\n        );\n      }",
          "sx": "{ width: 300 }",
          "freeSolo": true,
          "renderInput": "(params) => (\n        <TextField {...params} label=\"Free solo with text demo\" />\n      )"
        },
        "snippet": "<Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        const { inputValue } = params;\n        // Suggest the creation of a new value\n        const isExisting = options.some((option) => inputValue === option.title);\n        if (inputValue !== '' && !isExisting) {\n          filtered.push({\n            inputValue,\n            title: `Add \"${inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      id=\"free-solo-with-text-demo\"\n      options={top100Films}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(props, option) => {\n        const { key, ...optionProps } = props;\n        return (\n          <li key={key} {...optionProps}>\n            {option.title}\n          </li>\n        );\n      }}\n      sx={{ width: 300 }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label=\"Free solo with text demo\" />\n      )}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "(event, newValue) => {\n          if (typeof newValue === 'string') {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                title: newValue,\n                year: '',\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue.inputValue,\n              year: '',\n            });\n          } else {\n            setValue(newValue);\n          }\n        }",
          "filterOptions": "(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }",
          "id": "free-solo-dialog-demo",
          "options": "top100Films",
          "getOptionLabel": "(option) => {\n          // for example value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.title;\n        }",
          "selectOnFocus": true,
          "clearOnBlur": true,
          "handleHomeEndKeys": true,
          "renderOption": "(props, option) => {\n          const { key, ...optionProps } = props;\n          return (\n            <li key={key} {...optionProps}>\n              {option.title}\n            </li>\n          );\n        }",
          "sx": "{ width: 300 }",
          "freeSolo": true,
          "renderInput": "(params) => <TextField {...params} label=\"Free solo dialog\" />"
        },
        "snippet": "<Autocomplete\n        value={value}\n        onChange={(event, newValue) => {\n          if (typeof newValue === 'string') {\n            // timeout to avoid instant validation of the dialog's form.\n            setTimeout(() => {\n              toggleOpen(true);\n              setDialogValue({\n                title: newValue,\n                year: '',\n              });\n            });\n          } else if (newValue && newValue.inputValue) {\n            toggleOpen(true);\n            setDialogValue({\n              title: newValue.inputValue,\n              year: '',\n            });\n          } else {\n            setValue(newValue);\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        id=\"free-solo-dialog-demo\"\n        options={top100Films}\n        getOptionLabel={(option) => {\n          // for example value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          }\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          return option.title;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        renderOption={(props, option) => {\n          const { key, ...optionProps } = props;\n          return (\n            <li key={key} {...optionProps}>\n              {option.title}\n            </li>\n          );\n        }}\n        sx={{ width: 300 }}\n        freeSolo\n        renderInput={(params) => <TextField {...params} label=\"Free solo dialog\" />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Autocomplete#Autocomplete",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "asynchronous-demo",
          "sx": "{ width: 300 }",
          "open": "open",
          "onOpen": "() => {\n        setOpen(true);\n      }",
          "onClose": "() => {\n        setOpen(false);\n      }",
          "isOptionEqualToValue": "(option, value) => option.title === value.title",
          "getOptionLabel": "(option) => option.title",
          "options": "options",
          "loading": "loading",
          "renderInput": "(params) => (\n        <TextField\n          {...params}\n          label=\"Asynchronous\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )"
        },
        "snippet": "<Autocomplete\n      id=\"asynchronous-demo\"\n      sx={{ width: 300 }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      isOptionEqualToValue={(option, value) => option.title === value.title}\n      getOptionLabel={(option) => option.title}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Asynchronous\"\n          InputProps={{\n            ...params.InputProps,\n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Checkbox#Checkbox": [
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n        '&:hover': { bgcolor: 'transparent' },\n      }",
          "disableRipple": true,
          "color": "default",
          "checkedIcon": "<BpCheckedIcon />",
          "icon": "<BpIcon />",
          "inputProps": "{ 'aria-label': 'Checkbox demo' }"
        },
        "snippet": "<Checkbox\n      sx={{\n        '&:hover': { bgcolor: 'transparent' },\n      }}\n      disableRipple\n      color=\"default\"\n      checkedIcon={<BpCheckedIcon />}\n      icon={<BpIcon />}\n      inputProps={{ 'aria-label': 'Checkbox demo' }}\n      {...props}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClick": "handleToggleAll(items)",
          "checked": "numberOfChecked(items) === items.length && items.length !== 0",
          "indeterminate": "\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\n            ",
          "disabled": "items.length === 0",
          "inputProps": "{\n              'aria-label': 'all items selected',\n            }"
        },
        "snippet": "<Checkbox\n            onClick={handleToggleAll(items)}\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\n            indeterminate={\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\n            }\n            disabled={items.length === 0}\n            inputProps={{\n              'aria-label': 'all items selected',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary",
          "indeterminate": "numSelected > 0 && numSelected < rowCount",
          "checked": "rowCount > 0 && numSelected === rowCount",
          "onChange": "onSelectAllClick",
          "inputProps": "{\n              'aria-label': 'select all desserts',\n            }"
        },
        "snippet": "<Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "start",
          "checked": "checked.indexOf(value) !== -1",
          "tabIndex": "-1",
          "disableRipple": true,
          "inputProps": "{ 'aria-labelledby': labelId }"
        },
        "snippet": "<Checkbox\n                  edge=\"start\"\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Checkbox#Checkbox",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "edge": "end",
          "onChange": "handleToggle(value)",
          "checked": "checked.indexOf(value) !== -1",
          "inputProps": "{ 'aria-labelledby': labelId }"
        },
        "snippet": "<Checkbox\n                edge=\"end\"\n                onChange={handleToggle(value)}\n                checked={checked.indexOf(value) !== -1}\n                inputProps={{ 'aria-labelledby': labelId }}\n              />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Chip#Chip": [
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Custom delete icon",
          "onClick": "handleClick",
          "onDelete": "handleDelete",
          "deleteIcon": "<DeleteIcon />",
          "variant": "outlined"
        },
        "snippet": "<Chip\n        label=\"Custom delete icon\"\n        onClick={handleClick}\n        onDelete={handleDelete}\n        deleteIcon={<DeleteIcon />}\n        variant=\"outlined\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Clickable Link",
          "component": "a",
          "href": "#basic-chip",
          "variant": "outlined",
          "clickable": true
        },
        "snippet": "<Chip\n        label=\"Clickable Link\"\n        component=\"a\"\n        href=\"#basic-chip\"\n        variant=\"outlined\"\n        clickable\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Custom delete icon",
          "onClick": "handleClick",
          "onDelete": "handleDelete",
          "deleteIcon": "<DoneIcon />"
        },
        "snippet": "<Chip\n        label=\"Custom delete icon\"\n        onClick={handleClick}\n        onDelete={handleDelete}\n        deleteIcon={<DoneIcon />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Clickable Deletable",
          "variant": "outlined",
          "onClick": "handleClick",
          "onDelete": "handleDelete"
        },
        "snippet": "<Chip\n        label=\"Clickable Deletable\"\n        variant=\"outlined\"\n        onClick={handleClick}\n        onDelete={handleDelete}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Chip#Chip",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "key",
          "variant": "outlined",
          "label": "option.title",
          "size": "small"
        },
        "snippet": "<Chip\n                key={key}\n                variant=\"outlined\"\n                label={option.title}\n                size=\"small\"\n                {...tagProps}\n              />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Dialog#Dialog": [
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "scroll": "scroll",
          "aria-labelledby": "scroll-dialog-title",
          "aria-describedby": "scroll-dialog-description"
        },
        "snippet": "<Dialog\n        open={open}\n        onClose={handleClose}\n        scroll={scroll}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">Subscribe</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText\n            id=\"scroll-dialog-description\"\n            ref={descriptionElementRef}\n            tabIndex={-1}\n          >\n            {[...new Array(50)]\n              .map(\n                () => `Cras mattis consectetur purus sit amet fermentum.\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\n              )\n              .join('\\n')}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "TransitionComponent": "Transition",
          "keepMounted": true,
          "onClose": "handleClose",
          "aria-describedby": "alert-dialog-slide-description"
        },
        "snippet": "<Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle>{\"Use Google's location service?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Let Google help apps determine location. This means sending anonymous\n            location data to Google, even when no apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": "fullWidth",
          "maxWidth": "maxWidth",
          "open": "open",
          "onClose": "handleClose"
        },
        "snippet": "<Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogTitle>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Box\n            noValidate\n            component=\"form\"\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              m: 'auto',\n              width: 'fit-content',\n            }}\n          >\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel>\n              <Select\n                autoFocus\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                label=\"maxWidth\"\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width',\n                }}\n              >\n                <MenuItem value={false as any}>false</MenuItem>\n                <MenuItem value=\"xs\">xs</MenuItem>\n                <MenuItem value=\"sm\">sm</MenuItem>\n                <MenuItem value=\"md\">md</MenuItem>\n                <MenuItem value=\"lg\">lg</MenuItem>\n                <MenuItem value=\"xl\">xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              sx={{ mt: 1 }}\n              control={\n                <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n              }\n              label=\"Full width\"\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullScreen": true,
          "open": "open",
          "onClose": "handleClose",
          "TransitionComponent": "Transition"
        },
        "snippet": "<Dialog\n        fullScreen\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={Transition}\n      >\n        <AppBar sx={{ position: 'relative' }}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              onClick={handleClose}\n              aria-label=\"close\"\n            >\n              <CloseIcon />\n            </IconButton>\n            <Typography sx={{ ml: 2, flex: 1 }} variant=\"h6\" component=\"div\">\n              Sound\n            </Typography>\n            <Button autoFocus color=\"inherit\" onClick={handleClose}>\n              save\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <List>\n          <ListItemButton>\n            <ListItemText primary=\"Phone ringtone\" secondary=\"Titania\" />\n          </ListItemButton>\n          <Divider />\n          <ListItemButton>\n            <ListItemText\n              primary=\"Default notification ringtone\"\n              secondary=\"Tethys\"\n            />\n          </ListItemButton>\n        </List>\n      </Dialog>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Dialog#Dialog",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }",
          "maxWidth": "xs",
          "TransitionProps": "{ onEntering: handleEntering }",
          "open": "open"
        },
        "snippet": "<Dialog\n      sx={{ '& .MuiDialog-paper': { width: '80%', maxHeight: 435 } }}\n      maxWidth=\"xs\"\n      TransitionProps={{ onEntering: handleEntering }}\n      open={open}\n      {...other}\n    >\n      <DialogTitle>Phone Ringtone</DialogTitle>\n      <DialogContent dividers>\n        <RadioGroup\n          ref={radioGroupRef}\n          aria-label=\"ringtone\"\n          name=\"ringtone\"\n          value={value}\n          onChange={handleChange}\n        >\n          {options.map((option) => (\n            <FormControlLabel\n              value={option}\n              key={option}\n              control={<Radio />}\n              label={option}\n            />\n          ))}\n        </RadioGroup>\n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus onClick={handleCancel}>\n          Cancel\n        </Button>\n        <Button onClick={handleOk}>Ok</Button>\n      </DialogActions>\n    </Dialog>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogTitle#DialogTitle": [
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "{ cursor: 'move' }",
          "id": "draggable-dialog-title"
        },
        "snippet": "<DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n          Subscribe\n        </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 0, p: 2 }",
          "id": "customized-dialog-title"
        },
        "snippet": "<DialogTitle sx={{ m: 0, p: 2 }} id=\"customized-dialog-title\">\n          Modal title\n        </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "responsive-dialog-title"
        },
        "snippet": "<DialogTitle id=\"responsive-dialog-title\">\n          {\"Use Google's location service?\"}\n        </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-title"
        },
        "snippet": "<DialogTitle id=\"alert-dialog-title\">\n          {\"Use Google's location service?\"}\n        </DialogTitle>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogTitle#DialogTitle",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "scroll-dialog-title"
        },
        "snippet": "<DialogTitle id=\"scroll-dialog-title\">Subscribe</DialogTitle>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogContent#DialogContent": [
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": true
        },
        "snippet": "<DialogContent dividers>\n          <Typography gutterBottom>\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\n            consectetur ac, vestibulum at eros.\n          </Typography>\n          <Typography gutterBottom>\n            Praesent commodo cursus magna, vel scelerisque nisl consectetur et.\n            Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\n          </Typography>\n          <Typography gutterBottom>\n            Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus\n            magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec\n            ullamcorper nulla non metus auctor fringilla.\n          </Typography>\n        </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": "scroll === 'paper'"
        },
        "snippet": "<DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText\n            id=\"scroll-dialog-description\"\n            ref={descriptionElementRef}\n            tabIndex={-1}\n          >\n            {[...new Array(50)]\n              .map(\n                () => `Cras mattis consectetur purus sit amet fermentum.\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\n              )\n              .join('\\n')}\n          </DialogContentText>\n        </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dividers": true
        },
        "snippet": "<DialogContent dividers>\n        <RadioGroup\n          ref={radioGroupRef}\n          aria-label=\"ringtone\"\n          name=\"ringtone\"\n          value={value}\n          onChange={handleChange}\n        >\n          {options.map((option) => (\n            <FormControlLabel\n              value={option}\n              key={option}\n              control={<Radio />}\n              label={option}\n            />\n          ))}\n        </RadioGroup>\n      </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogContent>\n          <Box component=\"form\" sx={{ display: 'flex', flexWrap: 'wrap' }}>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n              <InputLabel htmlFor=\"demo-dialog-native\">Age</InputLabel>\n              <Select\n                native\n                value={age}\n                onChange={handleChange}\n                input={<OutlinedInput label=\"Age\" id=\"demo-dialog-native\" />}\n              >\n                <option aria-label=\"None\" value=\"\" />\n                <option value={10}>Ten</option>\n                <option value={20}>Twenty</option>\n                <option value={30}>Thirty</option>\n              </Select>\n            </FormControl>\n            <FormControl sx={{ m: 1, minWidth: 120 }}>\n              <InputLabel id=\"demo-dialog-select-label\">Age</InputLabel>\n              <Select\n                labelId=\"demo-dialog-select-label\"\n                id=\"demo-dialog-select\"\n                value={age}\n                onChange={handleChange}\n                input={<OutlinedInput label=\"Age\" />}\n              >\n                <MenuItem value=\"\">\n                  <em>None</em>\n                </MenuItem>\n                <MenuItem value={10}>Ten</MenuItem>\n                <MenuItem value={20}>Twenty</MenuItem>\n                <MenuItem value={30}>Thirty</MenuItem>\n              </Select>\n            </FormControl>\n          </Box>\n        </DialogContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContent#DialogContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogContent>\n          <DialogContentText>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Box\n            noValidate\n            component=\"form\"\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              m: 'auto',\n              width: 'fit-content',\n            }}\n          >\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor=\"max-width\">maxWidth</InputLabel>\n              <Select\n                autoFocus\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                label=\"maxWidth\"\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width',\n                }}\n              >\n                <MenuItem value={false as any}>false</MenuItem>\n                <MenuItem value=\"xs\">xs</MenuItem>\n                <MenuItem value=\"sm\">sm</MenuItem>\n                <MenuItem value=\"md\">md</MenuItem>\n                <MenuItem value=\"lg\">lg</MenuItem>\n                <MenuItem value=\"xl\">xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              sx={{ mt: 1 }}\n              control={\n                <Switch checked={fullWidth} onChange={handleFullWidthChange} />\n              }\n              label=\"Full width\"\n            />\n          </Box>\n        </DialogContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogContentText#DialogContentText": [
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "scroll-dialog-description",
          "ref": "descriptionElementRef",
          "tabIndex": "-1"
        },
        "snippet": "<DialogContentText\n            id=\"scroll-dialog-description\"\n            ref={descriptionElementRef}\n            tabIndex={-1}\n          >\n            {[...new Array(50)]\n              .map(\n                () => `Cras mattis consectetur purus sit amet fermentum.\nCras justo odio, dapibus ac facilisis in, egestas eget quam.\nMorbi leo risus, porta ac consectetur ac, vestibulum at eros.\nPraesent commodo cursus magna, vel scelerisque nisl consectetur et.`,\n              )\n              .join('\\n')}\n          </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-slide-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-slide-description\">\n            Let Google help apps determine location. This means sending anonymous\n            location data to Google, even when no apps are running.\n          </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "alert-dialog-description"
        },
        "snippet": "<DialogContentText id=\"alert-dialog-description\">\n            Let Google help apps determine location. This means sending anonymous\n            location data to Google, even when no apps are running.\n          </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogContentText>\n            Let Google help apps determine location. This means sending anonymous\n            location data to Google, even when no apps are running.\n          </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogContentText#DialogContentText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogContentText>\n            To subscribe to this website, please enter your email address here. We\n            will send updates occasionally.\n          </DialogContentText>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/DialogActions#DialogActions": [
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Disagree\n          </Button>\n          <Button onClick={handleClose} autoFocus>\n            Agree\n          </Button>\n        </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose} autoFocus>\n            Agree\n          </Button>\n        </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions>\n        <Button autoFocus onClick={handleCancel}>\n          Cancel\n        </Button>\n        <Button onClick={handleOk}>Ok</Button>\n      </DialogActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/DialogActions#DialogActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ClickAwayListener#ClickAwayListener": [
      {
        "componentId": "@mui/material/ClickAwayListener#ClickAwayListener",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "mouseEvent": "onMouseDown",
          "touchEvent": "onTouchStart",
          "onClickAway": "handleClickAway"
        },
        "snippet": "<ClickAwayListener\n      mouseEvent=\"onMouseDown\"\n      touchEvent=\"onTouchStart\"\n      onClickAway={handleClickAway}\n    >\n      <Box sx={{ position: 'relative' }}>\n        <button type=\"button\" onClick={handleClick}>\n          Open menu dropdown\n        </button>\n        {open ? (\n          <Box sx={styles}>\n            Click me, I will stay visible until you click outside.\n          </Box>\n        ) : null}\n      </Box>\n    </ClickAwayListener>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ClickAwayListener#ClickAwayListener",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClickAway": "handleClose"
        },
        "snippet": "<ClickAwayListener onClickAway={handleClose}>\n          <div>\n            <Box\n              sx={{\n                borderBottom: `1px solid ${\n                  theme.palette.mode === 'light' ? '#eaecef' : '#30363d'\n                }`,\n                padding: '8px 10px',\n                fontWeight: 600,\n              }}\n            >\n              Apply labels to this pull request\n            </Box>\n            <Autocomplete\n              open\n              multiple\n              onClose={(\n                event: React.ChangeEvent<{}>,\n                reason: AutocompleteCloseReason,\n              ) => {\n                if (reason === 'escape') {\n                  handleClose();\n                }\n              }}\n              value={pendingValue}\n              onChange={(event, newValue, reason) => {\n                if (\n                  event.type === 'keydown' &&\n                  ((event as React.KeyboardEvent).key === 'Backspace' ||\n                    (event as React.KeyboardEvent).key === 'Delete') &&\n                  reason === 'removeOption'\n                ) {\n                  return;\n                }\n                setPendingValue(newValue);\n              }}\n              disableCloseOnSelect\n              PopperComponent={PopperComponent}\n              renderTags={() => null}\n              noOptionsText=\"No labels\"\n              renderOption={(props, option, { selected }) => {\n                const { key, ...optionProps } = props;\n                return (\n                  <li key={key} {...optionProps}>\n                    <Box\n                      component={DoneIcon}\n                      sx={{ width: 17, height: 17, mr: '5px', ml: '-2px' }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                    <Box\n                      component=\"span\"\n                      sx={{\n                        width: 14,\n                        height: 14,\n                        flexShrink: 0,\n                        borderRadius: '3px',\n                        mr: 1,\n                        mt: '2px',\n                      }}\n                      style={{ backgroundColor: option.color }}\n                    />\n                    <Box\n                      sx={(t) => ({\n                        flexGrow: 1,\n                        '& span': {\n                          color: '#8b949e',\n                          ...t.applyStyles('light', {\n                            color: '#586069',\n                          }),\n                        },\n                      })}\n                    >\n                      {option.name}\n                      <br />\n                      <span>{option.description}</span>\n                    </Box>\n                    <Box\n                      component={CloseIcon}\n                      sx={{ opacity: 0.6, width: 18, height: 18 }}\n                      style={{\n                        visibility: selected ? 'visible' : 'hidden',\n                      }}\n                    />\n                  </li>\n                );\n              }}\n              options={[...labels].sort((a, b) => {\n                // Display the selected labels first.\n                let ai = value.indexOf(a);\n                ai = ai === -1 ? value.length + labels.indexOf(a) : ai;\n                let bi = value.indexOf(b);\n                bi = bi === -1 ? value.length + labels.indexOf(b) : bi;\n                return ai - bi;\n              })}\n              getOptionLabel={(option) => option.name}\n              renderInput={(params) => (\n                <StyledInput\n                  ref={params.InputProps.ref}\n                  inputProps={params.inputProps}\n                  autoFocus\n                  placeholder=\"Filter labels\"\n                />\n              )}\n            />\n          </div>\n        </ClickAwayListener>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ClickAwayListener#ClickAwayListener",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClickAway": "handleClose"
        },
        "snippet": "<ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      disabled={index === 2}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ClickAwayListener#ClickAwayListener",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClickAway": "handleTooltipClose"
        },
        "snippet": "<ClickAwayListener onClickAway={handleTooltipClose}>\n            <div>\n              <Tooltip\n                PopperProps={{\n                  disablePortal: true,\n                }}\n                onClose={handleTooltipClose}\n                open={open}\n                disableFocusListener\n                disableHoverListener\n                disableTouchListener\n                title=\"Add\"\n              >\n                <Button onClick={handleTooltipOpen}>Click</Button>\n              </Tooltip>\n            </div>\n          </ClickAwayListener>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ClickAwayListener#ClickAwayListener",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "onClickAway": "handleClickAway"
        },
        "snippet": "<ClickAwayListener onClickAway={handleClickAway}>\n      <Box sx={{ position: 'relative' }}>\n        <button type=\"button\" onClick={handleClick}>\n          Open menu dropdown\n        </button>\n        {open ? (\n          <Box sx={styles}>\n            Click me, I will stay visible until you click outside.\n          </Box>\n        ) : null}\n      </Box>\n    </ClickAwayListener>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Grid#Grid": [
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 300, pb: 2 }",
          "container": true,
          "spacing": 2,
          "alignItems": "alignItems",
          "direction": "direction",
          "justifyContent": "justifyContent"
        },
        "snippet": "<Grid\n          sx={{ height: 300, pb: 2 }}\n          container\n          spacing={2}\n          alignItems={alignItems}\n          direction={direction}\n          justifyContent={justifyContent}\n        >\n          {[0, 1, 2].map((value) => (\n            <Grid key={value} item>\n              <Paper\n                sx={{\n                  p: 2,\n                  backgroundColor: (theme) =>\n                    theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n                  height: '100%',\n                  color: 'text.secondary',\n                  pt: `${(value + 1) * 10}px`,\n                  pb: `${(value + 1) * 10}px`,\n                }}\n              >\n                {`Cell ${value + 1}`}\n              </Paper>\n            </Grid>\n          ))}\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "xs": true,
          "container": true,
          "direction": "column",
          "spacing": 2
        },
        "snippet": "<Grid item xs container direction=\"column\" spacing={2}>\n            <Grid item xs>\n              <Typography gutterBottom variant=\"subtitle1\" component=\"div\">\n                Standard license\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                Full resolution 1920x1080 • JPEG\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                ID: 1030114\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography sx={{ cursor: 'pointer' }} variant=\"body2\">\n                Remove\n              </Typography>\n            </Grid>\n          </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "container": true,
          "xs": 6,
          "alignItems": "flex-end",
          "direction": "column"
        },
        "snippet": "<Grid item container xs={6} alignItems=\"flex-end\" direction=\"column\">\n          <Grid item>\n            <Tooltip title=\"Add\" placement=\"right-start\">\n              <Button>right-start</Button>\n            </Tooltip>\n          </Grid>\n          <Grid item>\n            <Tooltip title=\"Add\" placement=\"right\">\n              <Button>right</Button>\n            </Tooltip>\n          </Grid>\n          <Grid item>\n            <Tooltip title=\"Add\" placement=\"right-end\">\n              <Button>right-end</Button>\n            </Tooltip>\n          </Grid>\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "container": true,
          "xs": 6,
          "alignItems": "flex-end",
          "direction": "column"
        },
        "snippet": "<Grid item container xs={6} alignItems=\"flex-end\" direction=\"column\">\n          <Grid item>\n            <Button onClick={handleClick('right-start')}>right-start</Button>\n          </Grid>\n          <Grid item>\n            <Button onClick={handleClick('right')}>right</Button>\n          </Grid>\n          <Grid item>\n            <Button onClick={handleClick('right-end')}>right-end</Button>\n          </Grid>\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grid#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "item": true,
          "xs": 2,
          "sm": 4,
          "md": 4,
          "key": "index"
        },
        "snippet": "<Grid item xs={2} sm={4} md={4} key={index}>\n            <Item>xs=2</Item>\n          </Grid>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Unstable_Grid2#Grid": [
      {
        "componentId": "@mui/material/Unstable_Grid2#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xs": 12,
          "container": true,
          "justifyContent": "space-between",
          "alignItems": "center",
          "flexDirection": "{ xs: 'column', sm: 'row' }",
          "sx": "{ fontSize: '12px' }"
        },
        "snippet": "<Grid\n          xs={12}\n          container\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          flexDirection={{ xs: 'column', sm: 'row' }}\n          sx={{ fontSize: '12px' }}\n        >\n          <Grid sx={{ order: { xs: 2, sm: 1 } }}>\n            <Item>© Copyright</Item>\n          </Grid>\n          <Grid container columnSpacing={1} sx={{ order: { xs: 1, sm: 2 } }}>\n            <Grid>\n              <Item>Link A</Item>\n            </Grid>\n            <Grid>\n              <Item>Link B</Item>\n            </Grid>\n            <Grid>\n              <Item>Link C</Item>\n            </Grid>\n          </Grid>\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Unstable_Grid2#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": true,
          "xs": 12,
          "md": 7,
          "lg": 8,
          "spacing": 4
        },
        "snippet": "<Grid container xs={12} md={7} lg={8} spacing={4}>\n          <Grid xs={6} lg={3}>\n            <Item>\n              <Box\n                id=\"category-a\"\n                sx={{ fontSize: '12px', textTransform: 'uppercase' }}\n              >\n                Category A\n              </Box>\n              <Box component=\"ul\" aria-labelledby=\"category-a\" sx={{ pl: 2 }}>\n                <li>Link 1.1</li>\n                <li>Link 1.2</li>\n                <li>Link 1.3</li>\n              </Box>\n            </Item>\n          </Grid>\n          <Grid xs={6} lg={3}>\n            <Item>\n              <Box\n                id=\"category-b\"\n                sx={{ fontSize: '12px', textTransform: 'uppercase' }}\n              >\n                Category B\n              </Box>\n              <Box component=\"ul\" aria-labelledby=\"category-b\" sx={{ pl: 2 }}>\n                <li>Link 2.1</li>\n                <li>Link 2.2</li>\n                <li>Link 2.3</li>\n              </Box>\n            </Item>\n          </Grid>\n          <Grid xs={6} lg={3}>\n            <Item>\n              <Box\n                id=\"category-c\"\n                sx={{ fontSize: '12px', textTransform: 'uppercase' }}\n              >\n                Category C\n              </Box>\n              <Box component=\"ul\" aria-labelledby=\"category-c\" sx={{ pl: 2 }}>\n                <li>Link 3.1</li>\n                <li>Link 3.2</li>\n                <li>Link 3.3</li>\n              </Box>\n            </Item>\n          </Grid>\n          <Grid xs={6} lg={3}>\n            <Item>\n              <Box\n                id=\"category-d\"\n                sx={{ fontSize: '12px', textTransform: 'uppercase' }}\n              >\n                Category D\n              </Box>\n              <Box component=\"ul\" aria-labelledby=\"category-d\" sx={{ pl: 2 }}>\n                <li>Link 4.1</li>\n                <li>Link 4.2</li>\n                <li>Link 4.3</li>\n              </Box>\n            </Item>\n          </Grid>\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Unstable_Grid2#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xs": true,
          "display": "flex",
          "justifyContent": "center",
          "alignItems": "center"
        },
        "snippet": "<Grid xs display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Avatar src=\"/static/images/avatar/1.jpg\" />\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Unstable_Grid2#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xs": true,
          "display": "flex",
          "justifyContent": "center",
          "alignItems": "center"
        },
        "snippet": "<Grid xs display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <Avatar src=\"/static/images/avatar/3.jpg\" />\n        </Grid>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Unstable_Grid2#Grid",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "xs": 6,
          "xsOffset": 3,
          "md": 2,
          "mdOffset": 0
        },
        "snippet": "<Grid xs={6} xsOffset={3} md={2} mdOffset={0}>\n        <Item>1</Item>\n      </Grid>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/AvatarGroup#AvatarGroup": [
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "renderSurplus": "(surplus) => <span>+{surplus.toString()[0]}k</span>",
          "total": 4251
        },
        "snippet": "<AvatarGroup\n      renderSurplus={(surplus) => <span>+{surplus.toString()[0]}k</span>}\n      total={4251}\n    >\n      <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n      <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" />\n      <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" />\n      <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" />\n    </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "max": 4
        },
        "snippet": "<AvatarGroup max={4}>\n      <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n      <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" />\n      <Avatar alt=\"Cindy Baker\" src=\"/static/images/avatar/3.jpg\" />\n      <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" />\n      <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" />\n    </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/AvatarGroup#AvatarGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "total": 24
        },
        "snippet": "<AvatarGroup total={24}>\n      <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n      <Avatar alt=\"Travis Howard\" src=\"/static/images/avatar/2.jpg\" />\n      <Avatar alt=\"Agnes Walker\" src=\"/static/images/avatar/4.jpg\" />\n      <Avatar alt=\"Trevor Henderson\" src=\"/static/images/avatar/5.jpg\" />\n    </AvatarGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Backdrop#Backdrop": [
      {
        "componentId": "@mui/material/Backdrop#Backdrop",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }",
          "open": "open",
          "onClick": "handleClose"
        },
        "snippet": "<Backdrop\n        sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n        open={open}\n        onClick={handleClose}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Backdrop#Backdrop",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open"
        },
        "snippet": "<Backdrop open={open} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ButtonGroup#ButtonGroup": [
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "contained",
          "ref": "anchorRef",
          "aria-label": "Button group with a nested menu"
        },
        "snippet": "<ButtonGroup\n        variant=\"contained\"\n        ref={anchorRef}\n        aria-label=\"Button group with a nested menu\"\n      >\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <ArrowDropDownIcon />\n        </Button>\n      </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableElevation": true,
          "variant": "contained",
          "aria-label": "Disabled button group"
        },
        "snippet": "<ButtonGroup\n      disableElevation\n      variant=\"contained\"\n      aria-label=\"Disabled button group\"\n    >\n      <Button>One</Button>\n      <Button>Two</Button>\n    </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "aria-label": "Vertical button group",
          "variant": "contained"
        },
        "snippet": "<ButtonGroup\n        orientation=\"vertical\"\n        aria-label=\"Vertical button group\"\n        variant=\"contained\"\n      >\n        {buttons}\n      </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "aria-label": "Vertical button group",
          "variant": "text"
        },
        "snippet": "<ButtonGroup\n        orientation=\"vertical\"\n        aria-label=\"Vertical button group\"\n        variant=\"text\"\n      >\n        {buttons}\n      </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ButtonGroup#ButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "aria-label": "Loading button group"
        },
        "snippet": "<ButtonGroup variant=\"outlined\" aria-label=\"Loading button group\">\n      <Button>Submit</Button>\n      <LoadingButton>Fetch data</LoadingButton>\n      <LoadingButton loading loadingPosition=\"start\" startIcon={<SaveIcon />}>\n        Save\n      </LoadingButton>\n    </ButtonGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/BottomNavigation#BottomNavigation": [
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500 }",
          "value": "value",
          "onChange": "handleChange"
        },
        "snippet": "<BottomNavigation sx={{ width: 500 }} value={value} onChange={handleChange}>\n      <BottomNavigationAction\n        label=\"Recents\"\n        value=\"recents\"\n        icon={<RestoreIcon />}\n      />\n      <BottomNavigationAction\n        label=\"Favorites\"\n        value=\"favorites\"\n        icon={<FavoriteIcon />}\n      />\n      <BottomNavigationAction\n        label=\"Nearby\"\n        value=\"nearby\"\n        icon={<LocationOnIcon />}\n      />\n      <BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />\n    </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "showLabels": true,
          "value": "value",
          "onChange": "(event, newValue) => {\n          setValue(newValue);\n        }"
        },
        "snippet": "<BottomNavigation\n        showLabels\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n      >\n        <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\n        <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\n        <BottomNavigationAction label=\"Nearby\" icon={<LocationOnIcon />} />\n      </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigation#BottomNavigation",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "showLabels": true,
          "value": "value",
          "onChange": "(event, newValue) => {\n            setValue(newValue);\n          }"
        },
        "snippet": "<BottomNavigation\n          showLabels\n          value={value}\n          onChange={(event, newValue) => {\n            setValue(newValue);\n          }}\n        >\n          <BottomNavigationAction label=\"Recents\" icon={<RestoreIcon />} />\n          <BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />\n          <BottomNavigationAction label=\"Archive\" icon={<ArchiveIcon />} />\n        </BottomNavigation>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/BottomNavigationAction#BottomNavigationAction": [
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Favorites",
          "value": "favorites",
          "icon": "<FavoriteIcon />"
        },
        "snippet": "<BottomNavigationAction\n        label=\"Favorites\"\n        value=\"favorites\"\n        icon={<FavoriteIcon />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Nearby",
          "value": "nearby",
          "icon": "<LocationOnIcon />"
        },
        "snippet": "<BottomNavigationAction\n        label=\"Nearby\"\n        value=\"nearby\"\n        icon={<LocationOnIcon />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Recents",
          "value": "recents",
          "icon": "<RestoreIcon />"
        },
        "snippet": "<BottomNavigationAction\n        label=\"Recents\"\n        value=\"recents\"\n        icon={<RestoreIcon />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Folder",
          "value": "folder",
          "icon": "<FolderIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Folder\" value=\"folder\" icon={<FolderIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/BottomNavigationAction#BottomNavigationAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "label": "Favorites",
          "icon": "<FavoriteIcon />"
        },
        "snippet": "<BottomNavigationAction label=\"Favorites\" icon={<FavoriteIcon />} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Breadcrumbs#Breadcrumbs": [
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxItems": 2,
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs maxItems={2} aria-label=\"breadcrumb\">\n        <Link underline=\"hover\" color=\"inherit\" href=\"#\">\n          Home\n        </Link>\n        <Link underline=\"hover\" color=\"inherit\" href=\"#\">\n          Catalog\n        </Link>\n        <Link underline=\"hover\" color=\"inherit\" href=\"#\">\n          Accessories\n        </Link>\n        <Link underline=\"hover\" color=\"inherit\" href=\"#\">\n          New Collection\n        </Link>\n        <Typography color=\"text.primary\">Belts</Typography>\n      </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "<NavigateNextIcon fontSize=\"small\" />",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs\n        separator={<NavigateNextIcon fontSize=\"small\" />}\n        aria-label=\"breadcrumb\"\n      >\n        {breadcrumbs}\n      </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "›",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs separator=\"›\" aria-label=\"breadcrumb\">\n        {breadcrumbs}\n      </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "separator": "-",
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs separator=\"-\" aria-label=\"breadcrumb\">\n        {breadcrumbs}\n      </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Breadcrumbs#Breadcrumbs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "breadcrumb"
        },
        "snippet": "<Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          underline=\"hover\"\n          sx={{ display: 'flex', alignItems: 'center' }}\n          color=\"inherit\"\n          href=\"/\"\n        >\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          MUI\n        </Link>\n        <Link\n          underline=\"hover\"\n          sx={{ display: 'flex', alignItems: 'center' }}\n          color=\"inherit\"\n          href=\"/material-ui/getting-started/installation/\"\n        >\n          <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          Core\n        </Link>\n        <Typography\n          sx={{ display: 'flex', alignItems: 'center' }}\n          color=\"text.primary\"\n        >\n          <GrainIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          Breadcrumb\n        </Typography>\n      </Breadcrumbs>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Link#Link": [
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "key": "2",
          "color": "inherit",
          "href": "/material-ui/getting-started/installation/",
          "onClick": "handleClick"
        },
        "snippet": "<Link\n      underline=\"hover\"\n      key=\"2\"\n      color=\"inherit\"\n      href=\"/material-ui/getting-started/installation/\"\n      onClick={handleClick}\n    >\n      Core\n    </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "key": "1",
          "color": "inherit",
          "href": "/",
          "onClick": "handleClick"
        },
        "snippet": "<Link underline=\"hover\" key=\"1\" color=\"inherit\" href=\"/\" onClick={handleClick}>\n      MUI\n    </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "sx": "{ display: 'flex', alignItems: 'center' }",
          "color": "inherit",
          "href": "/material-ui/getting-started/installation/"
        },
        "snippet": "<Link\n          underline=\"hover\"\n          sx={{ display: 'flex', alignItems: 'center' }}\n          color=\"inherit\"\n          href=\"/material-ui/getting-started/installation/\"\n        >\n          <WhatshotIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          Core\n        </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "sx": "{ display: 'flex', alignItems: 'center' }",
          "color": "inherit",
          "href": "/"
        },
        "snippet": "<Link\n          underline=\"hover\"\n          sx={{ display: 'flex', alignItems: 'center' }}\n          color=\"inherit\"\n          href=\"/\"\n        >\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\n          MUI\n        </Link>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Link#Link",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "underline": "hover",
          "color": "text.primary",
          "href": "/material-ui/react-breadcrumbs/",
          "aria-current": "page"
        },
        "snippet": "<Link\n          underline=\"hover\"\n          color=\"text.primary\"\n          href=\"/material-ui/react-breadcrumbs/\"\n          aria-current=\"page\"\n        >\n          Breadcrumbs\n        </Link>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Popper#Popper": [
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          zIndex: 1,\n        }",
          "open": "open",
          "anchorEl": "anchorRef.current",
          "role": "undefined",
          "transition": true,
          "disablePortal": true
        },
        "snippet": "<Popper\n        sx={{\n          zIndex: 1,\n        }}\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      disabled={index === 2}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ zIndex: 1200 }",
          "open": "open",
          "anchorEl": "anchorEl",
          "placement": "placement",
          "transition": true
        },
        "snippet": "<Popper\n        // Note: The following zIndex style is specifically for documentation purposes and may not be necessary in your application.\n        sx={{ zIndex: 1200 }}\n        open={open}\n        anchorEl={anchorEl}\n        placement={placement}\n        transition\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper>\n              <Typography sx={{ p: 2 }}>The content of the Popper.</Typography>\n            </Paper>\n          </Fade>\n        )}\n      </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "transition": true,
          "placement": "bottom-start"
        },
        "snippet": "<Popper\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        transition\n        placement=\"bottom-start\"\n      >\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Paper>\n              <Typography sx={{ p: 2 }}>The content of the Popper.</Typography>\n            </Paper>\n          </Fade>\n        )}\n      </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "transition": true
        },
        "snippet": "<Popper id={id} open={open} anchorEl={anchorEl} transition>\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps} timeout={350}>\n            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>\n              The content of the Popper.\n            </Box>\n          </Fade>\n        )}\n      </Popper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popper#Popper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "transition": true
        },
        "snippet": "<Popper id={id} open={open} anchorEl={anchorEl} transition>\n        {({ TransitionProps }) => (\n          <Fade {...TransitionProps}>\n            <Box sx={{ border: 1, p: 1, bgcolor: 'background.paper' }}>\n              The content of the Popper.\n            </Box>\n          </Fade>\n        )}\n      </Popper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Grow#Grow": [
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "style": "{ transformOrigin: '0 0 0' }"
        },
        "snippet": "<Grow\n          in={checked}\n          style={{ transformOrigin: '0 0 0' }}\n          {...(checked ? { timeout: 1000 } : {})}\n        >\n          {icon}\n        </Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "style": "{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }"
        },
        "snippet": "<Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      disabled={index === 2}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked"
        },
        "snippet": "<Grow in={checked}>{icon}</Grow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Grow#Grow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Grow {...props} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MenuList#MenuList": [
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "split-button-menu",
          "autoFocusItem": true
        },
        "snippet": "<MenuList id=\"split-button-menu\" autoFocusItem>\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      disabled={index === 2}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "dense": true
        },
        "snippet": "<MenuList dense>\n        <MenuItem>\n          <ListItemText inset>Single</ListItemText>\n        </MenuItem>\n        <MenuItem>\n          <ListItemText inset>1.15</ListItemText>\n        </MenuItem>\n        <MenuItem>\n          <ListItemText inset>Double</ListItemText>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <Check />\n          </ListItemIcon>\n          Custom: 1.2\n        </MenuItem>\n        <Divider />\n        <MenuItem>\n          <ListItemText>Add space before paragraph</ListItemText>\n        </MenuItem>\n        <MenuItem>\n          <ListItemText>Add space after paragraph</ListItemText>\n        </MenuItem>\n        <Divider />\n        <MenuItem>\n          <ListItemText>Custom spacing...</ListItemText>\n        </MenuItem>\n      </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MenuList>\n        <MenuItem>\n          <ListItemIcon>\n            <ContentCut fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Cut</ListItemText>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            ⌘X\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <ContentCopy fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Copy</ListItemText>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            ⌘C\n          </Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <ContentPaste fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Paste</ListItemText>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            ⌘V\n          </Typography>\n        </MenuItem>\n        <Divider />\n        <MenuItem>\n          <ListItemIcon>\n            <Cloud fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Web Clipboard</ListItemText>\n        </MenuItem>\n      </MenuList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MenuList#MenuList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<MenuList>\n        <MenuItem>\n          <ListItemIcon>\n            <SendIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\">A short message</Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <PriorityHighIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\">A very long text that overflows</Typography>\n        </MenuItem>\n        <MenuItem>\n          <ListItemIcon>\n            <DraftsIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <Typography variant=\"inherit\" noWrap>\n            A very long text that overflows\n          </Typography>\n        </MenuItem>\n      </MenuList>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Card#Card": [
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "sx": "{ maxWidth: 360 }"
        },
        "snippet": "<Card variant=\"outlined\" sx={{ maxWidth: 360 }}>\n      <Box sx={{ p: 2 }}>\n        <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            Toothbrush\n          </Typography>\n          <Typography gutterBottom variant=\"h6\" component=\"div\">\n            $4.50\n          </Typography>\n        </Stack>\n        <Typography color=\"text.secondary\" variant=\"body2\">\n          Pinstriped cornflower blue cotton blouse takes you on a walk to the park or\n          just down the hall.\n        </Typography>\n      </Box>\n      <Divider />\n      <Box sx={{ p: 2 }}>\n        <Typography gutterBottom variant=\"body2\">\n          Select type\n        </Typography>\n        <Stack direction=\"row\" spacing={1}>\n          <Chip color=\"primary\" label=\"Soft\" size=\"small\" />\n          <Chip label=\"Medium\" size=\"small\" />\n          <Chip label=\"Hard\" size=\"small\" />\n        </Stack>\n      </Box>\n    </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "outlined",
          "sx": "{\n        display: 'flex',\n        color: 'text.secondary',\n        '& svg': {\n          m: 1,\n        },\n        '& hr': {\n          mx: 0.5,\n        },\n      }"
        },
        "snippet": "<Card\n      variant=\"outlined\"\n      sx={{\n        display: 'flex',\n        color: 'text.secondary',\n        '& svg': {\n          m: 1,\n        },\n        '& hr': {\n          mx: 0.5,\n        },\n      }}\n    >\n      <FormatAlignLeftIcon />\n      <FormatAlignCenterIcon />\n      <FormatAlignRightIcon />\n      <Divider orientation=\"vertical\" variant=\"middle\" flexItem />\n      <FormatBoldIcon />\n    </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxWidth: 345 }"
        },
        "snippet": "<Card sx={{ maxWidth: 345 }}>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            R\n          </Avatar>\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n        title=\"Shrimp and Chorizo Paella\"\n        subheader=\"September 14, 2016\"\n      />\n      <CardMedia\n        component=\"img\"\n        height=\"194\"\n        image=\"/static/images/cards/paella.jpg\"\n        alt=\"Paella dish\"\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          This impressive paella is a perfect party dish and a fun meal to cook\n          together with your guests. Add 1 cup of frozen peas along with the mussels,\n          if you like.\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n          <FavoriteIcon />\n        </IconButton>\n        <IconButton aria-label=\"share\">\n          <ShareIcon />\n        </IconButton>\n        <ExpandMore\n          expand={expanded}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </ExpandMore>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography paragraph>Method:</Typography>\n          <Typography paragraph>\n            Heat 1/2 cup of the broth in a pot until simmering, add saffron and set\n            aside for 10 minutes.\n          </Typography>\n          <Typography paragraph>\n            Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over\n            medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring\n            occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a\n            large plate and set aside, leaving chicken and chorizo in the pan. Add\n            pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook,\n            stirring often until thickened and fragrant, about 10 minutes. Add\n            saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\n          </Typography>\n          <Typography paragraph>\n            Add rice and stir very gently to distribute. Top with artichokes and\n            peppers, and cook without stirring, until most of the liquid is absorbed,\n            15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and\n            mussels, tucking them down into the rice, and cook again without\n            stirring, until mussels have opened and rice is just tender, 5 to 7\n            minutes more. (Discard any mussels that don&apos;t open.)\n          </Typography>\n          <Typography>\n            Set aside off of the heat to let rest for 10 minutes, and then serve.\n          </Typography>\n        </CardContent>\n      </Collapse>\n    </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxWidth: 345, m: 2 }"
        },
        "snippet": "<Card sx={{ maxWidth: 345, m: 2 }}>\n      <CardHeader\n        avatar={\n          loading ? (\n            <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />\n          ) : (\n            <Avatar\n              alt=\"Ted talk\"\n              src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\"\n            />\n          )\n        }\n        action={\n          loading ? null : (\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          )\n        }\n        title={\n          loading ? (\n            <Skeleton\n              animation=\"wave\"\n              height={10}\n              width=\"80%\"\n              style={{ marginBottom: 6 }}\n            />\n          ) : (\n            'Ted'\n          )\n        }\n        subheader={\n          loading ? (\n            <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n          ) : (\n            '5 hours ago'\n          )\n        }\n      />\n      {loading ? (\n        <Skeleton sx={{ height: 190 }} animation=\"wave\" variant=\"rectangular\" />\n      ) : (\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512\"\n          alt=\"Nicola Sturgeon on a TED talk stage\"\n        />\n      )}\n      <CardContent>\n        {loading ? (\n          <React.Fragment>\n            <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />\n            <Skeleton animation=\"wave\" height={10} width=\"80%\" />\n          </React.Fragment>\n        ) : (\n          <Typography variant=\"body2\" color=\"text.secondary\" component=\"p\">\n            {\n              \"Why First Minister of Scotland Nicola Sturgeon thinks GDP is the wrong measure of a country's success:\"\n            }\n          </Typography>\n        )}\n      </CardContent>\n    </Card>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Card#Card",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ display: 'flex' }"
        },
        "snippet": "<Card sx={{ display: 'flex' }}>\n      <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n        <CardContent sx={{ flex: '1 0 auto' }}>\n          <Typography component=\"div\" variant=\"h5\">\n            Live From Space\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n            Mac Miller\n          </Typography>\n        </CardContent>\n        <Box sx={{ display: 'flex', alignItems: 'center', pl: 1, pb: 1 }}>\n          <IconButton aria-label=\"previous\">\n            {theme.direction === 'rtl' ? <SkipNextIcon /> : <SkipPreviousIcon />}\n          </IconButton>\n          <IconButton aria-label=\"play/pause\">\n            <PlayArrowIcon sx={{ height: 38, width: 38 }} />\n          </IconButton>\n          <IconButton aria-label=\"next\">\n            {theme.direction === 'rtl' ? <SkipPreviousIcon /> : <SkipNextIcon />}\n          </IconButton>\n        </Box>\n      </Box>\n      <CardMedia\n        component=\"img\"\n        sx={{ width: 151 }}\n        image=\"/static/images/cards/live-from-space.jpg\"\n        alt=\"Live from space album cover\"\n      />\n    </Card>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#CardActionArea": [
      {
        "componentId": "@mui/material#CardActionArea",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActionArea>\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          alt=\"green iguana\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            Lizard\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000\n            species, ranging across all continents except Antarctica\n          </Typography>\n        </CardContent>\n      </CardActionArea>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActionArea",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActionArea>\n        <CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          alt=\"green iguana\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"div\">\n            Lizard\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000\n            species, ranging across all continents except Antarctica\n          </Typography>\n        </CardContent>\n      </CardActionArea>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardMedia#CardMedia": [
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "140",
          "image": "https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512",
          "alt": "Nicola Sturgeon on a TED talk stage"
        },
        "snippet": "<CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"https://pi.tedcdn.com/r/talkstar-photos.s3.amazonaws.com/uploads/72bda89f-9bbf-4685-910a-2f151c4f3a8a/NicolaSturgeon_2019T-embed.jpg?w=512\"\n          alt=\"Nicola Sturgeon on a TED talk stage\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "sx": "{ width: 151 }",
          "image": "/static/images/cards/live-from-space.jpg",
          "alt": "Live from space album cover"
        },
        "snippet": "<CardMedia\n        component=\"img\"\n        sx={{ width: 151 }}\n        image=\"/static/images/cards/live-from-space.jpg\"\n        alt=\"Live from space album cover\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "140",
          "image": "/static/images/cards/contemplative-reptile.jpg",
          "alt": "green iguana"
        },
        "snippet": "<CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          alt=\"green iguana\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "alt": "green iguana",
          "height": "140",
          "image": "/static/images/cards/contemplative-reptile.jpg"
        },
        "snippet": "<CardMedia\n        component=\"img\"\n        alt=\"green iguana\"\n        height=\"140\"\n        image=\"/static/images/cards/contemplative-reptile.jpg\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardMedia#CardMedia",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "img",
          "height": "140",
          "image": "/static/images/cards/contemplative-reptile.jpg",
          "alt": "green iguana"
        },
        "snippet": "<CardMedia\n          component=\"img\"\n          height=\"140\"\n          image=\"/static/images/cards/contemplative-reptile.jpg\"\n          alt=\"green iguana\"\n        />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardContent#CardContent": [
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ flex: '1 0 auto' }"
        },
        "snippet": "<CardContent sx={{ flex: '1 0 auto' }}>\n          <Typography component=\"div\" variant=\"h5\">\n            Live From Space\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"text.secondary\" component=\"div\">\n            Mac Miller\n          </Typography>\n        </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent>\n          <Typography paragraph>Method:</Typography>\n          <Typography paragraph>\n            Heat 1/2 cup of the broth in a pot until simmering, add saffron and set\n            aside for 10 minutes.\n          </Typography>\n          <Typography paragraph>\n            Heat oil in a (14- to 16-inch) paella pan or a large, deep skillet over\n            medium-high heat. Add chicken, shrimp and chorizo, and cook, stirring\n            occasionally until lightly browned, 6 to 8 minutes. Transfer shrimp to a\n            large plate and set aside, leaving chicken and chorizo in the pan. Add\n            pimentón, bay leaves, garlic, tomatoes, onion, salt and pepper, and cook,\n            stirring often until thickened and fragrant, about 10 minutes. Add\n            saffron broth and remaining 4 1/2 cups chicken broth; bring to a boil.\n          </Typography>\n          <Typography paragraph>\n            Add rice and stir very gently to distribute. Top with artichokes and\n            peppers, and cook without stirring, until most of the liquid is absorbed,\n            15 to 18 minutes. Reduce heat to medium-low, add reserved shrimp and\n            mussels, tucking them down into the rice, and cook again without\n            stirring, until mussels have opened and rice is just tender, 5 to 7\n            minutes more. (Discard any mussels that don&apos;t open.)\n          </Typography>\n          <Typography>\n            Set aside off of the heat to let rest for 10 minutes, and then serve.\n          </Typography>\n        </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Word of the Day\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          be{bull}nev{bull}o{bull}lent\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          adjective\n        </Typography>\n        <Typography variant=\"body2\">\n          well meaning and kindly.\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent>\n      <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n        Word of the Day\n      </Typography>\n      <Typography variant=\"h5\" component=\"div\">\n        be{bull}nev{bull}o{bull}lent\n      </Typography>\n      <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n        adjective\n      </Typography>\n      <Typography variant=\"body2\">\n        well meaning and kindly.\n        <br />\n        {'\"a benevolent smile\"'}\n      </Typography>\n    </CardContent>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardContent#CardContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardContent>\n        {loading ? (\n          <React.Fragment>\n            <Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />\n            <Skeleton animation=\"wave\" height={10} width=\"80%\" />\n          </React.Fragment>\n        ) : (\n          <Typography variant=\"body2\" color=\"text.secondary\" component=\"p\">\n            {\n              \"Why First Minister of Scotland Nicola Sturgeon thinks GDP is the wrong measure of a country's success:\"\n            }\n          </Typography>\n        )}\n      </CardContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material#CardActions": [
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableSpacing": true
        },
        "snippet": "<CardActions disableSpacing>\n        <IconButton aria-label=\"add to favorites\">\n          <FavoriteIcon />\n        </IconButton>\n        <IconButton aria-label=\"share\">\n          <ShareIcon />\n        </IconButton>\n        <ExpandMore\n          expand={expanded}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </ExpandMore>\n      </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions>\n        <Button size=\"small\">Share</Button>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions>\n        <Button size=\"small\">Share</Button>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions>\n        <Button size=\"small\" color=\"primary\">\n          Share\n        </Button>\n      </CardActions>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material#CardActions",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<CardActions>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/CardHeader#CardHeader": [
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "avatar": "\n          loading ? (\n            <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />\n          ) : (\n            <Avatar\n              alt=\"Ted talk\"\n              src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\"\n            />\n          )\n        ",
          "action": "\n          loading ? null : (\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          )\n        ",
          "title": "\n          loading ? (\n            <Skeleton\n              animation=\"wave\"\n              height={10}\n              width=\"80%\"\n              style={{ marginBottom: 6 }}\n            />\n          ) : (\n            'Ted'\n          )\n        ",
          "subheader": "\n          loading ? (\n            <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n          ) : (\n            '5 hours ago'\n          )\n        "
        },
        "snippet": "<CardHeader\n        avatar={\n          loading ? (\n            <Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />\n          ) : (\n            <Avatar\n              alt=\"Ted talk\"\n              src=\"https://pbs.twimg.com/profile_images/877631054525472768/Xp5FAPD5_reasonably_small.jpg\"\n            />\n          )\n        }\n        action={\n          loading ? null : (\n            <IconButton aria-label=\"settings\">\n              <MoreVertIcon />\n            </IconButton>\n          )\n        }\n        title={\n          loading ? (\n            <Skeleton\n              animation=\"wave\"\n              height={10}\n              width=\"80%\"\n              style={{ marginBottom: 6 }}\n            />\n          ) : (\n            'Ted'\n          )\n        }\n        subheader={\n          loading ? (\n            <Skeleton animation=\"wave\" height={10} width=\"40%\" />\n          ) : (\n            '5 hours ago'\n          )\n        }\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ px: 2, py: 1 }",
          "avatar": "\n          <Checkbox\n            onClick={handleToggleAll(items)}\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\n            indeterminate={\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\n            }\n            disabled={items.length === 0}\n            inputProps={{\n              'aria-label': 'all items selected',\n            }}\n          />\n        ",
          "title": "title",
          "subheader": "`${numberOfChecked(items)}/${items.length} selected`"
        },
        "snippet": "<CardHeader\n        sx={{ px: 2, py: 1 }}\n        avatar={\n          <Checkbox\n            onClick={handleToggleAll(items)}\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\n            indeterminate={\n              numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0\n            }\n            disabled={items.length === 0}\n            inputProps={{\n              'aria-label': 'all items selected',\n            }}\n          />\n        }\n        title={title}\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/CardHeader#CardHeader",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "avatar": "\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            R\n          </Avatar>\n        ",
          "action": "\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        ",
          "title": "Shrimp and Chorizo Paella",
          "subheader": "September 14, 2016"
        },
        "snippet": "<CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            R\n          </Avatar>\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n        title=\"Shrimp and Chorizo Paella\"\n        subheader=\"September 14, 2016\"\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormControl#FormControl": [
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "required": true,
          "error": "error",
          "component": "fieldset",
          "sx": "{ m: 3 }",
          "variant": "standard"
        },
        "snippet": "<FormControl\n        required\n        error={error}\n        component=\"fieldset\"\n        sx={{ m: 3 }}\n        variant=\"standard\"\n      >\n        <FormLabel component=\"legend\">Pick two</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox checked={gilad} onChange={handleChange} name=\"gilad\" />\n            }\n            label=\"Gilad Gray\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={jason} onChange={handleChange} name=\"jason\" />\n            }\n            label=\"Jason Killian\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={antoine} onChange={handleChange} name=\"antoine\" />\n            }\n            label=\"Antoine Llorca\"\n          />\n        </FormGroup>\n        <FormHelperText>You can display an error</FormHelperText>\n      </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 3 }",
          "component": "fieldset",
          "variant": "standard"
        },
        "snippet": "<FormControl sx={{ m: 3 }} component=\"fieldset\" variant=\"standard\">\n        <FormLabel component=\"legend\">Assign responsibility</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox checked={gilad} onChange={handleChange} name=\"gilad\" />\n            }\n            label=\"Gilad Gray\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={jason} onChange={handleChange} name=\"jason\" />\n            }\n            label=\"Jason Killian\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox checked={antoine} onChange={handleChange} name=\"antoine\" />\n            }\n            label=\"Antoine Llorca\"\n          />\n        </FormGroup>\n        <FormHelperText>Be careful</FormHelperText>\n      </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ m: 3 }",
          "error": "error",
          "variant": "standard"
        },
        "snippet": "<FormControl sx={{ m: 3 }} error={error} variant=\"standard\">\n        <FormLabel id=\"demo-error-radios\">Pop quiz: MUI is...</FormLabel>\n        <RadioGroup\n          aria-labelledby=\"demo-error-radios\"\n          name=\"quiz\"\n          value={value}\n          onChange={handleRadioChange}\n        >\n          <FormControlLabel value=\"best\" control={<Radio />} label=\"The best!\" />\n          <FormControlLabel value=\"worst\" control={<Radio />} label=\"The worst.\" />\n        </RadioGroup>\n        <FormHelperText>{helperText}</FormHelperText>\n        <Button sx={{ mt: 1, mr: 1 }} type=\"submit\" variant=\"outlined\">\n          Check Answer\n        </Button>\n      </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": true,
          "sx": "{ m: 1 }",
          "variant": "filled"
        },
        "snippet": "<FormControl fullWidth sx={{ m: 1 }} variant=\"filled\">\n          <InputLabel htmlFor=\"filled-adornment-amount\">Amount</InputLabel>\n          <FilledInput\n            id=\"filled-adornment-amount\"\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n          />\n        </FormControl>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormControl#FormControl",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fullWidth": true,
          "sx": "{ m: 1 }",
          "variant": "standard"
        },
        "snippet": "<FormControl fullWidth sx={{ m: 1 }} variant=\"standard\">\n          <InputLabel htmlFor=\"standard-adornment-amount\">Amount</InputLabel>\n          <Input\n            id=\"standard-adornment-amount\"\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n          />\n        </FormControl>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormLabel#FormLabel": [
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-form-control-label-placement"
        },
        "snippet": "<FormLabel id=\"demo-form-control-label-placement\">Label placement</FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-controlled-radio-buttons-group"
        },
        "snippet": "<FormLabel id=\"demo-controlled-radio-buttons-group\">Gender</FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-row-radio-buttons-group-label"
        },
        "snippet": "<FormLabel id=\"demo-row-radio-buttons-group-label\">Gender</FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-radio-buttons-group-label"
        },
        "snippet": "<FormLabel id=\"demo-radio-buttons-group-label\">Gender</FormLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormLabel#FormLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "legend"
        },
        "snippet": "<FormLabel component=\"legend\">Assign responsibility</FormLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FormHelperText#FormHelperText": [
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-helper-text"
        },
        "snippet": "<FormHelperText id=\"component-helper-text\">\n          Some important helper text\n        </FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"outlined-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"standard-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-weight-helper-text"
        },
        "snippet": "<FormHelperText id=\"filled-weight-helper-text\">Weight</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FormHelperText#FormHelperText",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-error-text"
        },
        "snippet": "<FormHelperText id=\"component-error-text\">Error</FormHelperText>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Portal#Portal": [
      {
        "componentId": "@mui/material/Portal#Portal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<Portal>\n            <Box sx={styles}>\n              Click me, I will stay visible until you click outside.\n            </Box>\n          </Portal>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/RadioGroup#RadioGroup": [
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "justifyContent",
          "aria-label": "justifyContent",
          "value": "justifyContent",
          "onChange": "(event) => {\n                    setJustifyContent(\n                      (event.target as HTMLInputElement).value as GridJustification,\n                    );\n                  }"
        },
        "snippet": "<RadioGroup\n                  row\n                  name=\"justifyContent\"\n                  aria-label=\"justifyContent\"\n                  value={justifyContent}\n                  onChange={(event) => {\n                    setJustifyContent(\n                      (event.target as HTMLInputElement).value as GridJustification,\n                    );\n                  }}\n                >\n                  <FormControlLabel\n                    value=\"flex-start\"\n                    control={<Radio />}\n                    label=\"flex-start\"\n                  />\n                  <FormControlLabel\n                    value=\"center\"\n                    control={<Radio />}\n                    label=\"center\"\n                  />\n                  <FormControlLabel\n                    value=\"flex-end\"\n                    control={<Radio />}\n                    label=\"flex-end\"\n                  />\n                  <FormControlLabel\n                    value=\"space-between\"\n                    control={<Radio />}\n                    label=\"space-between\"\n                  />\n                  <FormControlLabel\n                    value=\"space-around\"\n                    control={<Radio />}\n                    label=\"space-around\"\n                  />\n                  <FormControlLabel\n                    value=\"space-evenly\"\n                    control={<Radio />}\n                    label=\"space-evenly\"\n                  />\n                </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "justifyContent",
          "aria-label": "justifyContent",
          "value": "justifyContent",
          "onChange": "(event) => {\n                  setJustifyContent(event.target.value);\n                }"
        },
        "snippet": "<RadioGroup\n                row\n                name=\"justifyContent\"\n                aria-label=\"justifyContent\"\n                value={justifyContent}\n                onChange={(event) => {\n                  setJustifyContent(event.target.value);\n                }}\n              >\n                <FormControlLabel\n                  value=\"flex-start\"\n                  control={<Radio />}\n                  label=\"flex-start\"\n                />\n                <FormControlLabel\n                  value=\"center\"\n                  control={<Radio />}\n                  label=\"center\"\n                />\n                <FormControlLabel\n                  value=\"flex-end\"\n                  control={<Radio />}\n                  label=\"flex-end\"\n                />\n                <FormControlLabel\n                  value=\"space-between\"\n                  control={<Radio />}\n                  label=\"space-between\"\n                />\n                <FormControlLabel\n                  value=\"space-around\"\n                  control={<Radio />}\n                  label=\"space-around\"\n                />\n                <FormControlLabel\n                  value=\"space-evenly\"\n                  control={<Radio />}\n                  label=\"space-evenly\"\n                />\n              </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "alignItems",
          "aria-label": "align items",
          "value": "alignItems",
          "onChange": "(event) => {\n                    setAlignItems(\n                      (event.target as HTMLInputElement).value as GridItemsAlignment,\n                    );\n                  }"
        },
        "snippet": "<RadioGroup\n                  row\n                  name=\"alignItems\"\n                  aria-label=\"align items\"\n                  value={alignItems}\n                  onChange={(event) => {\n                    setAlignItems(\n                      (event.target as HTMLInputElement).value as GridItemsAlignment,\n                    );\n                  }}\n                >\n                  <FormControlLabel\n                    value=\"flex-start\"\n                    control={<Radio />}\n                    label=\"flex-start\"\n                  />\n                  <FormControlLabel\n                    value=\"center\"\n                    control={<Radio />}\n                    label=\"center\"\n                  />\n                  <FormControlLabel\n                    value=\"flex-end\"\n                    control={<Radio />}\n                    label=\"flex-end\"\n                  />\n                  <FormControlLabel\n                    value=\"stretch\"\n                    control={<Radio />}\n                    label=\"stretch\"\n                  />\n                  <FormControlLabel\n                    value=\"baseline\"\n                    control={<Radio />}\n                    label=\"baseline\"\n                  />\n                </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "alignItems",
          "aria-label": "align items",
          "value": "alignItems",
          "onChange": "(event) => {\n                  setAlignItems(event.target.value);\n                }"
        },
        "snippet": "<RadioGroup\n                row\n                name=\"alignItems\"\n                aria-label=\"align items\"\n                value={alignItems}\n                onChange={(event) => {\n                  setAlignItems(event.target.value);\n                }}\n              >\n                <FormControlLabel\n                  value=\"flex-start\"\n                  control={<Radio />}\n                  label=\"flex-start\"\n                />\n                <FormControlLabel\n                  value=\"center\"\n                  control={<Radio />}\n                  label=\"center\"\n                />\n                <FormControlLabel\n                  value=\"flex-end\"\n                  control={<Radio />}\n                  label=\"flex-end\"\n                />\n                <FormControlLabel\n                  value=\"stretch\"\n                  control={<Radio />}\n                  label=\"stretch\"\n                />\n                <FormControlLabel\n                  value=\"baseline\"\n                  control={<Radio />}\n                  label=\"baseline\"\n                />\n              </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/RadioGroup#RadioGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "row": true,
          "name": "direction",
          "aria-label": "direction",
          "value": "direction",
          "onChange": "(event) => {\n                    setDirection(\n                      (event.target as HTMLInputElement).value as GridDirection,\n                    );\n                  }"
        },
        "snippet": "<RadioGroup\n                  row\n                  name=\"direction\"\n                  aria-label=\"direction\"\n                  value={direction}\n                  onChange={(event) => {\n                    setDirection(\n                      (event.target as HTMLInputElement).value as GridDirection,\n                    );\n                  }}\n                >\n                  <FormControlLabel value=\"row\" control={<Radio />} label=\"row\" />\n                  <FormControlLabel\n                    value=\"row-reverse\"\n                    control={<Radio />}\n                    label=\"row-reverse\"\n                  />\n                  <FormControlLabel\n                    value=\"column\"\n                    control={<Radio />}\n                    label=\"column\"\n                  />\n                  <FormControlLabel\n                    value=\"column-reverse\"\n                    control={<Radio />}\n                    label=\"column-reverse\"\n                  />\n                </RadioGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Radio#Radio": [
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "selectedValue === 'a'",
          "onChange": "handleChange",
          "value": "a",
          "name": "radio-buttons",
          "inputProps": "{ 'aria-label': 'A' }"
        },
        "snippet": "<Radio\n        checked={selectedValue === 'a'}\n        onChange={handleChange}\n        value=\"a\"\n        name=\"radio-buttons\"\n        inputProps={{ 'aria-label': 'A' }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "checked": "selectedValue === 'b'",
          "onChange": "handleChange",
          "value": "b",
          "name": "radio-buttons",
          "inputProps": "{ 'aria-label': 'B' }"
        },
        "snippet": "<Radio\n        checked={selectedValue === 'b'}\n        onChange={handleChange}\n        value=\"b\"\n        name=\"radio-buttons\"\n        inputProps={{ 'aria-label': 'B' }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "disableRipple": true,
          "color": "default",
          "checkedIcon": "<BpCheckedIcon />",
          "icon": "<BpIcon />"
        },
        "snippet": "<Radio\n      disableRipple\n      color=\"default\"\n      checkedIcon={<BpCheckedIcon />}\n      icon={<BpIcon />}\n      {...props}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          color: pink[800],\n          '&.Mui-checked': {\n            color: pink[600],\n          },\n        }"
        },
        "snippet": "<Radio\n        {...controlProps('e')}\n        sx={{\n          color: pink[800],\n          '&.Mui-checked': {\n            color: pink[600],\n          },\n        }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Radio#Radio",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n          '& .MuiSvgIcon-root': {\n            fontSize: 28,\n          },\n        }"
        },
        "snippet": "<Radio\n        {...controlProps('c')}\n        sx={{\n          '& .MuiSvgIcon-root': {\n            fontSize: 28,\n          },\n        }}\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Unstable_TrapFocus#TrapFocus": [
      {
        "componentId": "@mui/material/Unstable_TrapFocus#TrapFocus",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": true,
          "disableAutoFocus": true,
          "disableEnforceFocus": true
        },
        "snippet": "<TrapFocus open disableAutoFocus disableEnforceFocus>\n        <Fade appear={false} in={bannerOpen}>\n          <Paper\n            role=\"dialog\"\n            aria-modal=\"false\"\n            aria-label=\"Cookie banner\"\n            square\n            variant=\"outlined\"\n            tabIndex={-1}\n            sx={{\n              position: 'fixed',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              m: 0,\n              p: 2,\n              borderWidth: 0,\n              borderTopWidth: 1,\n            }}\n          >\n            <Stack\n              direction={{ xs: 'column', sm: 'row' }}\n              justifyContent=\"space-between\"\n              gap={2}\n            >\n              <Box\n                sx={{\n                  flexShrink: 1,\n                  alignSelf: { xs: 'flex-start', sm: 'center' },\n                }}\n              >\n                <Typography fontWeight=\"bold\">This website uses cookies</Typography>\n                <Typography variant=\"body2\">\n                  example.com relies on cookies to improve your experience.\n                </Typography>\n              </Box>\n              <Stack\n                gap={2}\n                direction={{\n                  xs: 'row-reverse',\n                  sm: 'row',\n                }}\n                sx={{\n                  flexShrink: 0,\n                  alignSelf: { xs: 'flex-end', sm: 'center' },\n                }}\n              >\n                <Button size=\"small\" onClick={closeBanner} variant=\"contained\">\n                  Allow all\n                </Button>\n                <Button size=\"small\" onClick={closeBanner}>\n                  Reject all\n                </Button>\n              </Stack>\n            </Stack>\n          </Paper>\n        </Fade>\n      </TrapFocus>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputLabel#InputLabel": [
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "standard",
          "htmlFor": "uncontrolled-native"
        },
        "snippet": "<InputLabel variant=\"standard\" htmlFor=\"uncontrolled-native\">\n          Age\n        </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "shrink": true,
          "htmlFor": "select-multiple-native"
        },
        "snippet": "<InputLabel shrink htmlFor=\"select-multiple-native\">\n          Native\n        </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "shrink": true,
          "htmlFor": "bootstrap-input"
        },
        "snippet": "<InputLabel shrink htmlFor=\"bootstrap-input\">\n          Bootstrap\n        </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "htmlFor": "input-with-icon-adornment"
        },
        "snippet": "<InputLabel htmlFor=\"input-with-icon-adornment\">\n          With a start adornment\n        </InputLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputLabel#InputLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "htmlFor": "formatted-text-mask-input"
        },
        "snippet": "<InputLabel htmlFor=\"formatted-text-mask-input\">react-imask</InputLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Select#Select": [
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-chip-label",
          "id": "demo-multiple-chip",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />",
          "renderValue": "(selected) => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map((value) => (\n                <Chip key={value} label={value} />\n              ))}\n            </Box>\n          )",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select\n          labelId=\"demo-multiple-chip-label\"\n          id=\"demo-multiple-chip\"\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />}\n          renderValue={(selected) => (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {selected.map((value) => (\n                <Chip key={value} label={value} />\n              ))}\n            </Box>\n          )}\n          MenuProps={MenuProps}\n        >\n          {names.map((name) => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "multiple": true,
          "displayEmpty": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput />",
          "renderValue": "(selected) => {\n            if (selected.length === 0) {\n              return <em>Placeholder</em>;\n            }\n\n            return selected.join(', ');\n          }",
          "MenuProps": "MenuProps",
          "inputProps": "{ 'aria-label': 'Without label' }"
        },
        "snippet": "<Select\n          multiple\n          displayEmpty\n          value={personName}\n          onChange={handleChange}\n          input={<OutlinedInput />}\n          renderValue={(selected) => {\n            if (selected.length === 0) {\n              return <em>Placeholder</em>;\n            }\n\n            return selected.join(', ');\n          }}\n          MenuProps={MenuProps}\n          inputProps={{ 'aria-label': 'Without label' }}\n        >\n          <MenuItem disabled value=\"\">\n            <em>Placeholder</em>\n          </MenuItem>\n          {names.map((name) => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-checkbox-label",
          "id": "demo-multiple-checkbox",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput label=\"Tag\" />",
          "renderValue": "(selected) => selected.join(', ')",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select\n          labelId=\"demo-multiple-checkbox-label\"\n          id=\"demo-multiple-checkbox\"\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<OutlinedInput label=\"Tag\" />}\n          renderValue={(selected) => selected.join(', ')}\n          MenuProps={MenuProps}\n        >\n          {names.map((name) => (\n            <MenuItem key={name} value={name}>\n              <Checkbox checked={personName.indexOf(name) > -1} />\n              <ListItemText primary={name} />\n            </MenuItem>\n          ))}\n        </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-controlled-open-select-label",
          "id": "demo-controlled-open-select",
          "open": "open",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "value": "age",
          "label": "Age",
          "onChange": "handleChange"
        },
        "snippet": "<Select\n          labelId=\"demo-controlled-open-select-label\"\n          id=\"demo-controlled-open-select\"\n          open={open}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          value={age}\n          label=\"Age\"\n          onChange={handleChange}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Select#Select",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "labelId": "demo-multiple-name-label",
          "id": "demo-multiple-name",
          "multiple": true,
          "value": "personName",
          "onChange": "handleChange",
          "input": "<OutlinedInput label=\"Name\" />",
          "MenuProps": "MenuProps"
        },
        "snippet": "<Select\n          labelId=\"demo-multiple-name-label\"\n          id=\"demo-multiple-name\"\n          multiple\n          value={personName}\n          onChange={handleChange}\n          input={<OutlinedInput label=\"Name\" />}\n          MenuProps={MenuProps}\n        >\n          {names.map((name) => (\n            <MenuItem\n              key={name}\n              value={name}\n              style={getStyles(name, personName, theme)}\n            >\n              {name}\n            </MenuItem>\n          ))}\n        </Select>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ListItemIcon#ListItemIcon": [
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }"
        },
        "snippet": "<ListItemIcon\n                  sx={{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }"
        },
        "snippet": "<ListItemIcon\n                  sx={{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n                </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: 'inherit' }"
        },
        "snippet": "<ListItemIcon sx={{ color: 'inherit' }}>\n                      {item.icon}\n                    </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ fontSize: 20 }"
        },
        "snippet": "<ListItemIcon sx={{ fontSize: 20 }}>🔥</ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ListItemIcon#ListItemIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                  checked={checked.indexOf(value) !== -1}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ 'aria-labelledby': labelId }}\n                />\n              </ListItemIcon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SwipeableDrawer#SwipeableDrawer": [
      {
        "componentId": "@mui/material/SwipeableDrawer#SwipeableDrawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "container": "container",
          "anchor": "bottom",
          "open": "open",
          "onClose": "toggleDrawer(false)",
          "onOpen": "toggleDrawer(true)",
          "swipeAreaWidth": "drawerBleeding",
          "disableSwipeToOpen": false,
          "ModalProps": "{\n          keepMounted: true,\n        }"
        },
        "snippet": "<SwipeableDrawer\n        container={container}\n        anchor=\"bottom\"\n        open={open}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={drawerBleeding}\n        disableSwipeToOpen={false}\n        ModalProps={{\n          keepMounted: true,\n        }}\n      >\n        <StyledBox\n          sx={{\n            position: 'absolute',\n            top: -drawerBleeding,\n            borderTopLeftRadius: 8,\n            borderTopRightRadius: 8,\n            visibility: 'visible',\n            right: 0,\n            left: 0,\n          }}\n        >\n          <Puller />\n          <Typography sx={{ p: 2, color: 'text.secondary' }}>51 results</Typography>\n        </StyledBox>\n        <StyledBox\n          sx={{\n            px: 2,\n            pb: 2,\n            height: '100%',\n            overflow: 'auto',\n          }}\n        >\n          <Skeleton variant=\"rectangular\" height=\"100%\" />\n        </StyledBox>\n      </SwipeableDrawer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SwipeableDrawer#SwipeableDrawer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchor": "anchor",
          "open": "state[anchor]",
          "onClose": "toggleDrawer(anchor, false)",
          "onOpen": "toggleDrawer(anchor, true)"
        },
        "snippet": "<SwipeableDrawer\n            anchor={anchor}\n            open={state[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n            onOpen={toggleDrawer(anchor, true)}\n          >\n            {list(anchor)}\n          </SwipeableDrawer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Skeleton#Skeleton": [
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ bgcolor: 'grey.900' }",
          "variant": "rectangular",
          "width": 210,
          "height": 118
        },
        "snippet": "<Skeleton\n        sx={{ bgcolor: 'grey.900' }}\n        variant=\"rectangular\"\n        width={210}\n        height={118}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "height": 10,
          "width": "80%",
          "style": "{ marginBottom: 6 }"
        },
        "snippet": "<Skeleton\n              animation=\"wave\"\n              height={10}\n              width=\"80%\"\n              style={{ marginBottom: 6 }}\n            />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "variant": "circular",
          "width": 40,
          "height": 40
        },
        "snippet": "<Skeleton animation=\"wave\" variant=\"circular\" width={40} height={40} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ height: 190 }",
          "animation": "wave",
          "variant": "rectangular"
        },
        "snippet": "<Skeleton sx={{ height: 190 }} animation=\"wave\" variant=\"rectangular\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Skeleton#Skeleton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "animation": "wave",
          "height": 10,
          "style": "{ marginBottom: 6 }"
        },
        "snippet": "<Skeleton animation=\"wave\" height={10} style={{ marginBottom: 6 }} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tabs#Tabs": [
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "variant": "scrollable",
          "value": "value",
          "onChange": "handleChange",
          "aria-label": "Vertical tabs example",
          "sx": "{ borderRight: 1, borderColor: 'divider' }"
        },
        "snippet": "<Tabs\n        orientation=\"vertical\"\n        variant=\"scrollable\"\n        value={value}\n        onChange={handleChange}\n        aria-label=\"Vertical tabs example\"\n        sx={{ borderRight: 1, borderColor: 'divider' }}\n      >\n        <Tab label=\"Item One\" {...a11yProps(0)} />\n        <Tab label=\"Item Two\" {...a11yProps(1)} />\n        <Tab label=\"Item Three\" {...a11yProps(2)} />\n        <Tab label=\"Item Four\" {...a11yProps(3)} />\n        <Tab label=\"Item Five\" {...a11yProps(4)} />\n        <Tab label=\"Item Six\" {...a11yProps(5)} />\n        <Tab label=\"Item Seven\" {...a11yProps(6)} />\n      </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "variant": "scrollable",
          "scrollButtons": true,
          "aria-label": "visible arrows tabs example",
          "sx": "{\n          [`& .${tabsClasses.scrollButtons}`]: {\n            '&.Mui-disabled': { opacity: 0.3 },\n          },\n        }"
        },
        "snippet": "<Tabs\n        value={value}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons\n        aria-label=\"visible arrows tabs example\"\n        sx={{\n          [`& .${tabsClasses.scrollButtons}`]: {\n            '&.Mui-disabled': { opacity: 0.3 },\n          },\n        }}\n      >\n        <Tab label=\"Item One\" />\n        <Tab label=\"Item Two\" />\n        <Tab label=\"Item Three\" />\n        <Tab label=\"Item Four\" />\n        <Tab label=\"Item Five\" />\n        <Tab label=\"Item Six\" />\n        <Tab label=\"Item Seven\" />\n      </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "variant": "scrollable",
          "scrollButtons": true,
          "allowScrollButtonsMobile": true,
          "aria-label": "scrollable force tabs example"
        },
        "snippet": "<Tabs\n        value={value}\n        onChange={handleChange}\n        variant=\"scrollable\"\n        scrollButtons\n        allowScrollButtonsMobile\n        aria-label=\"scrollable force tabs example\"\n      >\n        <Tab label=\"Item One\" />\n        <Tab label=\"Item Two\" />\n        <Tab label=\"Item Three\" />\n        <Tab label=\"Item Four\" />\n        <Tab label=\"Item Five\" />\n        <Tab label=\"Item Six\" />\n        <Tab label=\"Item Seven\" />\n      </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "indicatorColor": "secondary",
          "textColor": "inherit",
          "variant": "fullWidth",
          "aria-label": "full width tabs example"
        },
        "snippet": "<Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"secondary\"\n          textColor=\"inherit\"\n          variant=\"fullWidth\"\n          aria-label=\"full width tabs example\"\n        >\n          <Tab label=\"Item One\" {...a11yProps(0)} />\n          <Tab label=\"Item Two\" {...a11yProps(1)} />\n          <Tab label=\"Item Three\" {...a11yProps(2)} />\n        </Tabs>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tabs#Tabs",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "onChange": "handleChange",
          "indicatorColor": "primary",
          "textColor": "primary",
          "variant": "fullWidth",
          "aria-label": "action tabs example"
        },
        "snippet": "<Tabs\n          value={value}\n          onChange={handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          aria-label=\"action tabs example\"\n        >\n          <Tab label=\"Item One\" {...a11yProps(0)} />\n          <Tab label=\"Item Two\" {...a11yProps(1)} />\n          <Tab label=\"Item Three\" {...a11yProps(2)} />\n        </Tabs>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Tab#Tab": [
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "a",
          "onClick": "(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        // Routing libraries handle this, you can remove the onClick handle when using them.\n        if (samePageLinkNavigation(event)) {\n          event.preventDefault();\n        }\n      }",
          "aria-current": "props.selected && 'page'"
        },
        "snippet": "<Tab\n      component=\"a\"\n      onClick={(event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        // Routing libraries handle this, you can remove the onClick handle when using them.\n        if (samePageLinkNavigation(event)) {\n          event.preventDefault();\n        }\n      }}\n      aria-current={props.selected && 'page'}\n      {...props}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "one",
          "label": "New Arrivals in the Longest Text of Nonfiction that should appear in the next line",
          "wrapped": true
        },
        "snippet": "<Tab\n          value=\"one\"\n          label=\"New Arrivals in the Longest Text of Nonfiction that should appear in the next line\"\n          wrapped\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<PhoneMissedIcon />",
          "iconPosition": "start",
          "label": "start"
        },
        "snippet": "<Tab icon={<PhoneMissedIcon />} iconPosition=\"start\" label=\"start\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<PersonPinIcon />",
          "iconPosition": "bottom",
          "label": "bottom"
        },
        "snippet": "<Tab icon={<PersonPinIcon />} iconPosition=\"bottom\" label=\"bottom\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Tab#Tab",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "icon": "<FavoriteIcon />",
          "iconPosition": "end",
          "label": "end"
        },
        "snippet": "<Tab icon={<FavoriteIcon />} iconPosition=\"end\" label=\"end\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Zoom#Zoom": [
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "fab.color",
          "in": "value === index",
          "timeout": "transitionDuration",
          "style": "{\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\n          }",
          "unmountOnExit": true
        },
        "snippet": "<Zoom\n          key={fab.color}\n          in={value === index}\n          timeout={transitionDuration}\n          style={{\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\n          }}\n          unmountOnExit\n        >\n          <Fab sx={fab.sx} aria-label={fab.label} color={fab.color}>\n            {fab.icon}\n          </Fab>\n        </Zoom>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked",
          "style": "{ transitionDelay: checked ? '500ms' : '0ms' }"
        },
        "snippet": "<Zoom in={checked} style={{ transitionDelay: checked ? '500ms' : '0ms' }}>\n          {icon}\n        </Zoom>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Zoom#Zoom",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "in": "checked"
        },
        "snippet": "<Zoom in={checked}>{icon}</Zoom>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ButtonBase#ButtonBase": [
      {
        "componentId": "@mui/material/ButtonBase#ButtonBase",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 128, height: 128 }"
        },
        "snippet": "<ButtonBase sx={{ width: 128, height: 128 }}>\n            <Img alt=\"complex\" src=\"/static/images/grid/complex.jpg\" />\n          </ButtonBase>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SvgIcon#SvgIcon": [
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref",
          "viewBox": "`0 0 ${width} ${height}`"
        },
        "snippet": "<SvgIcon ref={ref} viewBox={`0 0 ${width} ${height}`}>\n        {typeof svgPathData === 'string' ? (\n          <path d={svgPathData} />\n        ) : (\n          /**\n           * A multi-path Font Awesome icon seems to imply a duotune icon. The 0th path seems to\n           * be the faded element (referred to as the \"secondary\" path in the Font Awesome docs)\n           * of a duotone icon. 40% is the default opacity.\n           *\n           * @see https://fontawesome.com/how-to-use/on-the-web/styling/duotone-icons#changing-opacity\n           */\n          svgPathData.map((d: string, i: number) => (\n            <path style={{ opacity: i === 0 ? 0.4 : 1 }} d={d} />\n          ))\n        )}\n      </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon>\n      {/* credit: plus icon from https://heroicons.com/ */}\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        strokeWidth={1.5}\n        stroke=\"currentColor\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          d=\"M4.5 12a7.5 7.5 0 0015 0m-15 0a7.5 7.5 0 1115 0m-15 0H3m16.5 0H21m-1.5 0H12m-8.457 3.077l1.41-.513m14.095-5.13l1.41-.513M5.106 17.785l1.15-.964m11.49-9.642l1.149-.964M7.501 19.795l.75-1.3m7.5-12.99l.75-1.3m-6.063 16.658l.26-1.477m2.605-14.772l.26-1.477m0 17.726l-.26-1.477M10.698 4.614l-.26-1.477M16.5 19.794l-.75-1.299M7.5 4.205L12 12m6.894 5.785l-1.149-.964M6.256 7.178l-1.15-.964m15.352 8.864l-1.41-.513M4.954 9.435l-1.41-.514M12.002 12l-3.75 6.495\"\n        />\n      </svg>\n    </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "load-lib"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon {...props}>\n      <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\" />\n    </SvgIcon>",
        "tags": [
          "external-lib",
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon {...props}>\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SvgIcon#SvgIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SvgIcon {...props}>\n      <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n    </SvgIcon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Icon#Icon": [
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ ...(isDarkMode && { filter: 'invert(1)' }) }",
          "baseClassName": "material-icons-two-tone"
        },
        "snippet": "<Icon\n      sx={{ ...(isDarkMode && { filter: 'invert(1)' }) }}\n      baseClassName=\"material-icons-two-tone\"\n    >\n      add_circle\n    </Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ color: green[500] }"
        },
        "snippet": "<Icon sx={{ color: green[500] }}>add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ fontSize: 30 }"
        },
        "snippet": "<Icon sx={{ fontSize: 30 }}>add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "fontSize": "small"
        },
        "snippet": "<Icon fontSize=\"small\">add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Icon#Icon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary"
        },
        "snippet": "<Icon color=\"primary\">add_circle</Icon>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageList#ImageList": [
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "variant": "woven",
          "cols": 3,
          "gap": 8
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450 }} variant=\"woven\" cols={3} gap={8}>\n      {itemData.map((item) => (\n        <ImageListItem key={item.img}>\n          <img\n            srcSet={`${item.img}?w=161&fit=crop&auto=format&dpr=2 2x`}\n            src={`${item.img}?w=161&fit=crop&auto=format`}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n        </ImageListItem>\n      ))}\n    </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "variant": "quilted",
          "cols": 4,
          "rowHeight": 121
        },
        "snippet": "<ImageList\n      sx={{ width: 500, height: 450 }}\n      variant=\"quilted\"\n      cols={4}\n      rowHeight={121}\n    >\n      {itemData.map((item) => (\n        <ImageListItem key={item.img} cols={item.cols || 1} rows={item.rows || 1}>\n          <img\n            {...srcset(item.img, 121, item.rows, item.cols)}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n        </ImageListItem>\n      ))}\n    </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n        width: 500,\n        height: 450,\n        // Promote the list into its own layer in Chrome. This costs memory, but helps keeping high FPS.\n        transform: 'translateZ(0)',\n      }",
          "rowHeight": 200,
          "gap": 1
        },
        "snippet": "<ImageList\n      sx={{\n        width: 500,\n        height: 450,\n        // Promote the list into its own layer in Chrome. This costs memory, but helps keeping high FPS.\n        transform: 'translateZ(0)',\n      }}\n      rowHeight={200}\n      gap={1}\n    >\n      {itemData.map((item) => {\n        const cols = item.featured ? 2 : 1;\n        const rows = item.featured ? 2 : 1;\n\n        return (\n          <ImageListItem key={item.img} cols={cols} rows={rows}>\n            <img\n              {...srcset(item.img, 250, 200, rows, cols)}\n              alt={item.title}\n              loading=\"lazy\"\n            />\n            <ImageListItemBar\n              sx={{\n                background:\n                  'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n                  'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n              }}\n              title={item.title}\n              position=\"top\"\n              actionIcon={\n                <IconButton\n                  sx={{ color: 'white' }}\n                  aria-label={`star ${item.title}`}\n                >\n                  <StarBorderIcon />\n                </IconButton>\n              }\n              actionPosition=\"left\"\n            />\n          </ImageListItem>\n        );\n      })}\n    </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "masonry",
          "cols": 3,
          "gap": 8
        },
        "snippet": "<ImageList variant=\"masonry\" cols={3} gap={8}>\n        {itemData.map((item) => (\n          <ImageListItem key={item.img}>\n            <img\n              srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`}\n              src={`${item.img}?w=248&fit=crop&auto=format`}\n              alt={item.title}\n              loading=\"lazy\"\n            />\n            <ImageListItemBar position=\"below\" title={item.author} />\n          </ImageListItem>\n        ))}\n      </ImageList>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageList#ImageList",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ width: 500, height: 450 }",
          "cols": 3,
          "rowHeight": 164
        },
        "snippet": "<ImageList sx={{ width: 500, height: 450 }} cols={3} rowHeight={164}>\n      {itemData.map((item) => (\n        <ImageListItem key={item.img}>\n          <img\n            srcSet={`${item.img}?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}\n            src={`${item.img}?w=164&h=164&fit=crop&auto=format`}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n        </ImageListItem>\n      ))}\n    </ImageList>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageListItem#ImageListItem": [
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img",
          "cols": "cols",
          "rows": "rows"
        },
        "snippet": "<ImageListItem key={item.img} cols={cols} rows={rows}>\n            <img\n              {...srcset(item.img, 250, 200, rows, cols)}\n              alt={item.title}\n              loading=\"lazy\"\n            />\n            <ImageListItemBar\n              sx={{\n                background:\n                  'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n                  'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n              }}\n              title={item.title}\n              position=\"top\"\n              actionIcon={\n                <IconButton\n                  sx={{ color: 'white' }}\n                  aria-label={`star ${item.title}`}\n                >\n                  <StarBorderIcon />\n                </IconButton>\n              }\n              actionPosition=\"left\"\n            />\n          </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img",
          "cols": "item.cols || 1",
          "rows": "item.rows || 1"
        },
        "snippet": "<ImageListItem key={item.img} cols={item.cols || 1} rows={item.rows || 1}>\n          <img\n            {...srcset(item.img, 121, item.rows, item.cols)}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n        </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "Subheader",
          "cols": 2
        },
        "snippet": "<ImageListItem key=\"Subheader\" cols={2}>\n        <ListSubheader component=\"div\">December</ListSubheader>\n      </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img"
        },
        "snippet": "<ImageListItem key={item.img}>\n          <img\n            srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`}\n            src={`${item.img}?w=248&fit=crop&auto=format`}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n          <ImageListItemBar\n            title={item.title}\n            subtitle={item.author}\n            actionIcon={\n              <IconButton\n                sx={{ color: 'rgba(255, 255, 255, 0.54)' }}\n                aria-label={`info about ${item.title}`}\n              >\n                <InfoIcon />\n              </IconButton>\n            }\n          />\n        </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItem#ImageListItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "item.img"
        },
        "snippet": "<ImageListItem key={item.img}>\n          <img\n            srcSet={`${item.img}?w=248&fit=crop&auto=format&dpr=2 2x`}\n            src={`${item.img}?w=248&fit=crop&auto=format`}\n            alt={item.title}\n            loading=\"lazy\"\n          />\n          <ImageListItemBar\n            title={item.title}\n            subtitle={<span>by: {item.author}</span>}\n            position=\"below\"\n          />\n        </ImageListItem>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ImageListItemBar#ImageListItemBar": [
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{\n                background:\n                  'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n                  'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n              }",
          "title": "item.title",
          "position": "top",
          "actionIcon": "\n                <IconButton\n                  sx={{ color: 'white' }}\n                  aria-label={`star ${item.title}`}\n                >\n                  <StarBorderIcon />\n                </IconButton>\n              ",
          "actionPosition": "left"
        },
        "snippet": "<ImageListItemBar\n              sx={{\n                background:\n                  'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n                  'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n              }}\n              title={item.title}\n              position=\"top\"\n              actionIcon={\n                <IconButton\n                  sx={{ color: 'white' }}\n                  aria-label={`star ${item.title}`}\n                >\n                  <StarBorderIcon />\n                </IconButton>\n              }\n              actionPosition=\"left\"\n            />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "item.title",
          "subtitle": "item.author",
          "actionIcon": "\n              <IconButton\n                sx={{ color: 'rgba(255, 255, 255, 0.54)' }}\n                aria-label={`info about ${item.title}`}\n              >\n                <InfoIcon />\n              </IconButton>\n            "
        },
        "snippet": "<ImageListItemBar\n            title={item.title}\n            subtitle={item.author}\n            actionIcon={\n              <IconButton\n                sx={{ color: 'rgba(255, 255, 255, 0.54)' }}\n                aria-label={`info about ${item.title}`}\n              >\n                <InfoIcon />\n              </IconButton>\n            }\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "title": "item.title",
          "subtitle": "<span>by: {item.author}</span>",
          "position": "below"
        },
        "snippet": "<ImageListItemBar\n            title={item.title}\n            subtitle={<span>by: {item.author}</span>}\n            position=\"below\"\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ImageListItemBar#ImageListItemBar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "below",
          "title": "item.author"
        },
        "snippet": "<ImageListItemBar position=\"below\" title={item.author} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Modal#Modal": [
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-labelledby": "transition-modal-title",
          "aria-describedby": "transition-modal-description",
          "open": "open",
          "onClose": "handleClose",
          "closeAfterTransition": true,
          "slots": "{ backdrop: Backdrop }",
          "slotProps": "{\n          backdrop: {\n            timeout: 500,\n          },\n        }"
        },
        "snippet": "<Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500,\n          },\n        }}\n      >\n        <Fade in={open}>\n          <Box sx={style}>\n            <Typography id=\"transition-modal-title\" variant=\"h6\" component=\"h2\">\n              Text in a modal\n            </Typography>\n            <Typography id=\"transition-modal-description\" sx={{ mt: 2 }}>\n              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n            </Typography>\n          </Box>\n        </Fade>\n      </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-labelledby": "spring-modal-title",
          "aria-describedby": "spring-modal-description",
          "open": "open",
          "onClose": "handleClose",
          "closeAfterTransition": true,
          "slots": "{ backdrop: Backdrop }",
          "slotProps": "{\n          backdrop: {\n            TransitionComponent: Fade,\n          },\n        }"
        },
        "snippet": "<Modal\n        aria-labelledby=\"spring-modal-title\"\n        aria-describedby=\"spring-modal-description\"\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            TransitionComponent: Fade,\n          },\n        }}\n      >\n        <Fade in={open}>\n          <Box sx={style}>\n            <Typography id=\"spring-modal-title\" variant=\"h6\" component=\"h2\">\n              Text in a modal\n            </Typography>\n            <Typography id=\"spring-modal-description\" sx={{ mt: 2 }}>\n              Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n            </Typography>\n          </Box>\n        </Fade>\n      </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "keepMounted": true,
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "keep-mounted-modal-title",
          "aria-describedby": "keep-mounted-modal-description"
        },
        "snippet": "<Modal\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"keep-mounted-modal-title\"\n        aria-describedby=\"keep-mounted-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"keep-mounted-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"keep-mounted-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "modal-modal-title",
          "aria-describedby": "modal-modal-description"
        },
        "snippet": "<Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Modal#Modal",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "aria-labelledby": "child-modal-title",
          "aria-describedby": "child-modal-description"
        },
        "snippet": "<Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"child-modal-title\"\n        aria-describedby=\"child-modal-description\"\n      >\n        <Box sx={{ ...style, width: 200 }}>\n          <h2 id=\"child-modal-title\">Text in a child modal</h2>\n          <p id=\"child-modal-description\">\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit.\n          </p>\n          <Button onClick={handleClose}>Close Child Modal</Button>\n        </Box>\n      </Modal>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/NoSsr#NoSsr": [
      {
        "componentId": "@mui/material/NoSsr#NoSsr",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defer": "state.defer"
        },
        "snippet": "<NoSsr defer={state.defer}>\n              .....Inside NoSsr\n              <LargeTree />\n            </NoSsr>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/NoSsr#NoSsr",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<NoSsr>\n        <Box\n          sx={{ p: 2, bgcolor: 'secondary.main', color: 'secondary.contrastText' }}\n        >\n          Client only\n        </Box>\n      </NoSsr>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Pagination#Pagination": [
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 11,
          "defaultPage": 6,
          "siblingCount": 0,
          "boundaryCount": 2
        },
        "snippet": "<Pagination count={11} defaultPage={6} siblingCount={0} boundaryCount={2} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "page": "page",
          "count": 10,
          "renderItem": "(item) => (\n        <PaginationItem\n          component={Link}\n          to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`}\n          {...item}\n        />\n      )"
        },
        "snippet": "<Pagination\n      page={page}\n      count={10}\n      renderItem={(item) => (\n        <PaginationItem\n          component={Link}\n          to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`}\n          {...item}\n        />\n      )}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 10,
          "variant": "outlined",
          "color": "secondary"
        },
        "snippet": "<Pagination count={10} variant=\"outlined\" color=\"secondary\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 10,
          "page": "page",
          "onChange": "handleChange"
        },
        "snippet": "<Pagination count={10} page={page} onChange={handleChange} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Pagination#Pagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "count": 10,
          "variant": "outlined",
          "color": "primary"
        },
        "snippet": "<Pagination count={10} variant=\"outlined\" color=\"primary\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/PaginationItem#PaginationItem": [
      {
        "componentId": "@mui/material/PaginationItem#PaginationItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Link",
          "to": "`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`"
        },
        "snippet": "<PaginationItem\n          component={Link}\n          to={`/inbox${item.page === 1 ? '' : `?page=${item.page}`}`}\n          {...item}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/PaginationItem#PaginationItem",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "slots": "{ previous: ArrowBackIcon, next: ArrowForwardIcon }"
        },
        "snippet": "<PaginationItem\n            slots={{ previous: ArrowBackIcon, next: ArrowForwardIcon }}\n            {...item}\n          />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TablePagination#TablePagination": [
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[5, 10, 25, { label: 'All', value: -1 }]",
          "colSpan": 3,
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "slotProps": "{\n                select: {\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                },\n              }",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage",
          "ActionsComponent": "TablePaginationActions"
        },
        "snippet": "<TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              slotProps={{\n                select: {\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                },\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[10, 25, 100]",
          "component": "div",
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[10, 25, 100]",
          "component": "div",
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "rowsPerPageOptions": "[5, 10, 25]",
          "component": "div",
          "count": "rows.length",
          "rowsPerPage": "rowsPerPage",
          "page": "page",
          "onPageChange": "handleChangePage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TablePagination#TablePagination",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "div",
          "count": 100,
          "page": "page",
          "onPageChange": "handleChangePage",
          "rowsPerPage": "rowsPerPage",
          "onRowsPerPageChange": "handleChangeRowsPerPage"
        },
        "snippet": "<TablePagination\n      component=\"div\"\n      count={100}\n      page={page}\n      onPageChange={handleChangePage}\n      rowsPerPage={rowsPerPage}\n      onRowsPerPageChange={handleChangeRowsPerPage}\n    />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Popover#Popover": [
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "mouse-over-popover",
          "sx": "{\n          pointerEvents: 'none',\n        }",
          "open": "open",
          "anchorEl": "anchorEl",
          "anchorOrigin": "{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }",
          "transformOrigin": "{\n          vertical: 'top',\n          horizontal: 'left',\n        }",
          "onClose": "handlePopoverClose",
          "disableRestoreFocus": true
        },
        "snippet": "<Popover\n        id=\"mouse-over-popover\"\n        sx={{\n          pointerEvents: 'none',\n        }}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        onClose={handlePopoverClose}\n        disableRestoreFocus\n      >\n        <Typography sx={{ p: 1 }}>I use Popover.</Typography>\n      </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "anchorOrigin": "{ vertical: 'bottom', horizontal: 'left' }",
          "onClose": "handleClose",
          "disableAutoFocus": true
        },
        "snippet": "<Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n        onClose={handleClose}\n        disableAutoFocus\n      >\n        <Paper>\n          <Typography sx={{ p: 2 }}>The content of the Popover.</Typography>\n        </Paper>\n      </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "id",
          "open": "open",
          "anchorEl": "anchorEl",
          "onClose": "handleClose",
          "anchorOrigin": "{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }"
        },
        "snippet": "<Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n      >\n        <Typography sx={{ p: 2 }}>The content of the Popover.</Typography>\n      </Popover>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Popover#Popover",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorOrigin": "{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }",
          "transformOrigin": "{\n              vertical: 'top',\n              horizontal: 'center',\n            }"
        },
        "snippet": "<Popover\n            {...bindPopover(popupState)}\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }}\n            transformOrigin={{\n              vertical: 'top',\n              horizontal: 'center',\n            }}\n          >\n            <Typography sx={{ p: 2 }}>The content of the Popover.</Typography>\n          </Popover>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/LinearProgress#LinearProgress": [
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "buffer",
          "value": "progress",
          "valueBuffer": "buffer"
        },
        "snippet": "<LinearProgress variant=\"buffer\" value={progress} valueBuffer={buffer} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate",
          "value": "progress"
        },
        "snippet": "<LinearProgress variant=\"determinate\" value={progress} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "determinate"
        },
        "snippet": "<LinearProgress variant=\"determinate\" {...props} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "secondary"
        },
        "snippet": "<LinearProgress color=\"secondary\" />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/LinearProgress#LinearProgress",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "success"
        },
        "snippet": "<LinearProgress color=\"success\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Rating#Rating": [
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "hover-feedback",
          "value": "value",
          "precision": 0.5,
          "getLabelText": "getLabelText",
          "onChange": "(event, newValue) => {\n          setValue(newValue);\n        }",
          "onChangeActive": "(event, newHover) => {\n          setHover(newHover);\n        }",
          "emptyIcon": "<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />"
        },
        "snippet": "<Rating\n        name=\"hover-feedback\"\n        value={value}\n        precision={0.5}\n        getLabelText={getLabelText}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n        onChangeActive={(event, newHover) => {\n          setHover(newHover);\n        }}\n        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "text-feedback",
          "value": "value",
          "readOnly": true,
          "precision": 0.5,
          "emptyIcon": "<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />"
        },
        "snippet": "<Rating\n        name=\"text-feedback\"\n        value={value}\n        readOnly\n        precision={0.5}\n        emptyIcon={<StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "half-rating-read",
          "defaultValue": 2.5,
          "precision": 0.5,
          "readOnly": true
        },
        "snippet": "<Rating name=\"half-rating-read\" defaultValue={2.5} precision={0.5} readOnly />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "simple-controlled",
          "value": "value",
          "onChange": "(event, newValue) => {\n          setValue(newValue);\n        }"
        },
        "snippet": "<Rating\n        name=\"simple-controlled\"\n        value={value}\n        onChange={(event, newValue) => {\n          setValue(newValue);\n        }}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Rating#Rating",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "name": "half-rating",
          "defaultValue": 2.5,
          "precision": 0.5
        },
        "snippet": "<Rating name=\"half-rating\" defaultValue={2.5} precision={0.5} />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/NativeSelect#NativeSelect": [
      {
        "componentId": "@mui/material/NativeSelect#NativeSelect",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "demo-customized-select-native",
          "value": "age",
          "onChange": "handleChange",
          "input": "<BootstrapInput />"
        },
        "snippet": "<NativeSelect\n          id=\"demo-customized-select-native\"\n          value={age}\n          onChange={handleChange}\n          input={<BootstrapInput />}\n        >\n          <option aria-label=\"None\" value=\"\" />\n          <option value={10}>Ten</option>\n          <option value={20}>Twenty</option>\n          <option value={30}>Thirty</option>\n        </NativeSelect>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/NativeSelect#NativeSelect",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "defaultValue": 30,
          "inputProps": "{\n            name: 'age',\n            id: 'uncontrolled-native',\n          }"
        },
        "snippet": "<NativeSelect\n          defaultValue={30}\n          inputProps={{\n            name: 'age',\n            id: 'uncontrolled-native',\n          }}\n        >\n          <option value={10}>Ten</option>\n          <option value={20}>Twenty</option>\n          <option value={30}>Thirty</option>\n        </NativeSelect>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/OutlinedInput#OutlinedInput": [
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": "\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            ",
          "label": "Password"
        },
        "snippet": "<OutlinedInput\n            id=\"outlined-adornment-password\"\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n            label=\"Password\"\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "outlined-weight-helper-text",
          "inputProps": "{\n              'aria-label': 'weight',\n            }"
        },
        "snippet": "<OutlinedInput\n            id=\"outlined-adornment-weight\"\n            endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>}\n            aria-describedby=\"outlined-weight-helper-text\"\n            inputProps={{\n              'aria-label': 'weight',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "outlined-adornment-amount",
          "startAdornment": "<InputAdornment position=\"start\">$</InputAdornment>",
          "label": "Amount"
        },
        "snippet": "<OutlinedInput\n            id=\"outlined-adornment-amount\"\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n            label=\"Amount\"\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-outlined",
          "defaultValue": "Composed TextField",
          "label": "Name"
        },
        "snippet": "<OutlinedInput\n          id=\"component-outlined\"\n          defaultValue=\"Composed TextField\"\n          label=\"Name\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/OutlinedInput#OutlinedInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "select-multiple-chip",
          "label": "Chip"
        },
        "snippet": "<OutlinedInput id=\"select-multiple-chip\" label=\"Chip\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Slider#Slider": [
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "value",
          "min": 5,
          "step": 1,
          "max": 30,
          "scale": "calculateValue",
          "getAriaValueText": "valueLabelFormat",
          "valueLabelFormat": "valueLabelFormat",
          "onChange": "handleChange",
          "valueLabelDisplay": "auto",
          "aria-labelledby": "non-linear-slider"
        },
        "snippet": "<Slider\n        value={value}\n        min={5}\n        step={1}\n        max={30}\n        scale={calculateValue}\n        getAriaValueText={valueLabelFormat}\n        valueLabelFormat={valueLabelFormat}\n        onChange={handleChange}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"non-linear-slider\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "Temperature",
          "defaultValue": 30,
          "getAriaValueText": "valuetext",
          "valueLabelDisplay": "auto",
          "shiftStep": 30,
          "step": 10,
          "marks": true,
          "min": 10,
          "max": 110
        },
        "snippet": "<Slider\n        aria-label=\"Temperature\"\n        defaultValue={30}\n        getAriaValueText={valuetext}\n        valueLabelDisplay=\"auto\"\n        shiftStep={30}\n        step={10}\n        marks\n        min={10}\n        max={110}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "time-indicator",
          "size": "small",
          "value": "position",
          "min": 0,
          "step": 1,
          "max": "duration",
          "onChange": "(_, value) => setPosition(value as number)",
          "sx": "{\n            color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)',\n            height: 4,\n            '& .MuiSlider-thumb': {\n              width: 8,\n              height: 8,\n              transition: '0.3s cubic-bezier(.47,1.64,.41,.8)',\n              '&::before': {\n                boxShadow: '0 2px 12px 0 rgba(0,0,0,0.4)',\n              },\n              '&:hover, &.Mui-focusVisible': {\n                boxShadow: `0px 0px 0px 8px ${\n                  theme.palette.mode === 'dark'\n                    ? 'rgb(255 255 255 / 16%)'\n                    : 'rgb(0 0 0 / 16%)'\n                }`,\n              },\n              '&.Mui-active': {\n                width: 20,\n                height: 20,\n              },\n            },\n            '& .MuiSlider-rail': {\n              opacity: 0.28,\n            },\n          }"
        },
        "snippet": "<Slider\n          aria-label=\"time-indicator\"\n          size=\"small\"\n          value={position}\n          min={0}\n          step={1}\n          max={duration}\n          onChange={(_, value) => setPosition(value as number)}\n          sx={{\n            color: theme.palette.mode === 'dark' ? '#fff' : 'rgba(0,0,0,0.87)',\n            height: 4,\n            '& .MuiSlider-thumb': {\n              width: 8,\n              height: 8,\n              transition: '0.3s cubic-bezier(.47,1.64,.41,.8)',\n              '&::before': {\n                boxShadow: '0 2px 12px 0 rgba(0,0,0,0.4)',\n              },\n              '&:hover, &.Mui-focusVisible': {\n                boxShadow: `0px 0px 0px 8px ${\n                  theme.palette.mode === 'dark'\n                    ? 'rgb(255 255 255 / 16%)'\n                    : 'rgb(0 0 0 / 16%)'\n                }`,\n              },\n              '&.Mui-active': {\n                width: 20,\n                height: 20,\n              },\n            },\n            '& .MuiSlider-rail': {\n              opacity: 0.28,\n            },\n          }}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "Small steps",
          "defaultValue": 5e-8,
          "getAriaValueText": "valuetext",
          "step": 1e-8,
          "marks": true,
          "min": "-0.00000005",
          "max": 1e-7,
          "valueLabelDisplay": "auto"
        },
        "snippet": "<Slider\n        aria-label=\"Small steps\"\n        defaultValue={0.00000005}\n        getAriaValueText={valuetext}\n        step={0.00000001}\n        marks\n        min={-0.00000005}\n        max={0.0000001}\n        valueLabelDisplay=\"auto\"\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Slider#Slider",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "marks": "marks",
          "step": 10,
          "value": "val",
          "valueLabelDisplay": "auto",
          "min": "MIN",
          "max": "MAX",
          "onChange": "handleChange"
        },
        "snippet": "<Slider\n        marks={marks}\n        step={10}\n        value={val}\n        valueLabelDisplay=\"auto\"\n        min={MIN}\n        max={MAX}\n        onChange={handleChange}\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Slider#SliderThumb": [
      {
        "componentId": "@mui/material/Slider#SliderThumb",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SliderThumb {...other}>\n      {children}\n      <span className=\"airbnb-bar\" />\n      <span className=\"airbnb-bar\" />\n      <span className=\"airbnb-bar\" />\n    </SliderThumb>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Snackbar#Snackbar": [
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "messageInfo ? messageInfo.key : undefined",
          "open": "open",
          "autoHideDuration": 6000,
          "onClose": "handleClose",
          "TransitionProps": "{ onExited: handleExited }",
          "message": "messageInfo ? messageInfo.message : undefined",
          "action": "\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              UNDO\n            </Button>\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              sx={{ p: 0.5 }}\n              onClick={handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          </React.Fragment>\n        "
        },
        "snippet": "<Snackbar\n        key={messageInfo ? messageInfo.key : undefined}\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        TransitionProps={{ onExited: handleExited }}\n        message={messageInfo ? messageInfo.message : undefined}\n        action={\n          <React.Fragment>\n            <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n              UNDO\n            </Button>\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              sx={{ p: 0.5 }}\n              onClick={handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          </React.Fragment>\n        }\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "state.open",
          "onClose": "handleClose",
          "TransitionComponent": "state.Transition",
          "message": "I love snacks",
          "key": "state.Transition.name",
          "autoHideDuration": 1200
        },
        "snippet": "<Snackbar\n        open={state.open}\n        onClose={handleClose}\n        TransitionComponent={state.Transition}\n        message=\"I love snacks\"\n        key={state.Transition.name}\n        autoHideDuration={1200}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": true,
          "autoHideDuration": 6000,
          "message": "Archived",
          "action": "\n            <Button color=\"inherit\" size=\"small\">\n              Undo\n            </Button>\n          ",
          "sx": "{ bottom: { xs: 90, sm: 0 } }"
        },
        "snippet": "<Snackbar\n          open\n          autoHideDuration={6000}\n          message=\"Archived\"\n          action={\n            <Button color=\"inherit\" size=\"small\">\n              Undo\n            </Button>\n          }\n          sx={{ bottom: { xs: 90, sm: 0 } }}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "open": "open",
          "onClose": "handleClose",
          "TransitionComponent": "transition",
          "message": "I love snacks",
          "key": "transition ? transition.name : ''"
        },
        "snippet": "<Snackbar\n        open={open}\n        onClose={handleClose}\n        TransitionComponent={transition}\n        message=\"I love snacks\"\n        key={transition ? transition.name : ''}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Snackbar#Snackbar",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "anchorOrigin": "{ vertical, horizontal }",
          "open": "open",
          "onClose": "handleClose",
          "message": "I love snacks",
          "key": "vertical + horizontal"
        },
        "snippet": "<Snackbar\n        anchorOrigin={{ vertical, horizontal }}\n        open={open}\n        onClose={handleClose}\n        message=\"I love snacks\"\n        key={vertical + horizontal}\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/GlobalStyles#GlobalStyles": [
      {
        "componentId": "@mui/material/GlobalStyles#GlobalStyles",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "styles": "(theme) => ({\n          body: { backgroundColor: theme.palette.background.paper },\n        })"
        },
        "snippet": "<GlobalStyles\n        styles={(theme) => ({\n          body: { backgroundColor: theme.palette.background.paper },\n        })}\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SnackbarContent#SnackbarContent": [
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes.           I love cheesecake. I love chocolate.",
          "action": "action"
        },
        "snippet": "<SnackbarContent\n        message={\n          'I love candy. I love cookies. I love cupcakes. \\\n          I love cheesecake. I love chocolate.'\n        }\n        action={action}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes.",
          "action": "action"
        },
        "snippet": "<SnackbarContent\n        message=\"I love candy. I love cookies. I love cupcakes.\"\n        action={action}\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love snacks.",
          "action": "action"
        },
        "snippet": "<SnackbarContent message=\"I love snacks.\" action={action} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SnackbarContent#SnackbarContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "message": "I love candy. I love cookies. I love cupcakes.           I love cheesecake. I love chocolate."
        },
        "snippet": "<SnackbarContent\n        message={\n          'I love candy. I love cookies. I love cupcakes. \\\n          I love cheesecake. I love chocolate.'\n        }\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDialIcon#SpeedDialIcon": [
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "openIcon": "<EditIcon />"
        },
        "snippet": "<SpeedDialIcon openIcon={<EditIcon />} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SpeedDialIcon />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SpeedDialIcon />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SpeedDialIcon />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialIcon#SpeedDialIcon",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<SpeedDialIcon />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDial#SpeedDial": [
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial tooltip example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "open": "open"
        },
        "snippet": "<SpeedDial\n        ariaLabel=\"SpeedDial tooltip example\"\n        sx={{ position: 'absolute', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            tooltipOpen\n            onClick={handleClose}\n          />\n        ))}\n      </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial controlled open example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />",
          "onClose": "handleClose",
          "onOpen": "handleOpen",
          "open": "open"
        },
        "snippet": "<SpeedDial\n        ariaLabel=\"SpeedDial controlled open example\"\n        sx={{ position: 'absolute', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n        onClose={handleClose}\n        onOpen={handleOpen}\n        open={open}\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={handleClose}\n          />\n        ))}\n      </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial openIcon example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon openIcon={<EditIcon />} />"
        },
        "snippet": "<SpeedDial\n        ariaLabel=\"SpeedDial openIcon example\"\n        sx={{ position: 'absolute', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon openIcon={<EditIcon />} />}\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n          />\n        ))}\n      </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDial#SpeedDial",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ariaLabel": "SpeedDial basic example",
          "sx": "{ position: 'absolute', bottom: 16, right: 16 }",
          "icon": "<SpeedDialIcon />"
        },
        "snippet": "<SpeedDial\n        ariaLabel=\"SpeedDial basic example\"\n        sx={{ position: 'absolute', bottom: 16, right: 16 }}\n        icon={<SpeedDialIcon />}\n      >\n        {actions.map((action) => (\n          <SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n          />\n        ))}\n      </SpeedDial>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/SpeedDialAction#SpeedDialAction": [
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name",
          "tooltipOpen": true,
          "onClick": "handleClose"
        },
        "snippet": "<SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            tooltipOpen\n            onClick={handleClose}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name",
          "onClick": "handleClose"
        },
        "snippet": "<SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n            onClick={handleClose}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name"
        },
        "snippet": "<SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name"
        },
        "snippet": "<SpeedDialAction\n            key={action.name}\n            icon={action.icon}\n            tooltipTitle={action.name}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/SpeedDialAction#SpeedDialAction",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "action.name",
          "icon": "action.icon",
          "tooltipTitle": "action.name"
        },
        "snippet": "<SpeedDialAction\n              key={action.name}\n              icon={action.icon}\n              tooltipTitle={action.name}\n            />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Stepper#Stepper": [
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alternativeLabel": true,
          "activeStep": 1,
          "connector": "<ColorlibConnector />"
        },
        "snippet": "<Stepper alternativeLabel activeStep={1} connector={<ColorlibConnector />}>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "alternativeLabel": true,
          "activeStep": 1,
          "connector": "<QontoConnector />"
        },
        "snippet": "<Stepper alternativeLabel activeStep={1} connector={<QontoConnector />}>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "activeStep": "activeStep",
          "orientation": "vertical"
        },
        "snippet": "<Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((step, index) => (\n          <Step key={step.label}>\n            <StepLabel\n              optional={\n                index === 2 ? (\n                  <Typography variant=\"caption\">Last step</Typography>\n                ) : null\n              }\n            >\n              {step.label}\n            </StepLabel>\n            <StepContent>\n              <Typography>{step.description}</Typography>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                  </Button>\n                  <Button\n                    disabled={index === 0}\n                    onClick={handleBack}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    Back\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "nonLinear": true,
          "activeStep": "activeStep"
        },
        "snippet": "<Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Stepper#Stepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "activeStep": 1,
          "alternativeLabel": true
        },
        "snippet": "<Stepper activeStep={1} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n          </Step>\n        ))}\n      </Stepper>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Step#Step": [
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label",
          "completed": "completed[index]"
        },
        "snippet": "<Step key={label} completed={completed[index]}>\n            <StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>\n          </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "step.label"
        },
        "snippet": "<Step key={step.label}>\n            <StepLabel\n              optional={\n                index === 2 ? (\n                  <Typography variant=\"caption\">Last step</Typography>\n                ) : null\n              }\n            >\n              {step.label}\n            </StepLabel>\n            <StepContent>\n              <Typography>{step.description}</Typography>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                  </Button>\n                  <Button\n                    disabled={index === 0}\n                    onClick={handleBack}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    Back\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>\n          </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label}>\n            <StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>\n          </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label}>\n            <StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>\n          </Step>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Step#Step",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "label"
        },
        "snippet": "<Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepLabel#StepLabel": [
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "optional": "\n                index === 2 ? (\n                  <Typography variant=\"caption\">Last step</Typography>\n                ) : null\n              "
        },
        "snippet": "<StepLabel\n              optional={\n                index === 2 ? (\n                  <Typography variant=\"caption\">Last step</Typography>\n                ) : null\n              }\n            >\n              {step.label}\n            </StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "StepIconComponent": "ColorlibStepIcon"
        },
        "snippet": "<StepLabel StepIconComponent={ColorlibStepIcon}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "StepIconComponent": "QontoStepIcon"
        },
        "snippet": "<StepLabel StepIconComponent={QontoStepIcon}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepLabel {...labelProps}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/StepLabel#StepLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepLabel {...labelProps}>{label}</StepLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/MobileStepper#MobileStepper": [
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "progress",
          "steps": 6,
          "position": "static",
          "activeStep": "activeStep",
          "sx": "{ maxWidth: 400, flexGrow: 1 }",
          "nextButton": "\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n          Next\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </Button>\n      ",
          "backButton": "\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n          Back\n        </Button>\n      "
        },
        "snippet": "<MobileStepper\n      variant=\"progress\"\n      steps={6}\n      position=\"static\"\n      activeStep={activeStep}\n      sx={{ maxWidth: 400, flexGrow: 1 }}\n      nextButton={\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n          Next\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </Button>\n      }\n      backButton={\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n          Back\n        </Button>\n      }\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "dots",
          "steps": 6,
          "position": "static",
          "activeStep": "activeStep",
          "sx": "{ maxWidth: 400, flexGrow: 1 }",
          "nextButton": "\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n          Next\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </Button>\n      ",
          "backButton": "\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n          Back\n        </Button>\n      "
        },
        "snippet": "<MobileStepper\n      variant=\"dots\"\n      steps={6}\n      position=\"static\"\n      activeStep={activeStep}\n      sx={{ maxWidth: 400, flexGrow: 1 }}\n      nextButton={\n        <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\n          Next\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </Button>\n      }\n      backButton={\n        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n          Back\n        </Button>\n      }\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "variant": "text",
          "steps": "maxSteps",
          "position": "static",
          "activeStep": "activeStep",
          "nextButton": "\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeStep === maxSteps - 1}\n          >\n            Next\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        ",
          "backButton": "\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            Back\n          </Button>\n        "
        },
        "snippet": "<MobileStepper\n        variant=\"text\"\n        steps={maxSteps}\n        position=\"static\"\n        activeStep={activeStep}\n        nextButton={\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeStep === maxSteps - 1}\n          >\n            Next\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        }\n        backButton={\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            Back\n          </Button>\n        }\n      />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/MobileStepper#MobileStepper",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "steps": "maxSteps",
          "position": "static",
          "activeStep": "activeStep",
          "nextButton": "\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeStep === maxSteps - 1}\n          >\n            Next\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        ",
          "backButton": "\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            Back\n          </Button>\n        "
        },
        "snippet": "<MobileStepper\n        steps={maxSteps}\n        position=\"static\"\n        activeStep={activeStep}\n        nextButton={\n          <Button\n            size=\"small\"\n            onClick={handleNext}\n            disabled={activeStep === maxSteps - 1}\n          >\n            Next\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowLeft />\n            ) : (\n              <KeyboardArrowRight />\n            )}\n          </Button>\n        }\n        backButton={\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n            {theme.direction === 'rtl' ? (\n              <KeyboardArrowRight />\n            ) : (\n              <KeyboardArrowLeft />\n            )}\n            Back\n          </Button>\n        }\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepButton#StepButton": [
      {
        "componentId": "@mui/material/StepButton#StepButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "inherit",
          "onClick": "handleStep(index)"
        },
        "snippet": "<StepButton color=\"inherit\" onClick={handleStep(index)}>\n              {label}\n            </StepButton>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/StepContent#StepContent": [
      {
        "componentId": "@mui/material/StepContent#StepContent",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<StepContent>\n              <Typography>{step.description}</Typography>\n              <Box sx={{ mb: 2 }}>\n                <div>\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleNext}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    {index === steps.length - 1 ? 'Finish' : 'Continue'}\n                  </Button>\n                  <Button\n                    disabled={index === 0}\n                    onClick={handleBack}\n                    sx={{ mt: 1, mr: 1 }}\n                  >\n                    Back\n                  </Button>\n                </div>\n              </Box>\n            </StepContent>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableContainer#TableContainer": [
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper",
          "ref": "ref"
        },
        "snippet": "<TableContainer component={Paper} {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}>\n      <Table sx={{ minWidth: 700 }} aria-label=\"spanning table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={3}>\n              Details\n            </TableCell>\n            <TableCell align=\"right\">Price</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Desc</TableCell>\n            <TableCell align=\"right\">Qty.</TableCell>\n            <TableCell align=\"right\">Unit</TableCell>\n            <TableCell align=\"right\">Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.desc}>\n              <TableCell>{row.desc}</TableCell>\n              <TableCell align=\"right\">{row.qty}</TableCell>\n              <TableCell align=\"right\">{row.unit}</TableCell>\n              <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell rowSpan={3} />\n            <TableCell colSpan={2}>Subtotal</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Tax</TableCell>\n            <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2}>Total</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}>\n      <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.calories}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.fat}\n              </TableCell>\n            </TableRow>\n          ))}\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              slotProps={{\n                select: {\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                },\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "Paper"
        },
        "snippet": "<TableContainer component={Paper}>\n      <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align=\"right\">Calories</StyledTableCell>\n            <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <StyledTableRow key={row.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableContainer#TableContainer",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ maxHeight: 440 }"
        },
        "snippet": "<TableContainer sx={{ maxHeight: 440 }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\" colSpan={2}>\n                Country\n              </TableCell>\n              <TableCell align=\"center\" colSpan={3}>\n                Details\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ top: 57, minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Table#Table": [
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 750 }",
          "aria-labelledby": "tableTitle",
          "size": "dense ? 'small' : 'medium'"
        },
        "snippet": "<Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n          >\n            <EnhancedTableHead\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {visibleRows.map((row, index) => {\n                const isItemSelected = isSelected(row.id);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    onClick={(event) => handleClick(event, row.id)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"none\"\n                    >\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.calories}</TableCell>\n                    <TableCell align=\"right\">{row.fat}</TableCell>\n                    <TableCell align=\"right\">{row.carbs}</TableCell>\n                    <TableCell align=\"right\">{row.protein}</TableCell>\n                  </TableRow>\n                );\n              })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (dense ? 33 : 53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 650 }",
          "size": "small",
          "aria-label": "a dense table"
        },
        "snippet": "<Table sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Dessert (100g serving)</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 700 }",
          "aria-label": "spanning table"
        },
        "snippet": "<Table sx={{ minWidth: 700 }} aria-label=\"spanning table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={3}>\n              Details\n            </TableCell>\n            <TableCell align=\"right\">Price</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Desc</TableCell>\n            <TableCell align=\"right\">Qty.</TableCell>\n            <TableCell align=\"right\">Unit</TableCell>\n            <TableCell align=\"right\">Sum</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.desc}>\n              <TableCell>{row.desc}</TableCell>\n              <TableCell align=\"right\">{row.qty}</TableCell>\n              <TableCell align=\"right\">{row.unit}</TableCell>\n              <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell rowSpan={3} />\n            <TableCell colSpan={2}>Subtotal</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Tax</TableCell>\n            <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2}>Total</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 500 }",
          "aria-label": "custom pagination table"
        },
        "snippet": "<Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.calories}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.fat}\n              </TableCell>\n            </TableRow>\n          ))}\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              slotProps={{\n                select: {\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                },\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Table#Table",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ minWidth: 700 }",
          "aria-label": "customized table"
        },
        "snippet": "<Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align=\"right\">Calories</StyledTableCell>\n            <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <StyledTableRow key={row.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableHead#TableHead": [
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref"
        },
        "snippet": "<TableHead {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            color=\"primary\"\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{\n              'aria-label': 'select all desserts',\n            }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead>\n          <TableRow>\n            <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align=\"right\">Calories</StyledTableCell>\n            <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n          </TableRow>\n        </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead>\n            <TableRow>\n              <TableCell align=\"center\" colSpan={2}>\n                Country\n              </TableCell>\n              <TableCell align=\"center\" colSpan={3}>\n                Details\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ top: 57, minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableHead#TableHead",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableHead>\n          <TableRow>\n            <TableCell align=\"center\" colSpan={3}>\n              Details\n            </TableCell>\n            <TableCell align=\"right\">Price</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Desc</TableCell>\n            <TableCell align=\"right\">Qty.</TableCell>\n            <TableCell align=\"right\">Unit</TableCell>\n            <TableCell align=\"right\">Sum</TableCell>\n          </TableRow>\n        </TableHead>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableRow#TableRow": [
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "hover": true,
          "onClick": "(event) => handleClick(event, row.id)",
          "role": "checkbox",
          "aria-checked": "isItemSelected",
          "tabIndex": "-1",
          "key": "row.id",
          "selected": "isItemSelected",
          "sx": "{ cursor: 'pointer' }"
        },
        "snippet": "<TableRow\n                    hover\n                    onClick={(event) => handleClick(event, row.id)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"none\"\n                    >\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.calories}</TableCell>\n                    <TableCell align=\"right\">{row.fat}</TableCell>\n                    <TableCell align=\"right\">{row.carbs}</TableCell>\n                    <TableCell align=\"right\">{row.protein}</TableCell>\n                  </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "hover": true,
          "role": "checkbox",
          "tabIndex": "-1",
          "key": "row.code"
        },
        "snippet": "<TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "hover": true,
          "role": "checkbox",
          "tabIndex": "-1",
          "key": "row.code"
        },
        "snippet": "<TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                    {columns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number'\n                            ? column.format(value)\n                            : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "row.name",
          "sx": "{ '&:last-child td, &:last-child th': { border: 0 } }"
        },
        "snippet": "<TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableRow#TableRow",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "row.name",
          "sx": "{ '&:last-child td, &:last-child th': { border: 0 } }"
        },
        "snippet": "<TableRow\n              key={row.name}\n              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n            >\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell align=\"right\">{row.calories}</TableCell>\n              <TableCell align=\"right\">{row.fat}</TableCell>\n              <TableCell align=\"right\">{row.carbs}</TableCell>\n              <TableCell align=\"right\">{row.protein}</TableCell>\n            </TableRow>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableCell#TableCell": [
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.dataKey",
          "variant": "head",
          "align": "column.numeric || false ? 'right' : 'left'",
          "style": "{ width: column.width }",
          "sx": "{\n            backgroundColor: 'background.paper',\n          }"
        },
        "snippet": "<TableCell\n          key={column.dataKey}\n          variant=\"head\"\n          align={column.numeric || false ? 'right' : 'left'}\n          style={{ width: column.width }}\n          sx={{\n            backgroundColor: 'background.paper',\n          }}\n        >\n          {column.label}\n        </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "headCell.id",
          "align": "headCell.numeric ? 'right' : 'left'",
          "padding": "headCell.disablePadding ? 'none' : 'normal'",
          "sortDirection": "orderBy === headCell.id ? order : false"
        },
        "snippet": "<TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "component": "th",
          "id": "labelId",
          "scope": "row",
          "padding": "none"
        },
        "snippet": "<TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"none\"\n                    >\n                      {row.name}\n                    </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.id",
          "align": "column.align",
          "style": "{ top: 57, minWidth: column.minWidth }"
        },
        "snippet": "<TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ top: 57, minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableCell#TableCell",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "key": "column.id",
          "align": "column.align",
          "style": "{ minWidth: column.minWidth }"
        },
        "snippet": "<TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableBody#TableBody": [
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "ref": "ref"
        },
        "snippet": "<TableBody {...props} ref={ref} />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody>\n              {visibleRows.map((row, index) => {\n                const isItemSelected = isSelected(row.id);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    onClick={(event) => handleClick(event, row.id)}\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row.id}\n                    selected={isItemSelected}\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          'aria-labelledby': labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      component=\"th\"\n                      id={labelId}\n                      scope=\"row\"\n                      padding=\"none\"\n                    >\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.calories}</TableCell>\n                    <TableCell align=\"right\">{row.fat}</TableCell>\n                    <TableCell align=\"right\">{row.carbs}</TableCell>\n                    <TableCell align=\"right\">{row.protein}</TableCell>\n                  </TableRow>\n                );\n              })}\n              {emptyRows > 0 && (\n                <TableRow\n                  style={{\n                    height: (dense ? 33 : 53) * emptyRows,\n                  }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody>\n          {rows.map((row) => (\n            <TableRow key={row.desc}>\n              <TableCell>{row.desc}</TableCell>\n              <TableCell align=\"right\">{row.qty}</TableCell>\n              <TableCell align=\"right\">{row.unit}</TableCell>\n              <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\n            </TableRow>\n          ))}\n          <TableRow>\n            <TableCell rowSpan={3} />\n            <TableCell colSpan={2}>Subtotal</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Tax</TableCell>\n            <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell colSpan={2}>Total</TableCell>\n            <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\n          </TableRow>\n        </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.calories}\n              </TableCell>\n              <TableCell style={{ width: 160 }} align=\"right\">\n                {row.fat}\n              </TableCell>\n            </TableRow>\n          ))}\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TableBody#TableBody",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableBody>\n          {rows.map((row) => (\n            <StyledTableRow key={row.name}>\n              <StyledTableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </StyledTableCell>\n              <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n              <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n            </StyledTableRow>\n          ))}\n        </TableBody>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableFooter#TableFooter": [
      {
        "componentId": "@mui/material/TableFooter#TableFooter",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {},
        "snippet": "<TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              slotProps={{\n                select: {\n                  inputProps: {\n                    'aria-label': 'rows per page',\n                  },\n                  native: true,\n                },\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TableSortLabel#TableSortLabel": [
      {
        "componentId": "@mui/material/TableSortLabel#TableSortLabel",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "active": "orderBy === headCell.id",
          "direction": "orderBy === headCell.id ? order : 'asc'",
          "onClick": "createSortHandler(headCell.id)"
        },
        "snippet": "<TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/Input#Input": [
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "values.textmask",
          "onChange": "handleChange",
          "name": "textmask",
          "id": "formatted-text-mask-input",
          "inputComponent": "TextMaskCustom as any"
        },
        "snippet": "<Input\n          value={values.textmask}\n          onChange={handleChange}\n          name=\"textmask\"\n          id=\"formatted-text-mask-input\"\n          inputComponent={TextMaskCustom as any}\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "standard-weight-helper-text",
          "inputProps": "{\n              'aria-label': 'weight',\n            }"
        },
        "snippet": "<Input\n            id=\"standard-adornment-weight\"\n            endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>}\n            aria-describedby=\"standard-weight-helper-text\"\n            inputProps={{\n              'aria-label': 'weight',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "standard-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": "\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            "
        },
        "snippet": "<Input\n            id=\"standard-adornment-password\"\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-helper",
          "defaultValue": "Composed TextField",
          "aria-describedby": "component-helper-text"
        },
        "snippet": "<Input\n          id=\"component-helper\"\n          defaultValue=\"Composed TextField\"\n          aria-describedby=\"component-helper-text\"\n        />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/Input#Input",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-error",
          "defaultValue": "Composed TextField",
          "aria-describedby": "component-error-text"
        },
        "snippet": "<Input\n          id=\"component-error\"\n          defaultValue=\"Composed TextField\"\n          aria-describedby=\"component-error-text\"\n        />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/FilledInput#FilledInput": [
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-weight",
          "endAdornment": "<InputAdornment position=\"end\">kg</InputAdornment>",
          "aria-describedby": "filled-weight-helper-text",
          "inputProps": "{\n              'aria-label': 'weight',\n            }"
        },
        "snippet": "<FilledInput\n            id=\"filled-adornment-weight\"\n            endAdornment={<InputAdornment position=\"end\">kg</InputAdornment>}\n            aria-describedby=\"filled-weight-helper-text\"\n            inputProps={{\n              'aria-label': 'weight',\n            }}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-password",
          "type": "showPassword ? 'text' : 'password'",
          "endAdornment": "\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            "
        },
        "snippet": "<FilledInput\n            id=\"filled-adornment-password\"\n            type={showPassword ? 'text' : 'password'}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "filled-adornment-amount",
          "startAdornment": "<InputAdornment position=\"start\">$</InputAdornment>"
        },
        "snippet": "<FilledInput\n            id=\"filled-adornment-amount\"\n            startAdornment={<InputAdornment position=\"start\">$</InputAdornment>}\n          />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/FilledInput#FilledInput",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "id": "component-filled",
          "defaultValue": "Composed TextField"
        },
        "snippet": "<FilledInput id=\"component-filled\" defaultValue=\"Composed TextField\" />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputBase#InputBase": [
      {
        "componentId": "@mui/material/InputBase#InputBase",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "sx": "{ ml: 1, flex: 1 }",
          "placeholder": "Search Google Maps",
          "inputProps": "{ 'aria-label': 'search google maps' }"
        },
        "snippet": "<InputBase\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Search Google Maps\"\n        inputProps={{ 'aria-label': 'search google maps' }}\n      />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/InputAdornment#InputAdornment": [
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "end"
        },
        "snippet": "<InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "end"
        },
        "snippet": "<InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                  edge=\"end\"\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "end"
        },
        "snippet": "<InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {showPassword ? <VisibilityOff /> : <Visibility />}\n                </IconButton>\n              </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "start"
        },
        "snippet": "<InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/InputAdornment#InputAdornment",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "position": "start"
        },
        "snippet": "<InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/TextareaAutosize#TextareaAutosize": [
      {
        "componentId": "@mui/material/TextareaAutosize#TextareaAutosize",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "maxRows": 4,
          "aria-label": "maximum height",
          "placeholder": "Maximum 4 rows",
          "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua.",
          "style": "{ width: 200 }"
        },
        "snippet": "<TextareaAutosize\n      maxRows={4}\n      aria-label=\"maximum height\"\n      placeholder=\"Maximum 4 rows\"\n      defaultValue=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n          ut labore et dolore magna aliqua.\"\n      style={{ width: 200 }}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextareaAutosize#TextareaAutosize",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "minimum height",
          "minRows": 3,
          "placeholder": "Minimum 3 rows",
          "style": "{ width: 200 }"
        },
        "snippet": "<TextareaAutosize\n      aria-label=\"minimum height\"\n      minRows={3}\n      placeholder=\"Minimum 3 rows\"\n      style={{ width: 200 }}\n    />",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/TextareaAutosize#TextareaAutosize",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "aria-label": "empty textarea",
          "placeholder": "Empty",
          "style": "{ width: 200 }"
        },
        "snippet": "<TextareaAutosize\n      aria-label=\"empty textarea\"\n      placeholder=\"Empty\"\n      style={{ width: 200 }}\n    />",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ToggleButtonGroup#ToggleButtonGroup": [
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "color": "primary",
          "value": "alignment",
          "exclusive": true,
          "onChange": "handleChange",
          "aria-label": "Platform"
        },
        "snippet": "<ToggleButtonGroup\n      color=\"primary\"\n      value={alignment}\n      exclusive\n      onChange={handleChange}\n      aria-label=\"Platform\"\n    >\n      <ToggleButton value=\"web\">Web</ToggleButton>\n      <ToggleButton value=\"android\">Android</ToggleButton>\n      <ToggleButton value=\"ios\">iOS</ToggleButton>\n    </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "alignment",
          "exclusive": true,
          "onChange": "handleAlignment",
          "aria-label": "text alignment"
        },
        "snippet": "<ToggleButtonGroup\n      value={alignment}\n      exclusive\n      onChange={handleAlignment}\n      aria-label=\"text alignment\"\n    >\n      <ToggleButton value=\"left\" aria-label=\"left aligned\">\n        <FormatAlignLeftIcon />\n      </ToggleButton>\n      <ToggleButton value=\"center\" aria-label=\"centered\">\n        <FormatAlignCenterIcon />\n      </ToggleButton>\n      <ToggleButton value=\"right\" aria-label=\"right aligned\">\n        <FormatAlignRightIcon />\n      </ToggleButton>\n      <ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n        <FormatAlignJustifyIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "alignment",
          "exclusive": true,
          "onChange": "handleAlignment",
          "aria-label": "text alignment"
        },
        "snippet": "<ToggleButtonGroup\n        value={alignment}\n        exclusive\n        onChange={handleAlignment}\n        aria-label=\"text alignment\"\n      >\n        <ToggleButton value=\"left\" aria-label=\"left aligned\">\n          <FormatAlignLeftIcon />\n        </ToggleButton>\n        <ToggleButton value=\"center\" aria-label=\"centered\">\n          <FormatAlignCenterIcon />\n        </ToggleButton>\n        <ToggleButton value=\"right\" aria-label=\"right aligned\">\n          <FormatAlignRightIcon />\n        </ToggleButton>\n      </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "orientation": "vertical",
          "value": "view",
          "exclusive": true,
          "onChange": "handleChange"
        },
        "snippet": "<ToggleButtonGroup\n      orientation=\"vertical\"\n      value={view}\n      exclusive\n      onChange={handleChange}\n    >\n      <ToggleButton value=\"list\" aria-label=\"list\">\n        <ViewListIcon />\n      </ToggleButton>\n      <ToggleButton value=\"module\" aria-label=\"module\">\n        <ViewModuleIcon />\n      </ToggleButton>\n      <ToggleButton value=\"quilt\" aria-label=\"quilt\">\n        <ViewQuiltIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButtonGroup#ToggleButtonGroup",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "formats",
          "onChange": "handleFormat",
          "aria-label": "text formatting"
        },
        "snippet": "<ToggleButtonGroup\n      value={formats}\n      onChange={handleFormat}\n      aria-label=\"text formatting\"\n    >\n      <ToggleButton value=\"bold\" aria-label=\"bold\">\n        <FormatBoldIcon />\n      </ToggleButton>\n      <ToggleButton value=\"italic\" aria-label=\"italic\">\n        <FormatItalicIcon />\n      </ToggleButton>\n      <ToggleButton value=\"underlined\" aria-label=\"underlined\">\n        <FormatUnderlinedIcon />\n      </ToggleButton>\n      <ToggleButton value=\"color\" aria-label=\"color\" disabled>\n        <FormatColorFillIcon />\n        <ArrowDropDownIcon />\n      </ToggleButton>\n    </ToggleButtonGroup>",
        "tags": [
          "external-lib"
        ]
      }
    ],
    "@mui/material/ToggleButton#ToggleButton": [
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "check",
          "selected": "selected",
          "onChange": "() => {\n        setSelected(!selected);\n      }"
        },
        "snippet": "<ToggleButton\n      value=\"check\"\n      selected={selected}\n      onChange={() => {\n        setSelected(!selected);\n      }}\n    >\n      <CheckIcon />\n    </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "color",
          "aria-label": "color",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"color\" aria-label=\"color\" disabled>\n            <FormatColorFillIcon />\n            <ArrowDropDownIcon />\n          </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "color",
          "aria-label": "color",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"color\" aria-label=\"color\" disabled>\n        <FormatColorFillIcon />\n        <ArrowDropDownIcon />\n      </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "justify",
          "aria-label": "justified",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n            <FormatAlignJustifyIcon />\n          </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      },
      {
        "componentId": "@mui/material/ToggleButton#ToggleButton",
        "source": {
          "type": "code-usage"
        },
        "location": {
          "path": "",
          "start": {
            "line": 0,
            "index": 0
          },
          "end": {
            "line": 0,
            "index": 0
          }
        },
        "propsValues": {
          "value": "justify",
          "aria-label": "justified",
          "disabled": true
        },
        "snippet": "<ToggleButton value=\"justify\" aria-label=\"justified\" disabled>\n        <FormatAlignJustifyIcon />\n      </ToggleButton>",
        "tags": [
          "external-lib"
        ]
      }
    ]
  }
}